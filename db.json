{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/content.json","hash":"f7d69efd88fc22d9a68b7b130dacd9ba8e87dc04","modified":1562073213235},{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1562052135621},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1562052135621},{"_id":"themes/pure/README.cn.md","hash":"a634af4addbb57088935e060e8ec6035ea7bab76","modified":1562052135621},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1562052135622},{"_id":"themes/pure/_config.yml","hash":"8498e5d3caf9595960de516534516e12a1f824f0","modified":1562072592256},{"_id":"themes/pure/_config.yml.example","hash":"bf4aa6a0a796cdaaaa6750377b301dbb8557a897","modified":1562054598550},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1562052135646},{"_id":"source/_posts/ca.md","hash":"acedfa187f7655ade5d81b1ae6debfe9c35a68dc","modified":1562071711117},{"_id":"source/_posts/ansible.md","hash":"0bcaca61c852f7015ff552b4da5e8cd9862d99c0","modified":1562071699962},{"_id":"source/_posts/dragonfly-0-4-0.md","hash":"14bc6f06b12897b07a7dd6e5959cdfc3cd323996","modified":1562072029610},{"_id":"source/_posts/go-mod.md","hash":"4eefe1a4427f31aa49a4de3411e1f33f8a2cf49e","modified":1562073551219},{"_id":"source/_posts/fluentd.md","hash":"671bbc67bceb1d06247bba7798e8cb1228a3048b","modified":1562073551209},{"_id":"source/_posts/hello-world.md","hash":"a006d0e67c8b552831bf597ccdded29e13616b6d","modified":1551062041282},{"_id":"source/_posts/golang.md","hash":"6038ee3acd99b21ebe9a54004c6ce50332d4ec58","modified":1562073551247},{"_id":"source/_posts/dragonfly.md","hash":"e4b4bf995cd913315df7ebfbe41b5586f6e8724f","modified":1551154158399},{"_id":"source/_posts/git.md","hash":"651da054bde84d36c7c5d097fb218d9ec1a943b0","modified":1562071782911},{"_id":"source/_posts/helm.md","hash":"050f0c6e555dbfb473e267906a534455a886f892","modified":1562055721783},{"_id":"source/_posts/iterm2.md","hash":"529c70fa86fa0ca2b8ed9548e90bae731d84a204","modified":1555812809713},{"_id":"source/_posts/https-harbor.md","hash":"63e75d8f13491e9b05900964abc48a677541a8e2","modified":1562071836792},{"_id":"source/_posts/kubeadm.md","hash":"4168fc3479c831156d14b91cf13f788a721dcf68","modified":1561711929831},{"_id":"source/_posts/kubernetes.md","hash":"c2c24e511ade9a3f3217a18f9994eb74be540aef","modified":1561429624554},{"_id":"source/_posts/linux-cmd.md","hash":"8cc24b5fefbd4d42539a49946e9ede3373f205a1","modified":1562073765274},{"_id":"source/_posts/kafka.md","hash":"731c5322de44d197ea5ed303f93b9160ba45eaa8","modified":1562071868353},{"_id":"source/_posts/mac-key.md","hash":"0fbbc3262d94985f0265edac366d8823690fa002","modified":1555812809716},{"_id":"source/_posts/pprof.md","hash":"1498d21f46299acdc0cbe883be950a193753c1a3","modified":1555731591802},{"_id":"source/_posts/nginx-https.md","hash":"1f59f5d2f40a4375572b55cae016c6b7586015cd","modified":1561301912905},{"_id":"source/_posts/protobuf.md","hash":"58b8f3f2f041b87751feb612d15bf7699bb66fb4","modified":1555731591803},{"_id":"source/_posts/pvc-pv.md","hash":"96c4ccebf2ca678a4fe402408f0e2fcea3b9ce02","modified":1562072698560},{"_id":"source/_posts/nats.md","hash":"5a97860126f9e554abdada73d57a4ba96d45737f","modified":1561519902043},{"_id":"source/_posts/vim.md","hash":"68e4b67e61b010bfbc6e8ea291e039c87ed97852","modified":1562073551205},{"_id":"source/_posts/shell-1.md","hash":"ab54b03c1385d0e885666676382647c262462f60","modified":1555844758320},{"_id":"source/_posts/如何在-Linux-中不使用-CD-命令进入目录-文件夹.md","hash":"5d79a02f66984806ee5bee3997a991037751026e","modified":1562073551224},{"_id":"source/_posts/yum.md","hash":"0e793a49f68f4d47e2f7089c9918a940d930e84c","modified":1562073551244},{"_id":"source/_posts/redis.md","hash":"7c7b7b6591d0ee17773004076fc135f2ab915ae7","modified":1562073551230},{"_id":"source/_posts/排除应用程序故障.md","hash":"e12b93dc157a8160ba6a3d2e36ecce06e54bf4f2","modified":1562073551197},{"_id":"source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1562059032056},{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1562052798172},{"_id":"source/_posts/webhook.md","hash":"f052a25fbbd1a3d191064292ef68136ae838b33c","modified":1562073551249},{"_id":"source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1562052798172},{"_id":"source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1562052798176},{"_id":"source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1562052798172},{"_id":"source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1562052798172},{"_id":"source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1562052798172},{"_id":"themes/pure/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1562052135614},{"_id":"source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1562052798172},{"_id":"source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1562052798172},{"_id":"themes/pure/.git/config","hash":"7ec6421043b0f1135362e6c04e1f42251478e733","modified":1562052135617},{"_id":"themes/pure/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1562052123318},{"_id":"themes/pure/.git/packed-refs","hash":"9cee8f644cf1f7192db9ba4dc79507a6938fc2e6","modified":1562052135610},{"_id":"themes/pure/.git/index","hash":"f7ebc06ce5f6c384542a80b27ff0ae35ed2a040f","modified":1562056209740},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1562052135627},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1562052135627},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1562052135627},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1562052135627},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1562052135644},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1562052135644},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1562052135644},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1562052135644},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1562052135644},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1562052135644},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1562052135645},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1562052135645},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1562052135645},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1562052135645},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1562052135645},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1562052135645},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1562052135645},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1562052135658},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1562052135660},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1562052135647},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1562052135647},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1562052135648},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1562052135649},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1562052135650},{"_id":"themes/pure/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1562052123319},{"_id":"themes/pure/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1562052123318},{"_id":"themes/pure/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1562052123319},{"_id":"themes/pure/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1562052123319},{"_id":"themes/pure/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1562052123319},{"_id":"themes/pure/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1562052123318},{"_id":"themes/pure/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1562052123318},{"_id":"themes/pure/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1562052123319},{"_id":"themes/pure/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1562052123320},{"_id":"themes/pure/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1562052123319},{"_id":"themes/pure/.git/logs/HEAD","hash":"af6691d5f7a3fd57d604790cb5c85b88a6d55288","modified":1562052135616},{"_id":"themes/pure/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1562052123320},{"_id":"themes/pure/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1562052123317},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1562052135623},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1562052135623},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1562052135623},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1562052135624},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1562052135624},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1562052135625},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1562052135624},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1562052135625},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1562052135625},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1562052135628},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1562052135628},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1562055385121},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1562052135629},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1562052135629},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1562052135630},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1562052135629},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1562052135630},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1562052135630},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1562052135630},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1562052135631},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1562052135631},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1562052135632},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1562052135633},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1562052135632},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1562052135632},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"41a319642da5af07d6cfb8525796aa610b721879","modified":1562052135633},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1562052135637},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1562052135637},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1562052135640},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1562052135637},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1562052135640},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"143087db0573772b0bdaf7f93312553158942ec7","modified":1562052135641},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1562052135641},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1562052135641},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1562052135641},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"234e6a9d8b129dc19e916cb9f927a27b04758180","modified":1562052135641},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1562052135641},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1562052135642},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1562052135642},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1562052135642},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1562052135642},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1562052135642},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1562052135643},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1562052135643},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1562052135643},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1562052135643},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1562052135644},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1562052135644},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1562052135661},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1562052135667},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1562052135669},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1562052135669},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1562052135673},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1562052135674},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1562052135675},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1562052135675},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1562052135675},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1562052135676},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1562052135677},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1562052135679},{"_id":"themes/pure/.git/refs/heads/master","hash":"97bb9e2bebb4387b1e775e2af7ce890278175989","modified":1562052135615},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1562052135634},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1562052135634},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1562052135635},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1562052135635},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1562052135635},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1562052135635},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1562052135635},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1562052135636},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1562052135636},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1562052135636},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1562052135637},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1562052135637},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1562052135637},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1562052135638},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1562052135638},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1562052135639},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1562052135639},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1562052135639},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1562052135639},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1562052135639},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1562052135640},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1562052135640},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1562052135640},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1562052135668},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1562052135671},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1562052135660},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1562052135672},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1562052135671},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1562052135673},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1562052135673},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1562052135678},{"_id":"themes/pure/.git/objects/pack/pack-8303b71c27f680305174d277b4079726fde52b21.idx","hash":"b5826744d2ff6954f53001c1d346d30a3ee37dc1","modified":1562052135603},{"_id":"themes/pure/source/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1562052135659},{"_id":"themes/pure/.git/logs/refs/heads/master","hash":"af6691d5f7a3fd57d604790cb5c85b88a6d55288","modified":1562052135617},{"_id":"themes/pure/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1562052135614},{"_id":"themes/pure/.git/logs/refs/remotes/origin/HEAD","hash":"af6691d5f7a3fd57d604790cb5c85b88a6d55288","modified":1562052135614},{"_id":"themes/pure/source/images/avatar.png","hash":"afa24f9de5e9ae14f6ff22365ace0c6352399ceb","modified":1562055576551},{"_id":"source/_posts/WX20190228-205542@2x.png","hash":"63319732e3897be1d00380574b3e9de99bd1ced1","modified":1555726566094},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1562052135658},{"_id":"themes/pure/.git/objects/pack/pack-8303b71c27f680305174d277b4079726fde52b21.pack","hash":"87ae45b62b793a8a34e87f3850ee9c5fe29963ac","modified":1562052135602},{"_id":"themes/pure/debug.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562073691411}],"Category":[{"name":"helm","_id":"cjxlu2kge000ngkxr9alk86wb"},{"name":"kubernetes","parent":"cjxlu2kge000ngkxr9alk86wb","_id":"cjxlu2kgh000vgkxrpnb8jzf2"},{"name":"git","_id":"cjxlu2kh2001vgkxr14tb1513"}],"Data":[{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"links","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"_content":"{\n  \"key\": \"values\"\n}","source":"content.json","raw":"{\n  \"key\": \"values\"\n}","date":"2019-07-02T13:13:33.236Z","updated":"2019-07-02T13:13:33.235Z","path":"content.json","layout":"false","title":"","comments":1,"_id":"cjxlu2keg0000gkxr1y1i711o","content":"{\"key\":\"values\"}","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"{\"key\":\"values\"}"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2019-07-02T09:17:12.056Z","updated":"2019-07-02T09:17:12.056Z","path":"books/index.html","_id":"cjxlu2kfv0002gkxrma5cnzr2","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","date":"2019-07-02T07:33:18.173Z","updated":"2019-07-02T07:33:18.172Z","path":"/404.html","layout":"page","_id":"cjxlu2kg00004gkxri79y4796","content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"<%- config.url %>\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"<%- config.url %>\" homepagename=\"回到我的主页\"></script>\n"},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2019-07-02T07:33:18.173Z","updated":"2019-07-02T07:33:18.172Z","path":"links/index.html","_id":"cjxlu2kg20006gkxrjw1ghv6v","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2019-07-02T07:33:18.173Z","updated":"2019-07-02T07:33:18.172Z","path":"repository/index.html","_id":"cjxlu2kg60009gkxrk9tr3lv3","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","_content":"个人详细介绍","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\n---\n个人详细介绍","date":"2019-07-02T07:33:18.173Z","updated":"2019-07-02T07:33:18.172Z","path":"about/index.html","_id":"cjxlu2kg7000bgkxrjxe0gmiz","content":"<p>个人详细介绍</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>个人详细介绍</p>\n"},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2019-07-02T07:33:18.173Z","updated":"2019-07-02T07:33:18.172Z","path":"tags/index.html","_id":"cjxlu2kg8000dgkxrv2kr3vim","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n---\n","date":"2019-07-02T07:33:18.173Z","updated":"2019-07-02T07:33:18.172Z","path":"categories/index.html","_id":"cjxlu2kga000hgkxrnhjoauge","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":" https证书制作","date":"2019-06-23T14:53:42.000Z","_content":"```\n#!/bin/bash\n\n# step 1 为服务器端和客户端准备公钥、私钥\n# 生成服务器端私钥\nopenssl genrsa -out server.key 1024\n# 生成服务器端公钥\nopenssl rsa -in server.key -pubout -out server.pem\n\n\n# step 2 生成 CA 证书\n# 生成客户端私钥\nopenssl genrsa -out client.key 1024\n# 生成客户端公钥\nopenssl rsa -in client.key -pubout -out client.pem\n\n# 生成 CA 私钥\nopenssl genrsa -out ca.key 1024\n# X.509 Certificate Signing Request (CSR) Management.\nopenssl req -new -key ca.key -out ca.csr\n# X.509 Certificate Data Management.\nopenssl x509 -req -in ca.csr -signkey ca.key -out ca.crt\n\n# ➜  keys  openssl req -new -key ca.key -out ca.csr\n# You are about to be asked to enter information that will be incorporated\n# into your certificate request.\n# What you are about to enter is what is called a Distinguished Name or a DN.\n# There are quite a few fields but you can leave some blank\n# For some fields there will be a default value,\n# If you enter '.', the field will be left blank.\n# -----\n# Country Name (2 letter code) [AU]:CN\n# State or Province Name (full name) [Some-State]:Zhejiang\n# Locality Name (eg, city) []:Hangzhou\n# Organization Name (eg, company) [Internet Widgits Pty Ltd]:My CA\n# Organizational Unit Name (eg, section) []:\n# Common Name (e.g. server FQDN or YOUR name) []:localhost\n# Email Address []:\n\n\n# step 3 生成服务器端证书和客户端证书\n# 服务器端需要向 CA 机构申请签名证书，在申请签名证书之前依然是创建自己的 CSR 文件\nopenssl req -new -key server.key -out server.csr\n# 向自己的 CA 机构申请证书，签名过程需要 CA 的证书和私钥参与，最终颁发一个带有 CA 签名的证书\nopenssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt\n\n# client 端\nopenssl req -new -key client.key -out client.csr\n# client 端到 CA 签名\nopenssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt\n\n\n获取服务端签名, 即server.crt的内容:\nopenssl x509 -in <(openssl s_client -showcerts -servername dfdaemon.com -connect dfdaemon.com:65001 -prexit 2>/dev/null)\n```\n\n```\nopenssl x509部分命令\n打印出证书的内容：\nopenssl x509 -in cert.pem -noout -text\n打印出证书的系列号\nopenssl x509 -in cert.pem -noout -serial\n打印出证书的拥有者名字\nopenssl x509 -in cert.pem -noout -subject\n以RFC2253规定的格式打印出证书的拥有者名字\nopenssl x509 -in cert.pem -noout -subject -nameopt RFC2253\n在支持UTF8的终端一行过打印出证书的拥有者名字\nopenssl x509 -in cert.pem -noout -subject -nameopt oneline -nameopt -escmsb\n打印出证书的MD5特征参数\nopenssl x509 -in cert.pem -noout -fingerprint\n打印出证书的SHA特征参数\nopenssl x509 -sha1 -in cert.pem -noout -fingerprint\n把PEM格式的证书转化成DER格式\nopenssl x509 -in cert.pem -inform PEM -out cert.der -outform DER\n把一个证书转化成CSR\nopenssl x509 -x509toreq -in cert.pem -out req.pem -signkey key.pem\n给一个CSR进行处理，颁发字签名证书，增加CA扩展项\nopenssl x509 -req -in careq.pem -extfile openssl.cnf -extensions v3_ca -signkey key.pem -out cacert.pem\n给一个CSR签名，增加用户证书扩展项\nopenssl x509 -req -in req.pem -extfile openssl.cnf -extensions v3_usr -CA cacert.pem -CAkey key.pem -CAcreateserial\n```","source":"_posts/ca.md","raw":"---\ntitle:  https证书制作\ndate: 2019-06-23 22:53:42\ntags:\n---\n```\n#!/bin/bash\n\n# step 1 为服务器端和客户端准备公钥、私钥\n# 生成服务器端私钥\nopenssl genrsa -out server.key 1024\n# 生成服务器端公钥\nopenssl rsa -in server.key -pubout -out server.pem\n\n\n# step 2 生成 CA 证书\n# 生成客户端私钥\nopenssl genrsa -out client.key 1024\n# 生成客户端公钥\nopenssl rsa -in client.key -pubout -out client.pem\n\n# 生成 CA 私钥\nopenssl genrsa -out ca.key 1024\n# X.509 Certificate Signing Request (CSR) Management.\nopenssl req -new -key ca.key -out ca.csr\n# X.509 Certificate Data Management.\nopenssl x509 -req -in ca.csr -signkey ca.key -out ca.crt\n\n# ➜  keys  openssl req -new -key ca.key -out ca.csr\n# You are about to be asked to enter information that will be incorporated\n# into your certificate request.\n# What you are about to enter is what is called a Distinguished Name or a DN.\n# There are quite a few fields but you can leave some blank\n# For some fields there will be a default value,\n# If you enter '.', the field will be left blank.\n# -----\n# Country Name (2 letter code) [AU]:CN\n# State or Province Name (full name) [Some-State]:Zhejiang\n# Locality Name (eg, city) []:Hangzhou\n# Organization Name (eg, company) [Internet Widgits Pty Ltd]:My CA\n# Organizational Unit Name (eg, section) []:\n# Common Name (e.g. server FQDN or YOUR name) []:localhost\n# Email Address []:\n\n\n# step 3 生成服务器端证书和客户端证书\n# 服务器端需要向 CA 机构申请签名证书，在申请签名证书之前依然是创建自己的 CSR 文件\nopenssl req -new -key server.key -out server.csr\n# 向自己的 CA 机构申请证书，签名过程需要 CA 的证书和私钥参与，最终颁发一个带有 CA 签名的证书\nopenssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt\n\n# client 端\nopenssl req -new -key client.key -out client.csr\n# client 端到 CA 签名\nopenssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt\n\n\n获取服务端签名, 即server.crt的内容:\nopenssl x509 -in <(openssl s_client -showcerts -servername dfdaemon.com -connect dfdaemon.com:65001 -prexit 2>/dev/null)\n```\n\n```\nopenssl x509部分命令\n打印出证书的内容：\nopenssl x509 -in cert.pem -noout -text\n打印出证书的系列号\nopenssl x509 -in cert.pem -noout -serial\n打印出证书的拥有者名字\nopenssl x509 -in cert.pem -noout -subject\n以RFC2253规定的格式打印出证书的拥有者名字\nopenssl x509 -in cert.pem -noout -subject -nameopt RFC2253\n在支持UTF8的终端一行过打印出证书的拥有者名字\nopenssl x509 -in cert.pem -noout -subject -nameopt oneline -nameopt -escmsb\n打印出证书的MD5特征参数\nopenssl x509 -in cert.pem -noout -fingerprint\n打印出证书的SHA特征参数\nopenssl x509 -sha1 -in cert.pem -noout -fingerprint\n把PEM格式的证书转化成DER格式\nopenssl x509 -in cert.pem -inform PEM -out cert.der -outform DER\n把一个证书转化成CSR\nopenssl x509 -x509toreq -in cert.pem -out req.pem -signkey key.pem\n给一个CSR进行处理，颁发字签名证书，增加CA扩展项\nopenssl x509 -req -in careq.pem -extfile openssl.cnf -extensions v3_ca -signkey key.pem -out cacert.pem\n给一个CSR签名，增加用户证书扩展项\nopenssl x509 -req -in req.pem -extfile openssl.cnf -extensions v3_usr -CA cacert.pem -CAkey key.pem -CAcreateserial\n```","slug":"ca","published":1,"updated":"2019-07-02T12:48:31.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kfr0001gkxr73pmakfy","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># step 1 为服务器端和客户端准备公钥、私钥</span><br><span class=\"line\"># 生成服务器端私钥</span><br><span class=\"line\">openssl genrsa -out server.key 1024</span><br><span class=\"line\"># 生成服务器端公钥</span><br><span class=\"line\">openssl rsa -in server.key -pubout -out server.pem</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># step 2 生成 CA 证书</span><br><span class=\"line\"># 生成客户端私钥</span><br><span class=\"line\">openssl genrsa -out client.key 1024</span><br><span class=\"line\"># 生成客户端公钥</span><br><span class=\"line\">openssl rsa -in client.key -pubout -out client.pem</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成 CA 私钥</span><br><span class=\"line\">openssl genrsa -out ca.key 1024</span><br><span class=\"line\"># X.509 Certificate Signing Request (CSR) Management.</span><br><span class=\"line\">openssl req -new -key ca.key -out ca.csr</span><br><span class=\"line\"># X.509 Certificate Data Management.</span><br><span class=\"line\">openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt</span><br><span class=\"line\"></span><br><span class=\"line\"># ➜  keys  openssl req -new -key ca.key -out ca.csr</span><br><span class=\"line\"># You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\"># into your certificate request.</span><br><span class=\"line\"># What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\"># There are quite a few fields but you can leave some blank</span><br><span class=\"line\"># For some fields there will be a default value,</span><br><span class=\"line\"># If you enter &apos;.&apos;, the field will be left blank.</span><br><span class=\"line\"># -----</span><br><span class=\"line\"># Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\"># State or Province Name (full name) [Some-State]:Zhejiang</span><br><span class=\"line\"># Locality Name (eg, city) []:Hangzhou</span><br><span class=\"line\"># Organization Name (eg, company) [Internet Widgits Pty Ltd]:My CA</span><br><span class=\"line\"># Organizational Unit Name (eg, section) []:</span><br><span class=\"line\"># Common Name (e.g. server FQDN or YOUR name) []:localhost</span><br><span class=\"line\"># Email Address []:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># step 3 生成服务器端证书和客户端证书</span><br><span class=\"line\"># 服务器端需要向 CA 机构申请签名证书，在申请签名证书之前依然是创建自己的 CSR 文件</span><br><span class=\"line\">openssl req -new -key server.key -out server.csr</span><br><span class=\"line\"># 向自己的 CA 机构申请证书，签名过程需要 CA 的证书和私钥参与，最终颁发一个带有 CA 签名的证书</span><br><span class=\"line\">openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt</span><br><span class=\"line\"></span><br><span class=\"line\"># client 端</span><br><span class=\"line\">openssl req -new -key client.key -out client.csr</span><br><span class=\"line\"># client 端到 CA 签名</span><br><span class=\"line\">openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">获取服务端签名, 即server.crt的内容:</span><br><span class=\"line\">openssl x509 -in &lt;(openssl s_client -showcerts -servername dfdaemon.com -connect dfdaemon.com:65001 -prexit 2&gt;/dev/null)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509部分命令</span><br><span class=\"line\">打印出证书的内容：</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -text</span><br><span class=\"line\">打印出证书的系列号</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -serial</span><br><span class=\"line\">打印出证书的拥有者名字</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -subject</span><br><span class=\"line\">以RFC2253规定的格式打印出证书的拥有者名字</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -subject -nameopt RFC2253</span><br><span class=\"line\">在支持UTF8的终端一行过打印出证书的拥有者名字</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -subject -nameopt oneline -nameopt -escmsb</span><br><span class=\"line\">打印出证书的MD5特征参数</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -fingerprint</span><br><span class=\"line\">打印出证书的SHA特征参数</span><br><span class=\"line\">openssl x509 -sha1 -in cert.pem -noout -fingerprint</span><br><span class=\"line\">把PEM格式的证书转化成DER格式</span><br><span class=\"line\">openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER</span><br><span class=\"line\">把一个证书转化成CSR</span><br><span class=\"line\">openssl x509 -x509toreq -in cert.pem -out req.pem -signkey key.pem</span><br><span class=\"line\">给一个CSR进行处理，颁发字签名证书，增加CA扩展项</span><br><span class=\"line\">openssl x509 -req -in careq.pem -extfile openssl.cnf -extensions v3_ca -signkey key.pem -out cacert.pem</span><br><span class=\"line\">给一个CSR签名，增加用户证书扩展项</span><br><span class=\"line\">openssl x509 -req -in req.pem -extfile openssl.cnf -extensions v3_usr -CA cacert.pem -CAkey key.pem -CAcreateserial</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># step 1 为服务器端和客户端准备公钥、私钥</span><br><span class=\"line\"># 生成服务器端私钥</span><br><span class=\"line\">openssl genrsa -out server.key 1024</span><br><span class=\"line\"># 生成服务器端公钥</span><br><span class=\"line\">openssl rsa -in server.key -pubout -out server.pem</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># step 2 生成 CA 证书</span><br><span class=\"line\"># 生成客户端私钥</span><br><span class=\"line\">openssl genrsa -out client.key 1024</span><br><span class=\"line\"># 生成客户端公钥</span><br><span class=\"line\">openssl rsa -in client.key -pubout -out client.pem</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成 CA 私钥</span><br><span class=\"line\">openssl genrsa -out ca.key 1024</span><br><span class=\"line\"># X.509 Certificate Signing Request (CSR) Management.</span><br><span class=\"line\">openssl req -new -key ca.key -out ca.csr</span><br><span class=\"line\"># X.509 Certificate Data Management.</span><br><span class=\"line\">openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt</span><br><span class=\"line\"></span><br><span class=\"line\"># ➜  keys  openssl req -new -key ca.key -out ca.csr</span><br><span class=\"line\"># You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\"># into your certificate request.</span><br><span class=\"line\"># What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\"># There are quite a few fields but you can leave some blank</span><br><span class=\"line\"># For some fields there will be a default value,</span><br><span class=\"line\"># If you enter &apos;.&apos;, the field will be left blank.</span><br><span class=\"line\"># -----</span><br><span class=\"line\"># Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\"># State or Province Name (full name) [Some-State]:Zhejiang</span><br><span class=\"line\"># Locality Name (eg, city) []:Hangzhou</span><br><span class=\"line\"># Organization Name (eg, company) [Internet Widgits Pty Ltd]:My CA</span><br><span class=\"line\"># Organizational Unit Name (eg, section) []:</span><br><span class=\"line\"># Common Name (e.g. server FQDN or YOUR name) []:localhost</span><br><span class=\"line\"># Email Address []:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># step 3 生成服务器端证书和客户端证书</span><br><span class=\"line\"># 服务器端需要向 CA 机构申请签名证书，在申请签名证书之前依然是创建自己的 CSR 文件</span><br><span class=\"line\">openssl req -new -key server.key -out server.csr</span><br><span class=\"line\"># 向自己的 CA 机构申请证书，签名过程需要 CA 的证书和私钥参与，最终颁发一个带有 CA 签名的证书</span><br><span class=\"line\">openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt</span><br><span class=\"line\"></span><br><span class=\"line\"># client 端</span><br><span class=\"line\">openssl req -new -key client.key -out client.csr</span><br><span class=\"line\"># client 端到 CA 签名</span><br><span class=\"line\">openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">获取服务端签名, 即server.crt的内容:</span><br><span class=\"line\">openssl x509 -in &lt;(openssl s_client -showcerts -servername dfdaemon.com -connect dfdaemon.com:65001 -prexit 2&gt;/dev/null)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509部分命令</span><br><span class=\"line\">打印出证书的内容：</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -text</span><br><span class=\"line\">打印出证书的系列号</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -serial</span><br><span class=\"line\">打印出证书的拥有者名字</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -subject</span><br><span class=\"line\">以RFC2253规定的格式打印出证书的拥有者名字</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -subject -nameopt RFC2253</span><br><span class=\"line\">在支持UTF8的终端一行过打印出证书的拥有者名字</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -subject -nameopt oneline -nameopt -escmsb</span><br><span class=\"line\">打印出证书的MD5特征参数</span><br><span class=\"line\">openssl x509 -in cert.pem -noout -fingerprint</span><br><span class=\"line\">打印出证书的SHA特征参数</span><br><span class=\"line\">openssl x509 -sha1 -in cert.pem -noout -fingerprint</span><br><span class=\"line\">把PEM格式的证书转化成DER格式</span><br><span class=\"line\">openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER</span><br><span class=\"line\">把一个证书转化成CSR</span><br><span class=\"line\">openssl x509 -x509toreq -in cert.pem -out req.pem -signkey key.pem</span><br><span class=\"line\">给一个CSR进行处理，颁发字签名证书，增加CA扩展项</span><br><span class=\"line\">openssl x509 -req -in careq.pem -extfile openssl.cnf -extensions v3_ca -signkey key.pem -out cacert.pem</span><br><span class=\"line\">给一个CSR签名，增加用户证书扩展项</span><br><span class=\"line\">openssl x509 -req -in req.pem -extfile openssl.cnf -extensions v3_usr -CA cacert.pem -CAkey key.pem -CAcreateserial</span><br></pre></td></tr></table></figure>"},{"title":"ansible","date":"2019-04-12T15:44:42.000Z","_content":"\n#install ansible\n```\npython  --version\nPython 2.7.10\nsudo easy_install pip\nsudo pip install ansible\n```\n\ndome :\nhttps://blog.csdn.net/pushiqiang/article/details/78126063\n\n\n```\nansible -i ./hosts local --connection=local -b --become-user=root -m shell -a \"ls\"\n```\n\n```\n-b - “成为”，在运行命令时告诉可以成为另一个用户。\n--become-user=root - 以用户“root”运行以下命令（例如，使用命令使用“sudo”）。我们可以在此定义任何现有的用户。\n-a 用于将任何参数传递给定义的模块 -m\n```\n\n进行免密登陆\n```\nssh-agent\nssh-copy-id root@127.0.0.1\n```","source":"_posts/ansible.md","raw":"---\ntitle: ansible\ndate: 2019-04-12 23:44:42\ntags: [python]\n---\n\n#install ansible\n```\npython  --version\nPython 2.7.10\nsudo easy_install pip\nsudo pip install ansible\n```\n\ndome :\nhttps://blog.csdn.net/pushiqiang/article/details/78126063\n\n\n```\nansible -i ./hosts local --connection=local -b --become-user=root -m shell -a \"ls\"\n```\n\n```\n-b - “成为”，在运行命令时告诉可以成为另一个用户。\n--become-user=root - 以用户“root”运行以下命令（例如，使用命令使用“sudo”）。我们可以在此定义任何现有的用户。\n-a 用于将任何参数传递给定义的模块 -m\n```\n\n进行免密登陆\n```\nssh-agent\nssh-copy-id root@127.0.0.1\n```","slug":"ansible","published":1,"updated":"2019-07-02T12:48:19.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kfz0003gkxr5syjpqi5","content":"<p>#install ansible<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python  --version</span><br><span class=\"line\">Python 2.7.10</span><br><span class=\"line\">sudo easy_install pip</span><br><span class=\"line\">sudo pip install ansible</span><br></pre></td></tr></table></figure></p>\n<p>dome :<br><a href=\"https://blog.csdn.net/pushiqiang/article/details/78126063\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/pushiqiang/article/details/78126063</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible -i ./hosts local --connection=local -b --become-user=root -m shell -a &quot;ls&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-b - “成为”，在运行命令时告诉可以成为另一个用户。</span><br><span class=\"line\">--become-user=root - 以用户“root”运行以下命令（例如，使用命令使用“sudo”）。我们可以在此定义任何现有的用户。</span><br><span class=\"line\">-a 用于将任何参数传递给定义的模块 -m</span><br></pre></td></tr></table></figure>\n<p>进行免密登陆<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent</span><br><span class=\"line\">ssh-copy-id root@127.0.0.1</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>#install ansible<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python  --version</span><br><span class=\"line\">Python 2.7.10</span><br><span class=\"line\">sudo easy_install pip</span><br><span class=\"line\">sudo pip install ansible</span><br></pre></td></tr></table></figure></p>\n<p>dome :<br><a href=\"https://blog.csdn.net/pushiqiang/article/details/78126063\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/pushiqiang/article/details/78126063</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible -i ./hosts local --connection=local -b --become-user=root -m shell -a &quot;ls&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-b - “成为”，在运行命令时告诉可以成为另一个用户。</span><br><span class=\"line\">--become-user=root - 以用户“root”运行以下命令（例如，使用命令使用“sudo”）。我们可以在此定义任何现有的用户。</span><br><span class=\"line\">-a 用于将任何参数传递给定义的模块 -m</span><br></pre></td></tr></table></figure>\n<p>进行免密登陆<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent</span><br><span class=\"line\">ssh-copy-id root@127.0.0.1</span><br></pre></td></tr></table></figure></p>\n"},{"title":"dragonfly_0.4.0","date":"2019-06-29T03:39:35.000Z","_content":"## install https harbor\n\n### 保证docker login xx.xx   login success\n\n## install supernode\n\n--advertiseIp host ip\n```\ndocker run -d --name supernode --restart=always --net host dragonflyoss/supernode:0.3.0 -Dsupernode.advertiseIp=10.0.0.124\n```\n\n## install dfdaemon\n准备工作\n```\nmkdir -p /etc/systemd/system/docker.service.d\ncat <<EOD >/etc/systemd/system/docker.service.d/http-proxy.conf\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:65001\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:65001\"\nEOD\n\nsystemctl daemon-reload\nsystemctl restart docker\n```\n","source":"_posts/dragonfly-0-4-0.md","raw":"---\ntitle: dragonfly_0.4.0\ndate: 2019-06-29 11:39:35\ntags:\n---\n## install https harbor\n\n### 保证docker login xx.xx   login success\n\n## install supernode\n\n--advertiseIp host ip\n```\ndocker run -d --name supernode --restart=always --net host dragonflyoss/supernode:0.3.0 -Dsupernode.advertiseIp=10.0.0.124\n```\n\n## install dfdaemon\n准备工作\n```\nmkdir -p /etc/systemd/system/docker.service.d\ncat <<EOD >/etc/systemd/system/docker.service.d/http-proxy.conf\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:65001\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:65001\"\nEOD\n\nsystemctl daemon-reload\nsystemctl restart docker\n```\n","slug":"dragonfly-0-4-0","published":1,"updated":"2019-07-02T12:53:49.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kg20005gkxrr2i8e78j","content":"<h2 id=\"install-https-harbor\"><a href=\"#install-https-harbor\" class=\"headerlink\" title=\"install https harbor\"></a>install https harbor</h2><h3 id=\"保证docker-login-xx-xx-login-success\"><a href=\"#保证docker-login-xx-xx-login-success\" class=\"headerlink\" title=\"保证docker login xx.xx   login success\"></a>保证docker login xx.xx   login success</h3><h2 id=\"install-supernode\"><a href=\"#install-supernode\" class=\"headerlink\" title=\"install supernode\"></a>install supernode</h2><p>–advertiseIp host ip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name supernode --restart=always --net host dragonflyoss/supernode:0.3.0 -Dsupernode.advertiseIp=10.0.0.124</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"install-dfdaemon\"><a href=\"#install-dfdaemon\" class=\"headerlink\" title=\"install dfdaemon\"></a>install dfdaemon</h2><p>准备工作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class=\"line\">cat &lt;&lt;EOD &gt;/etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=&quot;HTTP_PROXY=http://127.0.0.1:65001&quot;</span><br><span class=\"line\">Environment=&quot;HTTPS_PROXY=http://127.0.0.1:65001&quot;</span><br><span class=\"line\">EOD</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"install-https-harbor\"><a href=\"#install-https-harbor\" class=\"headerlink\" title=\"install https harbor\"></a>install https harbor</h2><h3 id=\"保证docker-login-xx-xx-login-success\"><a href=\"#保证docker-login-xx-xx-login-success\" class=\"headerlink\" title=\"保证docker login xx.xx   login success\"></a>保证docker login xx.xx   login success</h3><h2 id=\"install-supernode\"><a href=\"#install-supernode\" class=\"headerlink\" title=\"install supernode\"></a>install supernode</h2><p>–advertiseIp host ip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name supernode --restart=always --net host dragonflyoss/supernode:0.3.0 -Dsupernode.advertiseIp=10.0.0.124</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"install-dfdaemon\"><a href=\"#install-dfdaemon\" class=\"headerlink\" title=\"install dfdaemon\"></a>install dfdaemon</h2><p>准备工作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class=\"line\">cat &lt;&lt;EOD &gt;/etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=&quot;HTTP_PROXY=http://127.0.0.1:65001&quot;</span><br><span class=\"line\">Environment=&quot;HTTPS_PROXY=http://127.0.0.1:65001&quot;</span><br><span class=\"line\">EOD</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure></p>\n"},{"title":"go-mod","date":"2019-03-12T01:29:24.000Z","_content":"\nhttps://ieevee.com/tech/2019/02/19/go-mod-proxy.html\n\nhttps://medium.com/@diogok/on-golang-static-binaries-cross-compiling-and-plugins-1aed33499671\n\n\n```\nGO111MODULE=on go mod init\nGOPROXY=https://gocenter.io  GO111MODULE=on go mod vendor\n\n\nhttps://goproxy.io\n在当前项目下，手动运行go mod tidy\n这条命令会自动更新依赖关系，并且将包下载放入cache。在GOPATH/pkg/mod/下。\nGOPROXY=https://gocenter.io  GO111MODULE=on go mod tidy\n```\n\ndocker run -d -p 14000:14000 -p 15002:15002 -p 15001:15001 -p 15003:15003 -p 15004:15004 -p 15000:15000 -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/origin/development.yaml:/etc/kraken/config/origin/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/tracker/development.yaml:/etc/kraken/config/tracker/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/build-index/development.yaml:/etc/kraken/config/build-index/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/proxy/development.yaml:/etc/kraken/config/proxy/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/herd_param.sh:/etc/kraken/herd_param.sh -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/herd_start_processes.sh:/etc/kraken/herd_start_processes.sh --name kraken-herd kraken-herd:v0.1.0-25-ga61fa4f ./herd_start_processes.sh\n\n\n\n\n","source":"_posts/go-mod.md","raw":"---\ntitle: go-mod\ndate: 2019-03-12 09:29:24\ntags: [golang]\n---\n\nhttps://ieevee.com/tech/2019/02/19/go-mod-proxy.html\n\nhttps://medium.com/@diogok/on-golang-static-binaries-cross-compiling-and-plugins-1aed33499671\n\n\n```\nGO111MODULE=on go mod init\nGOPROXY=https://gocenter.io  GO111MODULE=on go mod vendor\n\n\nhttps://goproxy.io\n在当前项目下，手动运行go mod tidy\n这条命令会自动更新依赖关系，并且将包下载放入cache。在GOPATH/pkg/mod/下。\nGOPROXY=https://gocenter.io  GO111MODULE=on go mod tidy\n```\n\ndocker run -d -p 14000:14000 -p 15002:15002 -p 15001:15001 -p 15003:15003 -p 15004:15004 -p 15000:15000 -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/origin/development.yaml:/etc/kraken/config/origin/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/tracker/development.yaml:/etc/kraken/config/tracker/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/build-index/development.yaml:/etc/kraken/config/build-index/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/proxy/development.yaml:/etc/kraken/config/proxy/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/herd_param.sh:/etc/kraken/herd_param.sh -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/herd_start_processes.sh:/etc/kraken/herd_start_processes.sh --name kraken-herd kraken-herd:v0.1.0-25-ga61fa4f ./herd_start_processes.sh\n\n\n\n\n","slug":"go-mod","published":1,"updated":"2019-07-02T13:19:11.219Z","_id":"cjxlu2kg50008gkxr9mipx8t7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://ieevee.com/tech/2019/02/19/go-mod-proxy.html\" target=\"_blank\" rel=\"noopener\">https://ieevee.com/tech/2019/02/19/go-mod-proxy.html</a></p>\n<p><a href=\"https://medium.com/@diogok/on-golang-static-binaries-cross-compiling-and-plugins-1aed33499671\" target=\"_blank\" rel=\"noopener\">https://medium.com/@diogok/on-golang-static-binaries-cross-compiling-and-plugins-1aed33499671</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GO111MODULE=on go mod init</span><br><span class=\"line\">GOPROXY=https://gocenter.io  GO111MODULE=on go mod vendor</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">https://goproxy.io</span><br><span class=\"line\">在当前项目下，手动运行go mod tidy</span><br><span class=\"line\">这条命令会自动更新依赖关系，并且将包下载放入cache。在GOPATH/pkg/mod/下。</span><br><span class=\"line\">GOPROXY=https://gocenter.io  GO111MODULE=on go mod tidy</span><br></pre></td></tr></table></figure>\n<p>docker run -d -p 14000:14000 -p 15002:15002 -p 15001:15001 -p 15003:15003 -p 15004:15004 -p 15000:15000 -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/origin/development.yaml:/etc/kraken/config/origin/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/tracker/development.yaml:/etc/kraken/config/tracker/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/build-index/development.yaml:/etc/kraken/config/build-index/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/proxy/development.yaml:/etc/kraken/config/proxy/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/herd_param.sh:/etc/kraken/herd_param.sh -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/herd_start_processes.sh:/etc/kraken/herd_start_processes.sh –name kraken-herd kraken-herd:v0.1.0-25-ga61fa4f ./herd_start_processes.sh</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p><a href=\"https://ieevee.com/tech/2019/02/19/go-mod-proxy.html\" target=\"_blank\" rel=\"noopener\">https://ieevee.com/tech/2019/02/19/go-mod-proxy.html</a></p>\n<p><a href=\"https://medium.com/@diogok/on-golang-static-binaries-cross-compiling-and-plugins-1aed33499671\" target=\"_blank\" rel=\"noopener\">https://medium.com/@diogok/on-golang-static-binaries-cross-compiling-and-plugins-1aed33499671</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GO111MODULE=on go mod init</span><br><span class=\"line\">GOPROXY=https://gocenter.io  GO111MODULE=on go mod vendor</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">https://goproxy.io</span><br><span class=\"line\">在当前项目下，手动运行go mod tidy</span><br><span class=\"line\">这条命令会自动更新依赖关系，并且将包下载放入cache。在GOPATH/pkg/mod/下。</span><br><span class=\"line\">GOPROXY=https://gocenter.io  GO111MODULE=on go mod tidy</span><br></pre></td></tr></table></figure>\n<p>docker run -d -p 14000:14000 -p 15002:15002 -p 15001:15001 -p 15003:15003 -p 15004:15004 -p 15000:15000 -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/origin/development.yaml:/etc/kraken/config/origin/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/tracker/development.yaml:/etc/kraken/config/tracker/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/build-index/development.yaml:/etc/kraken/config/build-index/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/config/proxy/development.yaml:/etc/kraken/config/proxy/development.yaml -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/herd_param.sh:/etc/kraken/herd_param.sh -v /Users/wupeng/go/src/github.com/uber/kraken/examples/devcluster/herd_start_processes.sh:/etc/kraken/herd_start_processes.sh –name kraken-herd kraken-herd:v0.1.0-25-ga61fa4f ./herd_start_processes.sh</p>\n"},{"title":"容器化日志收集方案-EFK","date":"2019-02-26T04:12:53.000Z","_content":"本文将描述如何使用\nelasticsearch、\nfluentd 、\nkibana构建容器化日志收集系统\n\n### 介绍：\n\n###### elasticsearch：\n\n- 一个分布式的实时文档存储，每个字段 可以被索引与搜索\n\n- 一个分布式实时分析搜索引擎\n\n- 能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据\n\n  \n\n###### fluentd:\n是日志收集系统，通过丰富的插件，可以收集来自于各种系统或应用的日志，然后根据用户定义将日志做分类处理。 \n\n###### kibana:\n是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。 \n\n\n###### Kafka:\n是分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计\n\nKafka将消息以topic为单位进行归纳。\n将向Kafka topic发布消息的程序成为producers.\n将预订topics并消费消息的程序成为consumer.\n\n\n## 如何安装\n- ##### 安装kafka+zookeeper\n\n参考：https://hub.docker.com/r/wurstmeister/kafka/\n\n-  ##### 安装elasticsearch+kibana:\n\n```cmd\ndocker run -d -v \"$PWD/esdata\":/usr/share/elasticsearch/data -p 9200:9200  elasticsearch\ndocker run --name kibana -e ELASTICSEARCH_URL=http://127.0.0.1:9200 -p 5601:5601 -d kibana\n```\n\n- ##### 安装fluentd\n\n###### 1、自定义fluentd的Dockerfile\n\n```\nFROM fluent/fluentd:v1.2\n\n# below RUN includes plugin as examples elasticsearch is not required\n# you may customize including plugins as you wish\n\nRUN apk add --update --virtual .build-deps \\\n                                sudo \\\n                                build-base \\\n                                ruby-dev \\\n                                tzdata \\\n    && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\\n    && sudo gem install fluent-plugin-elasticsearch \\\n    && sudo gem install fluent-plugin-kafka \\\n    && sudo gem sources --clear-all \\\n    && apk del .build-deps \\\n    && rm -rf /var/cache/apk/* \\\n              /home/fluent/.gem/ruby/2.3.0/cache/*.gem\n\nENTRYPOINT [\"fluentd\", \"-c\", \"/fluentd/etc/fluent.conf\", \"-p\", \"/fluentd/plugins\"]\n```\n\n###### 2、编写fluent.conf\n\n```\n<system>\n  rpc_endpoint 127.0.0.1:24444\n</system>\n<source>\n\t@type forward\n\t@id forward_input\n</source>\n\n<source>\n\t\t@type    tail  #### tail方式采集日志\n\t\t#format   none\n\t\tformat   /^(?<all>.*)$/\n\t\tpath     /log/log.txt\n\t\tpos_file /log/pos_file/httpd-access.log.pos\n\t\ttag      log.tag\n</source>\n\n<match log.**>\n       @type copy\n       <store>\n        @type elasticsearch\n        hosts localhost:9200\n        type_name elasticsearch_fluentd\n        include_tag_key true\n        tag_key log_name\n        flush_interval 10s # for testing\n        logstash_format true\n        logstash_prefix logstash\n       </store>\n       <store>\n         @type     kafka\n\t\tbrokers              localhost:9092\n\t\t#zookeeper           localhost:2181\n\t\tdefault_topic       fluent_kafka\n\t\t#刷新间隔\n\t\tflush_interval      30\n\t\tack_timeout      2000\n\t\toutput_data_type    attr:all\n       </store>\n\n</match>\n\n<source>\n\t@type monitor_agent\n\t@id monitor_agent_input\n\tport 24220\n</source>\n\n<match debug.**>\n\t@type stdout\n</match>\n\n\n```\n###### 3、构建fluentd image:\n\n```\ndocker build -t fluentd:test -f Dockerfile .\n```\n\n###### 4、启动fluentd\n\n```\ndocker run -it --rm --name fluent_test -v $(pwd)/log/:/log/ -v $(pwd)/:/fluentd/etc/ fluentd:test\n```\n\n==说明==\n\n配置fluentd的RPC 为了重新加载fluentd.conf文件\n参考：https://docs.fluentd.org/v1.0/articles/rpc\n\n```\n<system>\n  rpc_endpoint 127.0.0.1:24444\n</system>\n```\n\n### 测试\n\n```\n增加这个文件的日志    echo  test > $(pwd)/log/log.txt\n```\n\n在kibana中进行日志查看：\n\n![image](https://note.youdao.com/yws/api/personal/file/FB957D2F60304CDC9043EFF343CB6B61?method=download&shareKey=a31b0bd854f7e7fad8dd9f952117006f)\n\n修改fluent.conf\n\n```\ntag_key log_name 修改为tag_key log_name_key\n执行curl http://127.0.0.1:24444/api/config.reload\n```\n\n即可以重新加载fluent.conf配置文件，使其生效\n继续向log.txt写入日志\n\n\n\n\n\nfluentd向kafka写入日志\n\n进入kafka的container中\n\n执行\n\n```\nbin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic fluent_kafka --from-beginning \n```\n\n\n\n附上kafka基本命令 \n\n```\n创建topic 这里创建的topic为：\nbin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic \n\n查看topic\nking bin/kafka-topics.sh --list --zookeeper zookeeper:2181\n\n挂起生产者：producer\nbin/kafka-console-producer.sh --broker-list localhost:9092 --topic test\n\n挂起之后，就可以输入信息：test\n挂起消费者： consumer:\nbin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning\n\n在consulmer就可以看到生产出来的：test\n```\n\n\n\n至此完成了基本的elk  和fluent+kafka+zookeeper的日志系统\n\n在kubernetes中使用DaemonSet  来获取主机日志或docker container日志\n\n\n\n参考：https://docs.fluentd.org/v1.0/articles/quickstart\n\n​           https://www.elastic.co/products\n\n\n\n\n\n   ","source":"_posts/fluentd.md","raw":"---\ntitle: 容器化日志收集方案-EFK\ndate: 2019-02-26 12:12:53\ntags: [log]\n---\n本文将描述如何使用\nelasticsearch、\nfluentd 、\nkibana构建容器化日志收集系统\n\n### 介绍：\n\n###### elasticsearch：\n\n- 一个分布式的实时文档存储，每个字段 可以被索引与搜索\n\n- 一个分布式实时分析搜索引擎\n\n- 能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据\n\n  \n\n###### fluentd:\n是日志收集系统，通过丰富的插件，可以收集来自于各种系统或应用的日志，然后根据用户定义将日志做分类处理。 \n\n###### kibana:\n是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。 \n\n\n###### Kafka:\n是分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计\n\nKafka将消息以topic为单位进行归纳。\n将向Kafka topic发布消息的程序成为producers.\n将预订topics并消费消息的程序成为consumer.\n\n\n## 如何安装\n- ##### 安装kafka+zookeeper\n\n参考：https://hub.docker.com/r/wurstmeister/kafka/\n\n-  ##### 安装elasticsearch+kibana:\n\n```cmd\ndocker run -d -v \"$PWD/esdata\":/usr/share/elasticsearch/data -p 9200:9200  elasticsearch\ndocker run --name kibana -e ELASTICSEARCH_URL=http://127.0.0.1:9200 -p 5601:5601 -d kibana\n```\n\n- ##### 安装fluentd\n\n###### 1、自定义fluentd的Dockerfile\n\n```\nFROM fluent/fluentd:v1.2\n\n# below RUN includes plugin as examples elasticsearch is not required\n# you may customize including plugins as you wish\n\nRUN apk add --update --virtual .build-deps \\\n                                sudo \\\n                                build-base \\\n                                ruby-dev \\\n                                tzdata \\\n    && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\\n    && sudo gem install fluent-plugin-elasticsearch \\\n    && sudo gem install fluent-plugin-kafka \\\n    && sudo gem sources --clear-all \\\n    && apk del .build-deps \\\n    && rm -rf /var/cache/apk/* \\\n              /home/fluent/.gem/ruby/2.3.0/cache/*.gem\n\nENTRYPOINT [\"fluentd\", \"-c\", \"/fluentd/etc/fluent.conf\", \"-p\", \"/fluentd/plugins\"]\n```\n\n###### 2、编写fluent.conf\n\n```\n<system>\n  rpc_endpoint 127.0.0.1:24444\n</system>\n<source>\n\t@type forward\n\t@id forward_input\n</source>\n\n<source>\n\t\t@type    tail  #### tail方式采集日志\n\t\t#format   none\n\t\tformat   /^(?<all>.*)$/\n\t\tpath     /log/log.txt\n\t\tpos_file /log/pos_file/httpd-access.log.pos\n\t\ttag      log.tag\n</source>\n\n<match log.**>\n       @type copy\n       <store>\n        @type elasticsearch\n        hosts localhost:9200\n        type_name elasticsearch_fluentd\n        include_tag_key true\n        tag_key log_name\n        flush_interval 10s # for testing\n        logstash_format true\n        logstash_prefix logstash\n       </store>\n       <store>\n         @type     kafka\n\t\tbrokers              localhost:9092\n\t\t#zookeeper           localhost:2181\n\t\tdefault_topic       fluent_kafka\n\t\t#刷新间隔\n\t\tflush_interval      30\n\t\tack_timeout      2000\n\t\toutput_data_type    attr:all\n       </store>\n\n</match>\n\n<source>\n\t@type monitor_agent\n\t@id monitor_agent_input\n\tport 24220\n</source>\n\n<match debug.**>\n\t@type stdout\n</match>\n\n\n```\n###### 3、构建fluentd image:\n\n```\ndocker build -t fluentd:test -f Dockerfile .\n```\n\n###### 4、启动fluentd\n\n```\ndocker run -it --rm --name fluent_test -v $(pwd)/log/:/log/ -v $(pwd)/:/fluentd/etc/ fluentd:test\n```\n\n==说明==\n\n配置fluentd的RPC 为了重新加载fluentd.conf文件\n参考：https://docs.fluentd.org/v1.0/articles/rpc\n\n```\n<system>\n  rpc_endpoint 127.0.0.1:24444\n</system>\n```\n\n### 测试\n\n```\n增加这个文件的日志    echo  test > $(pwd)/log/log.txt\n```\n\n在kibana中进行日志查看：\n\n![image](https://note.youdao.com/yws/api/personal/file/FB957D2F60304CDC9043EFF343CB6B61?method=download&shareKey=a31b0bd854f7e7fad8dd9f952117006f)\n\n修改fluent.conf\n\n```\ntag_key log_name 修改为tag_key log_name_key\n执行curl http://127.0.0.1:24444/api/config.reload\n```\n\n即可以重新加载fluent.conf配置文件，使其生效\n继续向log.txt写入日志\n\n\n\n\n\nfluentd向kafka写入日志\n\n进入kafka的container中\n\n执行\n\n```\nbin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic fluent_kafka --from-beginning \n```\n\n\n\n附上kafka基本命令 \n\n```\n创建topic 这里创建的topic为：\nbin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic \n\n查看topic\nking bin/kafka-topics.sh --list --zookeeper zookeeper:2181\n\n挂起生产者：producer\nbin/kafka-console-producer.sh --broker-list localhost:9092 --topic test\n\n挂起之后，就可以输入信息：test\n挂起消费者： consumer:\nbin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning\n\n在consulmer就可以看到生产出来的：test\n```\n\n\n\n至此完成了基本的elk  和fluent+kafka+zookeeper的日志系统\n\n在kubernetes中使用DaemonSet  来获取主机日志或docker container日志\n\n\n\n参考：https://docs.fluentd.org/v1.0/articles/quickstart\n\n​           https://www.elastic.co/products\n\n\n\n\n\n   ","slug":"fluentd","published":1,"updated":"2019-07-02T13:19:11.209Z","_id":"cjxlu2kg7000agkxr6mvhlplp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文将描述如何使用<br>elasticsearch、<br>fluentd 、<br>kibana构建容器化日志收集系统</p>\n<h3 id=\"介绍：\"><a href=\"#介绍：\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h3><h6 id=\"elasticsearch：\"><a href=\"#elasticsearch：\" class=\"headerlink\" title=\"elasticsearch：\"></a>elasticsearch：</h6><ul>\n<li><p>一个分布式的实时文档存储，每个字段 可以被索引与搜索</p>\n</li>\n<li><p>一个分布式实时分析搜索引擎</p>\n</li>\n<li><p>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</p>\n</li>\n</ul>\n<h6 id=\"fluentd\"><a href=\"#fluentd\" class=\"headerlink\" title=\"fluentd:\"></a>fluentd:</h6><p>是日志收集系统，通过丰富的插件，可以收集来自于各种系统或应用的日志，然后根据用户定义将日志做分类处理。 </p>\n<h6 id=\"kibana\"><a href=\"#kibana\" class=\"headerlink\" title=\"kibana:\"></a>kibana:</h6><p>是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。 </p>\n<h6 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka:\"></a>Kafka:</h6><p>是分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计</p>\n<p>Kafka将消息以topic为单位进行归纳。<br>将向Kafka topic发布消息的程序成为producers.<br>将预订topics并消费消息的程序成为consumer.</p>\n<h2 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h2><ul>\n<li><h5 id=\"安装kafka-zookeeper\"><a href=\"#安装kafka-zookeeper\" class=\"headerlink\" title=\"安装kafka+zookeeper\"></a>安装kafka+zookeeper</h5></li>\n</ul>\n<p>参考：<a href=\"https://hub.docker.com/r/wurstmeister/kafka/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/wurstmeister/kafka/</a></p>\n<ul>\n<li><h5 id=\"安装elasticsearch-kibana\"><a href=\"#安装elasticsearch-kibana\" class=\"headerlink\" title=\"安装elasticsearch+kibana:\"></a>安装elasticsearch+kibana:</h5></li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v \"$PWD/esdata\":/usr/share/elasticsearch/data -p <span class=\"number\">9200</span>:<span class=\"number\">9200</span>  elasticsearch</span><br><span class=\"line\">docker run --name kibana -e ELASTICSEARCH_URL=http://<span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">9200</span> -p <span class=\"number\">5601</span>:<span class=\"number\">5601</span> -d kibana</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"安装fluentd\"><a href=\"#安装fluentd\" class=\"headerlink\" title=\"安装fluentd\"></a>安装fluentd</h5></li>\n</ul>\n<h6 id=\"1、自定义fluentd的Dockerfile\"><a href=\"#1、自定义fluentd的Dockerfile\" class=\"headerlink\" title=\"1、自定义fluentd的Dockerfile\"></a>1、自定义fluentd的Dockerfile</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM fluent/fluentd:v1.2</span><br><span class=\"line\"></span><br><span class=\"line\"># below RUN includes plugin as examples elasticsearch is not required</span><br><span class=\"line\"># you may customize including plugins as you wish</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apk add --update --virtual .build-deps \\</span><br><span class=\"line\">                                sudo \\</span><br><span class=\"line\">                                build-base \\</span><br><span class=\"line\">                                ruby-dev \\</span><br><span class=\"line\">                                tzdata \\</span><br><span class=\"line\">    &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\</span><br><span class=\"line\">    &amp;&amp; sudo gem install fluent-plugin-elasticsearch \\</span><br><span class=\"line\">    &amp;&amp; sudo gem install fluent-plugin-kafka \\</span><br><span class=\"line\">    &amp;&amp; sudo gem sources --clear-all \\</span><br><span class=\"line\">    &amp;&amp; apk del .build-deps \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/cache/apk/* \\</span><br><span class=\"line\">              /home/fluent/.gem/ruby/2.3.0/cache/*.gem</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;fluentd&quot;, &quot;-c&quot;, &quot;/fluentd/etc/fluent.conf&quot;, &quot;-p&quot;, &quot;/fluentd/plugins&quot;]</span><br></pre></td></tr></table></figure>\n<h6 id=\"2、编写fluent-conf\"><a href=\"#2、编写fluent-conf\" class=\"headerlink\" title=\"2、编写fluent.conf\"></a>2、编写fluent.conf</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;system&gt;</span><br><span class=\"line\">  rpc_endpoint 127.0.0.1:24444</span><br><span class=\"line\">&lt;/system&gt;</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">\t@type forward</span><br><span class=\"line\">\t@id forward_input</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">\t\t@type    tail  #### tail方式采集日志</span><br><span class=\"line\">\t\t#format   none</span><br><span class=\"line\">\t\tformat   /^(?&lt;all&gt;.*)$/</span><br><span class=\"line\">\t\tpath     /log/log.txt</span><br><span class=\"line\">\t\tpos_file /log/pos_file/httpd-access.log.pos</span><br><span class=\"line\">\t\ttag      log.tag</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match log.**&gt;</span><br><span class=\"line\">       @type copy</span><br><span class=\"line\">       &lt;store&gt;</span><br><span class=\"line\">        @type elasticsearch</span><br><span class=\"line\">        hosts localhost:9200</span><br><span class=\"line\">        type_name elasticsearch_fluentd</span><br><span class=\"line\">        include_tag_key true</span><br><span class=\"line\">        tag_key log_name</span><br><span class=\"line\">        flush_interval 10s # for testing</span><br><span class=\"line\">        logstash_format true</span><br><span class=\"line\">        logstash_prefix logstash</span><br><span class=\"line\">       &lt;/store&gt;</span><br><span class=\"line\">       &lt;store&gt;</span><br><span class=\"line\">         @type     kafka</span><br><span class=\"line\">\t\tbrokers              localhost:9092</span><br><span class=\"line\">\t\t#zookeeper           localhost:2181</span><br><span class=\"line\">\t\tdefault_topic       fluent_kafka</span><br><span class=\"line\">\t\t#刷新间隔</span><br><span class=\"line\">\t\tflush_interval      30</span><br><span class=\"line\">\t\tack_timeout      2000</span><br><span class=\"line\">\t\toutput_data_type    attr:all</span><br><span class=\"line\">       &lt;/store&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">\t@type monitor_agent</span><br><span class=\"line\">\t@id monitor_agent_input</span><br><span class=\"line\">\tport 24220</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match debug.**&gt;</span><br><span class=\"line\">\t@type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3、构建fluentd-image\"><a href=\"#3、构建fluentd-image\" class=\"headerlink\" title=\"3、构建fluentd image:\"></a>3、构建fluentd image:</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t fluentd:test -f Dockerfile .</span><br></pre></td></tr></table></figure>\n<h6 id=\"4、启动fluentd\"><a href=\"#4、启动fluentd\" class=\"headerlink\" title=\"4、启动fluentd\"></a>4、启动fluentd</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm --name fluent_test -v $(pwd)/log/:/log/ -v $(pwd)/:/fluentd/etc/ fluentd:test</span><br></pre></td></tr></table></figure>\n<p>==说明==</p>\n<p>配置fluentd的RPC 为了重新加载fluentd.conf文件<br>参考：<a href=\"https://docs.fluentd.org/v1.0/articles/rpc\" target=\"_blank\" rel=\"noopener\">https://docs.fluentd.org/v1.0/articles/rpc</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;system&gt;</span><br><span class=\"line\">  rpc_endpoint 127.0.0.1:24444</span><br><span class=\"line\">&lt;/system&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增加这个文件的日志    echo  test &gt; $(pwd)/log/log.txt</span><br></pre></td></tr></table></figure>\n<p>在kibana中进行日志查看：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/FB957D2F60304CDC9043EFF343CB6B61?method=download&amp;shareKey=a31b0bd854f7e7fad8dd9f952117006f\" alt=\"image\"></p>\n<p>修改fluent.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag_key log_name 修改为tag_key log_name_key</span><br><span class=\"line\">执行curl http://127.0.0.1:24444/api/config.reload</span><br></pre></td></tr></table></figure>\n<p>即可以重新加载fluent.conf配置文件，使其生效<br>继续向log.txt写入日志</p>\n<p>fluentd向kafka写入日志</p>\n<p>进入kafka的container中</p>\n<p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic fluent_kafka --from-beginning</span><br></pre></td></tr></table></figure>\n<p>附上kafka基本命令 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建topic 这里创建的topic为：</span><br><span class=\"line\">bin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic </span><br><span class=\"line\"></span><br><span class=\"line\">查看topic</span><br><span class=\"line\">king bin/kafka-topics.sh --list --zookeeper zookeeper:2181</span><br><span class=\"line\"></span><br><span class=\"line\">挂起生产者：producer</span><br><span class=\"line\">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br><span class=\"line\"></span><br><span class=\"line\">挂起之后，就可以输入信息：test</span><br><span class=\"line\">挂起消费者： consumer:</span><br><span class=\"line\">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</span><br><span class=\"line\"></span><br><span class=\"line\">在consulmer就可以看到生产出来的：test</span><br></pre></td></tr></table></figure>\n<p>至此完成了基本的elk  和fluent+kafka+zookeeper的日志系统</p>\n<p>在kubernetes中使用DaemonSet  来获取主机日志或docker container日志</p>\n<p>参考：<a href=\"https://docs.fluentd.org/v1.0/articles/quickstart\" target=\"_blank\" rel=\"noopener\">https://docs.fluentd.org/v1.0/articles/quickstart</a></p>\n<p>​           <a href=\"https://www.elastic.co/products\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/products</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>本文将描述如何使用<br>elasticsearch、<br>fluentd 、<br>kibana构建容器化日志收集系统</p>\n<h3 id=\"介绍：\"><a href=\"#介绍：\" class=\"headerlink\" title=\"介绍：\"></a>介绍：</h3><h6 id=\"elasticsearch：\"><a href=\"#elasticsearch：\" class=\"headerlink\" title=\"elasticsearch：\"></a>elasticsearch：</h6><ul>\n<li><p>一个分布式的实时文档存储，每个字段 可以被索引与搜索</p>\n</li>\n<li><p>一个分布式实时分析搜索引擎</p>\n</li>\n<li><p>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</p>\n</li>\n</ul>\n<h6 id=\"fluentd\"><a href=\"#fluentd\" class=\"headerlink\" title=\"fluentd:\"></a>fluentd:</h6><p>是日志收集系统，通过丰富的插件，可以收集来自于各种系统或应用的日志，然后根据用户定义将日志做分类处理。 </p>\n<h6 id=\"kibana\"><a href=\"#kibana\" class=\"headerlink\" title=\"kibana:\"></a>kibana:</h6><p>是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。 </p>\n<h6 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka:\"></a>Kafka:</h6><p>是分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计</p>\n<p>Kafka将消息以topic为单位进行归纳。<br>将向Kafka topic发布消息的程序成为producers.<br>将预订topics并消费消息的程序成为consumer.</p>\n<h2 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h2><ul>\n<li><h5 id=\"安装kafka-zookeeper\"><a href=\"#安装kafka-zookeeper\" class=\"headerlink\" title=\"安装kafka+zookeeper\"></a>安装kafka+zookeeper</h5></li>\n</ul>\n<p>参考：<a href=\"https://hub.docker.com/r/wurstmeister/kafka/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/wurstmeister/kafka/</a></p>\n<ul>\n<li><h5 id=\"安装elasticsearch-kibana\"><a href=\"#安装elasticsearch-kibana\" class=\"headerlink\" title=\"安装elasticsearch+kibana:\"></a>安装elasticsearch+kibana:</h5></li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v \"$PWD/esdata\":/usr/share/elasticsearch/data -p <span class=\"number\">9200</span>:<span class=\"number\">9200</span>  elasticsearch</span><br><span class=\"line\">docker run --name kibana -e ELASTICSEARCH_URL=http://<span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">9200</span> -p <span class=\"number\">5601</span>:<span class=\"number\">5601</span> -d kibana</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"安装fluentd\"><a href=\"#安装fluentd\" class=\"headerlink\" title=\"安装fluentd\"></a>安装fluentd</h5></li>\n</ul>\n<h6 id=\"1、自定义fluentd的Dockerfile\"><a href=\"#1、自定义fluentd的Dockerfile\" class=\"headerlink\" title=\"1、自定义fluentd的Dockerfile\"></a>1、自定义fluentd的Dockerfile</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM fluent/fluentd:v1.2</span><br><span class=\"line\"></span><br><span class=\"line\"># below RUN includes plugin as examples elasticsearch is not required</span><br><span class=\"line\"># you may customize including plugins as you wish</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apk add --update --virtual .build-deps \\</span><br><span class=\"line\">                                sudo \\</span><br><span class=\"line\">                                build-base \\</span><br><span class=\"line\">                                ruby-dev \\</span><br><span class=\"line\">                                tzdata \\</span><br><span class=\"line\">    &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\</span><br><span class=\"line\">    &amp;&amp; sudo gem install fluent-plugin-elasticsearch \\</span><br><span class=\"line\">    &amp;&amp; sudo gem install fluent-plugin-kafka \\</span><br><span class=\"line\">    &amp;&amp; sudo gem sources --clear-all \\</span><br><span class=\"line\">    &amp;&amp; apk del .build-deps \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/cache/apk/* \\</span><br><span class=\"line\">              /home/fluent/.gem/ruby/2.3.0/cache/*.gem</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [&quot;fluentd&quot;, &quot;-c&quot;, &quot;/fluentd/etc/fluent.conf&quot;, &quot;-p&quot;, &quot;/fluentd/plugins&quot;]</span><br></pre></td></tr></table></figure>\n<h6 id=\"2、编写fluent-conf\"><a href=\"#2、编写fluent-conf\" class=\"headerlink\" title=\"2、编写fluent.conf\"></a>2、编写fluent.conf</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;system&gt;</span><br><span class=\"line\">  rpc_endpoint 127.0.0.1:24444</span><br><span class=\"line\">&lt;/system&gt;</span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">\t@type forward</span><br><span class=\"line\">\t@id forward_input</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">\t\t@type    tail  #### tail方式采集日志</span><br><span class=\"line\">\t\t#format   none</span><br><span class=\"line\">\t\tformat   /^(?&lt;all&gt;.*)$/</span><br><span class=\"line\">\t\tpath     /log/log.txt</span><br><span class=\"line\">\t\tpos_file /log/pos_file/httpd-access.log.pos</span><br><span class=\"line\">\t\ttag      log.tag</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match log.**&gt;</span><br><span class=\"line\">       @type copy</span><br><span class=\"line\">       &lt;store&gt;</span><br><span class=\"line\">        @type elasticsearch</span><br><span class=\"line\">        hosts localhost:9200</span><br><span class=\"line\">        type_name elasticsearch_fluentd</span><br><span class=\"line\">        include_tag_key true</span><br><span class=\"line\">        tag_key log_name</span><br><span class=\"line\">        flush_interval 10s # for testing</span><br><span class=\"line\">        logstash_format true</span><br><span class=\"line\">        logstash_prefix logstash</span><br><span class=\"line\">       &lt;/store&gt;</span><br><span class=\"line\">       &lt;store&gt;</span><br><span class=\"line\">         @type     kafka</span><br><span class=\"line\">\t\tbrokers              localhost:9092</span><br><span class=\"line\">\t\t#zookeeper           localhost:2181</span><br><span class=\"line\">\t\tdefault_topic       fluent_kafka</span><br><span class=\"line\">\t\t#刷新间隔</span><br><span class=\"line\">\t\tflush_interval      30</span><br><span class=\"line\">\t\tack_timeout      2000</span><br><span class=\"line\">\t\toutput_data_type    attr:all</span><br><span class=\"line\">       &lt;/store&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/match&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;source&gt;</span><br><span class=\"line\">\t@type monitor_agent</span><br><span class=\"line\">\t@id monitor_agent_input</span><br><span class=\"line\">\tport 24220</span><br><span class=\"line\">&lt;/source&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;match debug.**&gt;</span><br><span class=\"line\">\t@type stdout</span><br><span class=\"line\">&lt;/match&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3、构建fluentd-image\"><a href=\"#3、构建fluentd-image\" class=\"headerlink\" title=\"3、构建fluentd image:\"></a>3、构建fluentd image:</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t fluentd:test -f Dockerfile .</span><br></pre></td></tr></table></figure>\n<h6 id=\"4、启动fluentd\"><a href=\"#4、启动fluentd\" class=\"headerlink\" title=\"4、启动fluentd\"></a>4、启动fluentd</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --rm --name fluent_test -v $(pwd)/log/:/log/ -v $(pwd)/:/fluentd/etc/ fluentd:test</span><br></pre></td></tr></table></figure>\n<p>==说明==</p>\n<p>配置fluentd的RPC 为了重新加载fluentd.conf文件<br>参考：<a href=\"https://docs.fluentd.org/v1.0/articles/rpc\" target=\"_blank\" rel=\"noopener\">https://docs.fluentd.org/v1.0/articles/rpc</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;system&gt;</span><br><span class=\"line\">  rpc_endpoint 127.0.0.1:24444</span><br><span class=\"line\">&lt;/system&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增加这个文件的日志    echo  test &gt; $(pwd)/log/log.txt</span><br></pre></td></tr></table></figure>\n<p>在kibana中进行日志查看：</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/FB957D2F60304CDC9043EFF343CB6B61?method=download&amp;shareKey=a31b0bd854f7e7fad8dd9f952117006f\" alt=\"image\"></p>\n<p>修改fluent.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag_key log_name 修改为tag_key log_name_key</span><br><span class=\"line\">执行curl http://127.0.0.1:24444/api/config.reload</span><br></pre></td></tr></table></figure>\n<p>即可以重新加载fluent.conf配置文件，使其生效<br>继续向log.txt写入日志</p>\n<p>fluentd向kafka写入日志</p>\n<p>进入kafka的container中</p>\n<p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic fluent_kafka --from-beginning</span><br></pre></td></tr></table></figure>\n<p>附上kafka基本命令 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建topic 这里创建的topic为：</span><br><span class=\"line\">bin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic </span><br><span class=\"line\"></span><br><span class=\"line\">查看topic</span><br><span class=\"line\">king bin/kafka-topics.sh --list --zookeeper zookeeper:2181</span><br><span class=\"line\"></span><br><span class=\"line\">挂起生产者：producer</span><br><span class=\"line\">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br><span class=\"line\"></span><br><span class=\"line\">挂起之后，就可以输入信息：test</span><br><span class=\"line\">挂起消费者： consumer:</span><br><span class=\"line\">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</span><br><span class=\"line\"></span><br><span class=\"line\">在consulmer就可以看到生产出来的：test</span><br></pre></td></tr></table></figure>\n<p>至此完成了基本的elk  和fluent+kafka+zookeeper的日志系统</p>\n<p>在kubernetes中使用DaemonSet  来获取主机日志或docker container日志</p>\n<p>参考：<a href=\"https://docs.fluentd.org/v1.0/articles/quickstart\" target=\"_blank\" rel=\"noopener\">https://docs.fluentd.org/v1.0/articles/quickstart</a></p>\n<p>​           <a href=\"https://www.elastic.co/products\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/products</a></p>\n"},{"title":"Use Hexo","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Use Hexo\ntags: [hexo]\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-02-24T09:50:38.049Z","updated":"2019-02-25T02:34:01.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kg8000cgkxrk9mglzdw","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"golang相关资料","date":"2019-06-28T06:47:23.000Z","_content":"","source":"_posts/golang.md","raw":"---\ntitle: golang相关资料\ndate: 2019-06-28 14:47:23\ntags: [golang]\n---\n","slug":"golang","published":1,"updated":"2019-07-02T13:19:11.247Z","_id":"cjxlu2kga000ggkxr5hg84yzl","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"dragonfly 之 p2p 镜像分发","date":"2019-02-26T01:07:21.000Z","_content":"支持https harbor，公有或私有仓库\n支持push image \n\n### 什么是dragonfly\n Dragonfly 是一款基于 P2P 的智能镜像和文件分发工具。它旨在提高文件传输的效率和速率，最大限度地利用网络带宽，尤其是在分发大量数据时，例如应用分发、缓存分发、日志分发和镜像分发。\n\n在阿里巴巴，Dragonfly 每个月会被调用 20 亿次，分发的数据量高达 3.4PB。Dragonfly 已成为阿里巴巴基础设施中的重要一环。\n\n尽管容器技术大部分时候简化了运维工作，但是它也带来了一些挑战：例如镜像分发的效率问题，尤其是必须在多个主机上复制镜像分发时。\n\nDragonfly 在这种场景下能够完美支持 Docker 和 PouchContainer。它也兼容其他格式的容器。相比原生方式，它能将容器分发速度提高 57 倍，并让 Registry 网络出口流量降低 99.5%。\n\nDragonfly 能让所有类型的文件、镜像或数据分发变得简单而经济。\n### Dragonfly 有何优势（具备以下特性）？\n- 基于 P2P 的文件分发：通过利用 P2P 技术进行文件传输，它能最大限度地利用每个对等节点（Peer）的带宽资源，以提高下载效率，并节省大量跨机房带宽，尤其是昂贵的跨境带宽。\n- 非侵入式支持所有类型的容器技术：Dragonfly 可无缝支持多种容器用于分发镜像。\n- 机器级别的限速：除了像许多其他下载工具（例如 wget 和 curl）那样的针对当前下载任务的限速之外，Dragonfly 还支持针对整个机器的限速。\n- 被动式 CDN：这种 CDN 机制可防止重复远程下载。\n- 高度一致性：Dragonfly 可确保所有下载的文件是一致的，即使用户不提供任何检查代码（MD5）。\n- 磁盘保护和高效 IO：预检磁盘空间、延迟同步、以最佳顺序写文件分块、隔离网络-读/磁盘-写等等。\n- 高性能：SuperNode 是完全闭环的，意味着它不依赖任何数据库或分布式缓存，能够以极高性能处理请求。\n- 自动隔离异常：Dragonfly 会自动隔离异常节点（对等节点或 SuperNode）来提高下载稳定性。\n- 对文件源无压力：一般只有少数几个 SuperNode 会从源下载文件。\n- 支持标准 HTTP 头文件：支持通过 HTTP 头文件提交鉴权信息。\n- 有效的 Registry 鉴权并发控制：减少对 Registry 鉴权服务的压力。\n- 简单易用：仅需极少的配置。\n \n### dragonfly原理\nDragonfly 下载普通文件和下载容器镜像的工作原理略有不同。\n\n##### 下载普通文件\nSuperNode 充当 CDN，并负责调度对等节点（Peer）之间的文件分块传输。dfget 是 P2P 客户端，也称为“Peer”（对等节点），主要用于下载和共享文件分块。\n\n![image](https://d7y.io/docs/zh-cn/img/dfget.png)\n\n#### 下载镜像文件\nRegistry 类似于文件服务器。dfget proxy 也称为 dfdaemon，会拦截来自 docker pull 或 docker push 的 HTTP 请求，然后使用 dfget 来处理那些跟镜像分层相关的请求。\n\n![image](https://d7y.io/docs/zh-cn/img/dfget-combine-container.png)\n\n#### 下载文件分块\n每个文件会被分成多个分块，并在对等节点之间传输。一个对等节点就是一个 P2P 客户端。SuperNode 会判断本地是否存在对应的文件。如果不存在，则会将其从文件服务器下载到 SuperNode。\n\n![image](https://d7y.io/docs/zh-cn/img/distributing.png)\n \n### dragonfly部署（参考dragonfly官网）\n\nhttps://d7y.io/zh-cn/\n\n### dragonfly https的harbor \n\ndragonfly 常见问题\n\nhttps://github.com/dragonflyoss/Dragonfly/blob/master/FAQ.md\n\n目的：启用 docker PROXY  让dragonfly 支持https \n#### 1、部署https harbor\n\nhttps://github.com/goharbor/harbor/blob/master/docs/configure_https.md\n\n#### 2、部署docker_proxy\npull images\n\npull_images.sh\n```\n#!/bin/sh\ndocker_registry_proxy=\"dockerhubwp/docker_proxy_nginx:latest\"\nsupernode=\"registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0\"\ndfclient=\"dockerhubwp/dfclient:latest\"\n\nimages=\"${docker_registry_proxy} ${supernode} ${dfclient}\"\n\nfunction pullImage(){\n   for image in ${images}; do\n        echo -e \"pull image ======>${image}\"\n        docker pull ${image}\n    done\n}\n\npullImage\n```\n\n\ndocker_proxy.sh\n\n```\n#! /bin/sh\n\n#   Separate deployment docker_proxy\n\n# dfdaemon and docker registry map\n# example  x.x.x\nregistry=\"harbor域名\"\ncontainername=docker_registry_proxy\n#  你需要配置的dns 服务器 (如：dnsmasq)  \nDNS_SERVER=\"dns-server\"\ndocker_registry_proxy=\"dockerhubwp/docker_proxy_nginx:latest\"\n\n# get localhost ip\nipaddr=$(ip addr | awk '/^[0-9]+: / {}; /inet.*global/ {print gensub(/(.*)\\/(.*)/, \"\\\\1\", \"g\", $2)}')\nlocalhostIp=$(echo ${ipaddr} | cut -d \" \" -f 1)\n\nfunction changeDockerProxy() {\n    mkdir -p /etc/systemd/system/docker.service.d\n\tcat <<EOD >/etc/systemd/system/docker.service.d/http-proxy.conf\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:3128/\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:3128/\"\nEOD\n}\n\nfunction dockerDockerProxyRun() {\n    if [[ 0 != $(docker ps -a | grep ${containername} | wc -l) ]]; then\n        docker rm -f ${containername}\n    fi\n    docker run --restart=always --privileged=true --name ${containername} -d -p 0.0.0.0:3128:3128 -v /etc/docker_proxy_nginx/docker_mirror_certs:/ca -v /var/log/docker_proxy_nginx:/var/log/nginx/ -e DRAGONFLY_REGISTRIES=\"${registry},http://${localhostIp}:65001\" -e REGISTRIES=\"${registry}\" -e DNS_SERVER=${DNS_SERVER} ${docker_registry_proxy}\n}\n\nchangeDockerProxy\n\nsystemctl daemon-reload\nsystemctl restart docker\n\ndockerDockerProxyRun\n\n```\n\n\n#### 3、部署dragonfly\n\n##### 部署Supernode\n\nsupernode.sh\n```\n#!/bin/sh\n\n#   Separate deployment supernode\n\nsupernode=\"registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0\"\ncontainername=supernode\n\nfunction superNode() {\n    if [[ 0 != $(docker ps -a | grep ${containername} | wc -l) ]]; then\n        docker rm -f ${containername}\n    fi\n    docker run --name ${containername} --restart=always -d -p 8001:8001 -p 8002:8002 ${supernode}\n}\nsuperNode\n```\n##### 部署dfclient\ndfclient.sh\n\n```\n#!/bin/sh\n\n#   Separate deployment docker_proxy\n\ndfclient=\"dockerhubwp/dfclient:latest\"\n\n#harbor 地址\ndfdaemon_registry=\"https://x.x.x\"\ncontainername=dfclient\n\n# supernode ips  example (10.0.0.160,10.0.0.162)\nsupernodes=\"supernodeip\"\n\n\nipaddr=$(ip addr | awk '/^[0-9]+: / {}; /inet.*global/ {print gensub(/(.*)\\/(.*)/, \"\\\\1\", \"g\", $2)}')\nlocalhostIp=$(echo ${ipaddr} | cut -d \" \" -f 1)\n\ncat <<EOD >/etc/dragonfly.conf\n[node]\naddress=${supernodes}\nEOD\n\n\nfunction startDfClient() {\n    if [[ 0 != $(docker ps -a | grep ${containername} | wc -l) ]]; then\n        docker rm -f ${containername}\n    fi\n    docker run --name ${containername} --restart=always -d  -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly -v /etc/dragonfly.conf:/etc/dragonfly.conf  -e dfdaemon_registry=${dfdaemon_registry} -e localhostIp=${localhostIp} ${dfclient}\n}\n\nstartDfClient\n```\n\n最后\n\ntrust.sh\n```\n#!/bin/sh\n\n# trust ca\n\ncurl http://127.0.0.1:3128/ca.crt >/etc/pki/ca-trust/source/anchors/docker_proxy_nginx.crt\n\nupdate-ca-trust\n```\n\n\n```\ndocker pull x.x.x/library/nginx:latest\n```\n\n\n参考：\n\n   https://d7y.io/zh-cn/\n\n   https://github.com/goharbor/harbor/\n   \n   https://github.com/rpardini/docker-registry-proxy\n   \n   https://github.com/chobits/ngx_http_proxy_connect_module\n","source":"_posts/dragonfly.md","raw":"---\ntitle: dragonfly 之 p2p 镜像分发 \ndate: 2019-02-26 09:07:21\ntags:\n---\n支持https harbor，公有或私有仓库\n支持push image \n\n### 什么是dragonfly\n Dragonfly 是一款基于 P2P 的智能镜像和文件分发工具。它旨在提高文件传输的效率和速率，最大限度地利用网络带宽，尤其是在分发大量数据时，例如应用分发、缓存分发、日志分发和镜像分发。\n\n在阿里巴巴，Dragonfly 每个月会被调用 20 亿次，分发的数据量高达 3.4PB。Dragonfly 已成为阿里巴巴基础设施中的重要一环。\n\n尽管容器技术大部分时候简化了运维工作，但是它也带来了一些挑战：例如镜像分发的效率问题，尤其是必须在多个主机上复制镜像分发时。\n\nDragonfly 在这种场景下能够完美支持 Docker 和 PouchContainer。它也兼容其他格式的容器。相比原生方式，它能将容器分发速度提高 57 倍，并让 Registry 网络出口流量降低 99.5%。\n\nDragonfly 能让所有类型的文件、镜像或数据分发变得简单而经济。\n### Dragonfly 有何优势（具备以下特性）？\n- 基于 P2P 的文件分发：通过利用 P2P 技术进行文件传输，它能最大限度地利用每个对等节点（Peer）的带宽资源，以提高下载效率，并节省大量跨机房带宽，尤其是昂贵的跨境带宽。\n- 非侵入式支持所有类型的容器技术：Dragonfly 可无缝支持多种容器用于分发镜像。\n- 机器级别的限速：除了像许多其他下载工具（例如 wget 和 curl）那样的针对当前下载任务的限速之外，Dragonfly 还支持针对整个机器的限速。\n- 被动式 CDN：这种 CDN 机制可防止重复远程下载。\n- 高度一致性：Dragonfly 可确保所有下载的文件是一致的，即使用户不提供任何检查代码（MD5）。\n- 磁盘保护和高效 IO：预检磁盘空间、延迟同步、以最佳顺序写文件分块、隔离网络-读/磁盘-写等等。\n- 高性能：SuperNode 是完全闭环的，意味着它不依赖任何数据库或分布式缓存，能够以极高性能处理请求。\n- 自动隔离异常：Dragonfly 会自动隔离异常节点（对等节点或 SuperNode）来提高下载稳定性。\n- 对文件源无压力：一般只有少数几个 SuperNode 会从源下载文件。\n- 支持标准 HTTP 头文件：支持通过 HTTP 头文件提交鉴权信息。\n- 有效的 Registry 鉴权并发控制：减少对 Registry 鉴权服务的压力。\n- 简单易用：仅需极少的配置。\n \n### dragonfly原理\nDragonfly 下载普通文件和下载容器镜像的工作原理略有不同。\n\n##### 下载普通文件\nSuperNode 充当 CDN，并负责调度对等节点（Peer）之间的文件分块传输。dfget 是 P2P 客户端，也称为“Peer”（对等节点），主要用于下载和共享文件分块。\n\n![image](https://d7y.io/docs/zh-cn/img/dfget.png)\n\n#### 下载镜像文件\nRegistry 类似于文件服务器。dfget proxy 也称为 dfdaemon，会拦截来自 docker pull 或 docker push 的 HTTP 请求，然后使用 dfget 来处理那些跟镜像分层相关的请求。\n\n![image](https://d7y.io/docs/zh-cn/img/dfget-combine-container.png)\n\n#### 下载文件分块\n每个文件会被分成多个分块，并在对等节点之间传输。一个对等节点就是一个 P2P 客户端。SuperNode 会判断本地是否存在对应的文件。如果不存在，则会将其从文件服务器下载到 SuperNode。\n\n![image](https://d7y.io/docs/zh-cn/img/distributing.png)\n \n### dragonfly部署（参考dragonfly官网）\n\nhttps://d7y.io/zh-cn/\n\n### dragonfly https的harbor \n\ndragonfly 常见问题\n\nhttps://github.com/dragonflyoss/Dragonfly/blob/master/FAQ.md\n\n目的：启用 docker PROXY  让dragonfly 支持https \n#### 1、部署https harbor\n\nhttps://github.com/goharbor/harbor/blob/master/docs/configure_https.md\n\n#### 2、部署docker_proxy\npull images\n\npull_images.sh\n```\n#!/bin/sh\ndocker_registry_proxy=\"dockerhubwp/docker_proxy_nginx:latest\"\nsupernode=\"registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0\"\ndfclient=\"dockerhubwp/dfclient:latest\"\n\nimages=\"${docker_registry_proxy} ${supernode} ${dfclient}\"\n\nfunction pullImage(){\n   for image in ${images}; do\n        echo -e \"pull image ======>${image}\"\n        docker pull ${image}\n    done\n}\n\npullImage\n```\n\n\ndocker_proxy.sh\n\n```\n#! /bin/sh\n\n#   Separate deployment docker_proxy\n\n# dfdaemon and docker registry map\n# example  x.x.x\nregistry=\"harbor域名\"\ncontainername=docker_registry_proxy\n#  你需要配置的dns 服务器 (如：dnsmasq)  \nDNS_SERVER=\"dns-server\"\ndocker_registry_proxy=\"dockerhubwp/docker_proxy_nginx:latest\"\n\n# get localhost ip\nipaddr=$(ip addr | awk '/^[0-9]+: / {}; /inet.*global/ {print gensub(/(.*)\\/(.*)/, \"\\\\1\", \"g\", $2)}')\nlocalhostIp=$(echo ${ipaddr} | cut -d \" \" -f 1)\n\nfunction changeDockerProxy() {\n    mkdir -p /etc/systemd/system/docker.service.d\n\tcat <<EOD >/etc/systemd/system/docker.service.d/http-proxy.conf\n[Service]\nEnvironment=\"HTTP_PROXY=http://127.0.0.1:3128/\"\nEnvironment=\"HTTPS_PROXY=http://127.0.0.1:3128/\"\nEOD\n}\n\nfunction dockerDockerProxyRun() {\n    if [[ 0 != $(docker ps -a | grep ${containername} | wc -l) ]]; then\n        docker rm -f ${containername}\n    fi\n    docker run --restart=always --privileged=true --name ${containername} -d -p 0.0.0.0:3128:3128 -v /etc/docker_proxy_nginx/docker_mirror_certs:/ca -v /var/log/docker_proxy_nginx:/var/log/nginx/ -e DRAGONFLY_REGISTRIES=\"${registry},http://${localhostIp}:65001\" -e REGISTRIES=\"${registry}\" -e DNS_SERVER=${DNS_SERVER} ${docker_registry_proxy}\n}\n\nchangeDockerProxy\n\nsystemctl daemon-reload\nsystemctl restart docker\n\ndockerDockerProxyRun\n\n```\n\n\n#### 3、部署dragonfly\n\n##### 部署Supernode\n\nsupernode.sh\n```\n#!/bin/sh\n\n#   Separate deployment supernode\n\nsupernode=\"registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0\"\ncontainername=supernode\n\nfunction superNode() {\n    if [[ 0 != $(docker ps -a | grep ${containername} | wc -l) ]]; then\n        docker rm -f ${containername}\n    fi\n    docker run --name ${containername} --restart=always -d -p 8001:8001 -p 8002:8002 ${supernode}\n}\nsuperNode\n```\n##### 部署dfclient\ndfclient.sh\n\n```\n#!/bin/sh\n\n#   Separate deployment docker_proxy\n\ndfclient=\"dockerhubwp/dfclient:latest\"\n\n#harbor 地址\ndfdaemon_registry=\"https://x.x.x\"\ncontainername=dfclient\n\n# supernode ips  example (10.0.0.160,10.0.0.162)\nsupernodes=\"supernodeip\"\n\n\nipaddr=$(ip addr | awk '/^[0-9]+: / {}; /inet.*global/ {print gensub(/(.*)\\/(.*)/, \"\\\\1\", \"g\", $2)}')\nlocalhostIp=$(echo ${ipaddr} | cut -d \" \" -f 1)\n\ncat <<EOD >/etc/dragonfly.conf\n[node]\naddress=${supernodes}\nEOD\n\n\nfunction startDfClient() {\n    if [[ 0 != $(docker ps -a | grep ${containername} | wc -l) ]]; then\n        docker rm -f ${containername}\n    fi\n    docker run --name ${containername} --restart=always -d  -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly -v /etc/dragonfly.conf:/etc/dragonfly.conf  -e dfdaemon_registry=${dfdaemon_registry} -e localhostIp=${localhostIp} ${dfclient}\n}\n\nstartDfClient\n```\n\n最后\n\ntrust.sh\n```\n#!/bin/sh\n\n# trust ca\n\ncurl http://127.0.0.1:3128/ca.crt >/etc/pki/ca-trust/source/anchors/docker_proxy_nginx.crt\n\nupdate-ca-trust\n```\n\n\n```\ndocker pull x.x.x/library/nginx:latest\n```\n\n\n参考：\n\n   https://d7y.io/zh-cn/\n\n   https://github.com/goharbor/harbor/\n   \n   https://github.com/rpardini/docker-registry-proxy\n   \n   https://github.com/chobits/ngx_http_proxy_connect_module\n","slug":"dragonfly","published":1,"updated":"2019-02-26T04:09:18.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgb000igkxrm4maovoz","content":"<p>支持https harbor，公有或私有仓库<br>支持push image </p>\n<h3 id=\"什么是dragonfly\"><a href=\"#什么是dragonfly\" class=\"headerlink\" title=\"什么是dragonfly\"></a>什么是dragonfly</h3><p> Dragonfly 是一款基于 P2P 的智能镜像和文件分发工具。它旨在提高文件传输的效率和速率，最大限度地利用网络带宽，尤其是在分发大量数据时，例如应用分发、缓存分发、日志分发和镜像分发。</p>\n<p>在阿里巴巴，Dragonfly 每个月会被调用 20 亿次，分发的数据量高达 3.4PB。Dragonfly 已成为阿里巴巴基础设施中的重要一环。</p>\n<p>尽管容器技术大部分时候简化了运维工作，但是它也带来了一些挑战：例如镜像分发的效率问题，尤其是必须在多个主机上复制镜像分发时。</p>\n<p>Dragonfly 在这种场景下能够完美支持 Docker 和 PouchContainer。它也兼容其他格式的容器。相比原生方式，它能将容器分发速度提高 57 倍，并让 Registry 网络出口流量降低 99.5%。</p>\n<p>Dragonfly 能让所有类型的文件、镜像或数据分发变得简单而经济。</p>\n<h3 id=\"Dragonfly-有何优势（具备以下特性）？\"><a href=\"#Dragonfly-有何优势（具备以下特性）？\" class=\"headerlink\" title=\"Dragonfly 有何优势（具备以下特性）？\"></a>Dragonfly 有何优势（具备以下特性）？</h3><ul>\n<li>基于 P2P 的文件分发：通过利用 P2P 技术进行文件传输，它能最大限度地利用每个对等节点（Peer）的带宽资源，以提高下载效率，并节省大量跨机房带宽，尤其是昂贵的跨境带宽。</li>\n<li>非侵入式支持所有类型的容器技术：Dragonfly 可无缝支持多种容器用于分发镜像。</li>\n<li>机器级别的限速：除了像许多其他下载工具（例如 wget 和 curl）那样的针对当前下载任务的限速之外，Dragonfly 还支持针对整个机器的限速。</li>\n<li>被动式 CDN：这种 CDN 机制可防止重复远程下载。</li>\n<li>高度一致性：Dragonfly 可确保所有下载的文件是一致的，即使用户不提供任何检查代码（MD5）。</li>\n<li>磁盘保护和高效 IO：预检磁盘空间、延迟同步、以最佳顺序写文件分块、隔离网络-读/磁盘-写等等。</li>\n<li>高性能：SuperNode 是完全闭环的，意味着它不依赖任何数据库或分布式缓存，能够以极高性能处理请求。</li>\n<li>自动隔离异常：Dragonfly 会自动隔离异常节点（对等节点或 SuperNode）来提高下载稳定性。</li>\n<li>对文件源无压力：一般只有少数几个 SuperNode 会从源下载文件。</li>\n<li>支持标准 HTTP 头文件：支持通过 HTTP 头文件提交鉴权信息。</li>\n<li>有效的 Registry 鉴权并发控制：减少对 Registry 鉴权服务的压力。</li>\n<li>简单易用：仅需极少的配置。</li>\n</ul>\n<h3 id=\"dragonfly原理\"><a href=\"#dragonfly原理\" class=\"headerlink\" title=\"dragonfly原理\"></a>dragonfly原理</h3><p>Dragonfly 下载普通文件和下载容器镜像的工作原理略有不同。</p>\n<h5 id=\"下载普通文件\"><a href=\"#下载普通文件\" class=\"headerlink\" title=\"下载普通文件\"></a>下载普通文件</h5><p>SuperNode 充当 CDN，并负责调度对等节点（Peer）之间的文件分块传输。dfget 是 P2P 客户端，也称为“Peer”（对等节点），主要用于下载和共享文件分块。</p>\n<p><img src=\"https://d7y.io/docs/zh-cn/img/dfget.png\" alt=\"image\"></p>\n<h4 id=\"下载镜像文件\"><a href=\"#下载镜像文件\" class=\"headerlink\" title=\"下载镜像文件\"></a>下载镜像文件</h4><p>Registry 类似于文件服务器。dfget proxy 也称为 dfdaemon，会拦截来自 docker pull 或 docker push 的 HTTP 请求，然后使用 dfget 来处理那些跟镜像分层相关的请求。</p>\n<p><img src=\"https://d7y.io/docs/zh-cn/img/dfget-combine-container.png\" alt=\"image\"></p>\n<h4 id=\"下载文件分块\"><a href=\"#下载文件分块\" class=\"headerlink\" title=\"下载文件分块\"></a>下载文件分块</h4><p>每个文件会被分成多个分块，并在对等节点之间传输。一个对等节点就是一个 P2P 客户端。SuperNode 会判断本地是否存在对应的文件。如果不存在，则会将其从文件服务器下载到 SuperNode。</p>\n<p><img src=\"https://d7y.io/docs/zh-cn/img/distributing.png\" alt=\"image\"></p>\n<h3 id=\"dragonfly部署（参考dragonfly官网）\"><a href=\"#dragonfly部署（参考dragonfly官网）\" class=\"headerlink\" title=\"dragonfly部署（参考dragonfly官网）\"></a>dragonfly部署（参考dragonfly官网）</h3><p><a href=\"https://d7y.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://d7y.io/zh-cn/</a></p>\n<h3 id=\"dragonfly-https的harbor\"><a href=\"#dragonfly-https的harbor\" class=\"headerlink\" title=\"dragonfly https的harbor\"></a>dragonfly https的harbor</h3><p>dragonfly 常见问题</p>\n<p><a href=\"https://github.com/dragonflyoss/Dragonfly/blob/master/FAQ.md\" target=\"_blank\" rel=\"noopener\">https://github.com/dragonflyoss/Dragonfly/blob/master/FAQ.md</a></p>\n<p>目的：启用 docker PROXY  让dragonfly 支持https </p>\n<h4 id=\"1、部署https-harbor\"><a href=\"#1、部署https-harbor\" class=\"headerlink\" title=\"1、部署https harbor\"></a>1、部署https harbor</h4><p><a href=\"https://github.com/goharbor/harbor/blob/master/docs/configure_https.md\" target=\"_blank\" rel=\"noopener\">https://github.com/goharbor/harbor/blob/master/docs/configure_https.md</a></p>\n<h4 id=\"2、部署docker-proxy\"><a href=\"#2、部署docker-proxy\" class=\"headerlink\" title=\"2、部署docker_proxy\"></a>2、部署docker_proxy</h4><p>pull images</p>\n<p>pull_images.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">docker_registry_proxy=&quot;dockerhubwp/docker_proxy_nginx:latest&quot;</span><br><span class=\"line\">supernode=&quot;registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0&quot;</span><br><span class=\"line\">dfclient=&quot;dockerhubwp/dfclient:latest&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">images=&quot;$&#123;docker_registry_proxy&#125; $&#123;supernode&#125; $&#123;dfclient&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">function pullImage()&#123;</span><br><span class=\"line\">   for image in $&#123;images&#125;; do</span><br><span class=\"line\">        echo -e &quot;pull image ======&gt;$&#123;image&#125;&quot;</span><br><span class=\"line\">        docker pull $&#123;image&#125;</span><br><span class=\"line\">    done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pullImage</span><br></pre></td></tr></table></figure></p>\n<p>docker_proxy.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#! /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">#   Separate deployment docker_proxy</span><br><span class=\"line\"></span><br><span class=\"line\"># dfdaemon and docker registry map</span><br><span class=\"line\"># example  x.x.x</span><br><span class=\"line\">registry=&quot;harbor域名&quot;</span><br><span class=\"line\">containername=docker_registry_proxy</span><br><span class=\"line\">#  你需要配置的dns 服务器 (如：dnsmasq)  </span><br><span class=\"line\">DNS_SERVER=&quot;dns-server&quot;</span><br><span class=\"line\">docker_registry_proxy=&quot;dockerhubwp/docker_proxy_nginx:latest&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># get localhost ip</span><br><span class=\"line\">ipaddr=$(ip addr | awk &apos;/^[0-9]+: / &#123;&#125;; /inet.*global/ &#123;print gensub(/(.*)\\/(.*)/, &quot;\\\\1&quot;, &quot;g&quot;, $2)&#125;&apos;)</span><br><span class=\"line\">localhostIp=$(echo $&#123;ipaddr&#125; | cut -d &quot; &quot; -f 1)</span><br><span class=\"line\"></span><br><span class=\"line\">function changeDockerProxy() &#123;</span><br><span class=\"line\">    mkdir -p /etc/systemd/system/docker.service.d</span><br><span class=\"line\">\tcat &lt;&lt;EOD &gt;/etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=&quot;HTTP_PROXY=http://127.0.0.1:3128/&quot;</span><br><span class=\"line\">Environment=&quot;HTTPS_PROXY=http://127.0.0.1:3128/&quot;</span><br><span class=\"line\">EOD</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function dockerDockerProxyRun() &#123;</span><br><span class=\"line\">    if [[ 0 != $(docker ps -a | grep $&#123;containername&#125; | wc -l) ]]; then</span><br><span class=\"line\">        docker rm -f $&#123;containername&#125;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    docker run --restart=always --privileged=true --name $&#123;containername&#125; -d -p 0.0.0.0:3128:3128 -v /etc/docker_proxy_nginx/docker_mirror_certs:/ca -v /var/log/docker_proxy_nginx:/var/log/nginx/ -e DRAGONFLY_REGISTRIES=&quot;$&#123;registry&#125;,http://$&#123;localhostIp&#125;:65001&quot; -e REGISTRIES=&quot;$&#123;registry&#125;&quot; -e DNS_SERVER=$&#123;DNS_SERVER&#125; $&#123;docker_registry_proxy&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">changeDockerProxy</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\">dockerDockerProxyRun</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、部署dragonfly\"><a href=\"#3、部署dragonfly\" class=\"headerlink\" title=\"3、部署dragonfly\"></a>3、部署dragonfly</h4><h5 id=\"部署Supernode\"><a href=\"#部署Supernode\" class=\"headerlink\" title=\"部署Supernode\"></a>部署Supernode</h5><p>supernode.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">#   Separate deployment supernode</span><br><span class=\"line\"></span><br><span class=\"line\">supernode=&quot;registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0&quot;</span><br><span class=\"line\">containername=supernode</span><br><span class=\"line\"></span><br><span class=\"line\">function superNode() &#123;</span><br><span class=\"line\">    if [[ 0 != $(docker ps -a | grep $&#123;containername&#125; | wc -l) ]]; then</span><br><span class=\"line\">        docker rm -f $&#123;containername&#125;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    docker run --name $&#123;containername&#125; --restart=always -d -p 8001:8001 -p 8002:8002 $&#123;supernode&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">superNode</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"部署dfclient\"><a href=\"#部署dfclient\" class=\"headerlink\" title=\"部署dfclient\"></a>部署dfclient</h5><p>dfclient.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">#   Separate deployment docker_proxy</span><br><span class=\"line\"></span><br><span class=\"line\">dfclient=&quot;dockerhubwp/dfclient:latest&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#harbor 地址</span><br><span class=\"line\">dfdaemon_registry=&quot;https://x.x.x&quot;</span><br><span class=\"line\">containername=dfclient</span><br><span class=\"line\"></span><br><span class=\"line\"># supernode ips  example (10.0.0.160,10.0.0.162)</span><br><span class=\"line\">supernodes=&quot;supernodeip&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ipaddr=$(ip addr | awk &apos;/^[0-9]+: / &#123;&#125;; /inet.*global/ &#123;print gensub(/(.*)\\/(.*)/, &quot;\\\\1&quot;, &quot;g&quot;, $2)&#125;&apos;)</span><br><span class=\"line\">localhostIp=$(echo $&#123;ipaddr&#125; | cut -d &quot; &quot; -f 1)</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOD &gt;/etc/dragonfly.conf</span><br><span class=\"line\">[node]</span><br><span class=\"line\">address=$&#123;supernodes&#125;</span><br><span class=\"line\">EOD</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function startDfClient() &#123;</span><br><span class=\"line\">    if [[ 0 != $(docker ps -a | grep $&#123;containername&#125; | wc -l) ]]; then</span><br><span class=\"line\">        docker rm -f $&#123;containername&#125;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    docker run --name $&#123;containername&#125; --restart=always -d  -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly -v /etc/dragonfly.conf:/etc/dragonfly.conf  -e dfdaemon_registry=$&#123;dfdaemon_registry&#125; -e localhostIp=$&#123;localhostIp&#125; $&#123;dfclient&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">startDfClient</span><br></pre></td></tr></table></figure>\n<p>最后</p>\n<p>trust.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># trust ca</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://127.0.0.1:3128/ca.crt &gt;/etc/pki/ca-trust/source/anchors/docker_proxy_nginx.crt</span><br><span class=\"line\"></span><br><span class=\"line\">update-ca-trust</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull x.x.x/library/nginx:latest</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p>   <a href=\"https://d7y.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://d7y.io/zh-cn/</a></p>\n<p>   <a href=\"https://github.com/goharbor/harbor/\" target=\"_blank\" rel=\"noopener\">https://github.com/goharbor/harbor/</a></p>\n<p>   <a href=\"https://github.com/rpardini/docker-registry-proxy\" target=\"_blank\" rel=\"noopener\">https://github.com/rpardini/docker-registry-proxy</a></p>\n<p>   <a href=\"https://github.com/chobits/ngx_http_proxy_connect_module\" target=\"_blank\" rel=\"noopener\">https://github.com/chobits/ngx_http_proxy_connect_module</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>支持https harbor，公有或私有仓库<br>支持push image </p>\n<h3 id=\"什么是dragonfly\"><a href=\"#什么是dragonfly\" class=\"headerlink\" title=\"什么是dragonfly\"></a>什么是dragonfly</h3><p> Dragonfly 是一款基于 P2P 的智能镜像和文件分发工具。它旨在提高文件传输的效率和速率，最大限度地利用网络带宽，尤其是在分发大量数据时，例如应用分发、缓存分发、日志分发和镜像分发。</p>\n<p>在阿里巴巴，Dragonfly 每个月会被调用 20 亿次，分发的数据量高达 3.4PB。Dragonfly 已成为阿里巴巴基础设施中的重要一环。</p>\n<p>尽管容器技术大部分时候简化了运维工作，但是它也带来了一些挑战：例如镜像分发的效率问题，尤其是必须在多个主机上复制镜像分发时。</p>\n<p>Dragonfly 在这种场景下能够完美支持 Docker 和 PouchContainer。它也兼容其他格式的容器。相比原生方式，它能将容器分发速度提高 57 倍，并让 Registry 网络出口流量降低 99.5%。</p>\n<p>Dragonfly 能让所有类型的文件、镜像或数据分发变得简单而经济。</p>\n<h3 id=\"Dragonfly-有何优势（具备以下特性）？\"><a href=\"#Dragonfly-有何优势（具备以下特性）？\" class=\"headerlink\" title=\"Dragonfly 有何优势（具备以下特性）？\"></a>Dragonfly 有何优势（具备以下特性）？</h3><ul>\n<li>基于 P2P 的文件分发：通过利用 P2P 技术进行文件传输，它能最大限度地利用每个对等节点（Peer）的带宽资源，以提高下载效率，并节省大量跨机房带宽，尤其是昂贵的跨境带宽。</li>\n<li>非侵入式支持所有类型的容器技术：Dragonfly 可无缝支持多种容器用于分发镜像。</li>\n<li>机器级别的限速：除了像许多其他下载工具（例如 wget 和 curl）那样的针对当前下载任务的限速之外，Dragonfly 还支持针对整个机器的限速。</li>\n<li>被动式 CDN：这种 CDN 机制可防止重复远程下载。</li>\n<li>高度一致性：Dragonfly 可确保所有下载的文件是一致的，即使用户不提供任何检查代码（MD5）。</li>\n<li>磁盘保护和高效 IO：预检磁盘空间、延迟同步、以最佳顺序写文件分块、隔离网络-读/磁盘-写等等。</li>\n<li>高性能：SuperNode 是完全闭环的，意味着它不依赖任何数据库或分布式缓存，能够以极高性能处理请求。</li>\n<li>自动隔离异常：Dragonfly 会自动隔离异常节点（对等节点或 SuperNode）来提高下载稳定性。</li>\n<li>对文件源无压力：一般只有少数几个 SuperNode 会从源下载文件。</li>\n<li>支持标准 HTTP 头文件：支持通过 HTTP 头文件提交鉴权信息。</li>\n<li>有效的 Registry 鉴权并发控制：减少对 Registry 鉴权服务的压力。</li>\n<li>简单易用：仅需极少的配置。</li>\n</ul>\n<h3 id=\"dragonfly原理\"><a href=\"#dragonfly原理\" class=\"headerlink\" title=\"dragonfly原理\"></a>dragonfly原理</h3><p>Dragonfly 下载普通文件和下载容器镜像的工作原理略有不同。</p>\n<h5 id=\"下载普通文件\"><a href=\"#下载普通文件\" class=\"headerlink\" title=\"下载普通文件\"></a>下载普通文件</h5><p>SuperNode 充当 CDN，并负责调度对等节点（Peer）之间的文件分块传输。dfget 是 P2P 客户端，也称为“Peer”（对等节点），主要用于下载和共享文件分块。</p>\n<p><img src=\"https://d7y.io/docs/zh-cn/img/dfget.png\" alt=\"image\"></p>\n<h4 id=\"下载镜像文件\"><a href=\"#下载镜像文件\" class=\"headerlink\" title=\"下载镜像文件\"></a>下载镜像文件</h4><p>Registry 类似于文件服务器。dfget proxy 也称为 dfdaemon，会拦截来自 docker pull 或 docker push 的 HTTP 请求，然后使用 dfget 来处理那些跟镜像分层相关的请求。</p>\n<p><img src=\"https://d7y.io/docs/zh-cn/img/dfget-combine-container.png\" alt=\"image\"></p>\n<h4 id=\"下载文件分块\"><a href=\"#下载文件分块\" class=\"headerlink\" title=\"下载文件分块\"></a>下载文件分块</h4><p>每个文件会被分成多个分块，并在对等节点之间传输。一个对等节点就是一个 P2P 客户端。SuperNode 会判断本地是否存在对应的文件。如果不存在，则会将其从文件服务器下载到 SuperNode。</p>\n<p><img src=\"https://d7y.io/docs/zh-cn/img/distributing.png\" alt=\"image\"></p>\n<h3 id=\"dragonfly部署（参考dragonfly官网）\"><a href=\"#dragonfly部署（参考dragonfly官网）\" class=\"headerlink\" title=\"dragonfly部署（参考dragonfly官网）\"></a>dragonfly部署（参考dragonfly官网）</h3><p><a href=\"https://d7y.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://d7y.io/zh-cn/</a></p>\n<h3 id=\"dragonfly-https的harbor\"><a href=\"#dragonfly-https的harbor\" class=\"headerlink\" title=\"dragonfly https的harbor\"></a>dragonfly https的harbor</h3><p>dragonfly 常见问题</p>\n<p><a href=\"https://github.com/dragonflyoss/Dragonfly/blob/master/FAQ.md\" target=\"_blank\" rel=\"noopener\">https://github.com/dragonflyoss/Dragonfly/blob/master/FAQ.md</a></p>\n<p>目的：启用 docker PROXY  让dragonfly 支持https </p>\n<h4 id=\"1、部署https-harbor\"><a href=\"#1、部署https-harbor\" class=\"headerlink\" title=\"1、部署https harbor\"></a>1、部署https harbor</h4><p><a href=\"https://github.com/goharbor/harbor/blob/master/docs/configure_https.md\" target=\"_blank\" rel=\"noopener\">https://github.com/goharbor/harbor/blob/master/docs/configure_https.md</a></p>\n<h4 id=\"2、部署docker-proxy\"><a href=\"#2、部署docker-proxy\" class=\"headerlink\" title=\"2、部署docker_proxy\"></a>2、部署docker_proxy</h4><p>pull images</p>\n<p>pull_images.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">docker_registry_proxy=&quot;dockerhubwp/docker_proxy_nginx:latest&quot;</span><br><span class=\"line\">supernode=&quot;registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0&quot;</span><br><span class=\"line\">dfclient=&quot;dockerhubwp/dfclient:latest&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">images=&quot;$&#123;docker_registry_proxy&#125; $&#123;supernode&#125; $&#123;dfclient&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">function pullImage()&#123;</span><br><span class=\"line\">   for image in $&#123;images&#125;; do</span><br><span class=\"line\">        echo -e &quot;pull image ======&gt;$&#123;image&#125;&quot;</span><br><span class=\"line\">        docker pull $&#123;image&#125;</span><br><span class=\"line\">    done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pullImage</span><br></pre></td></tr></table></figure></p>\n<p>docker_proxy.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#! /bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">#   Separate deployment docker_proxy</span><br><span class=\"line\"></span><br><span class=\"line\"># dfdaemon and docker registry map</span><br><span class=\"line\"># example  x.x.x</span><br><span class=\"line\">registry=&quot;harbor域名&quot;</span><br><span class=\"line\">containername=docker_registry_proxy</span><br><span class=\"line\">#  你需要配置的dns 服务器 (如：dnsmasq)  </span><br><span class=\"line\">DNS_SERVER=&quot;dns-server&quot;</span><br><span class=\"line\">docker_registry_proxy=&quot;dockerhubwp/docker_proxy_nginx:latest&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># get localhost ip</span><br><span class=\"line\">ipaddr=$(ip addr | awk &apos;/^[0-9]+: / &#123;&#125;; /inet.*global/ &#123;print gensub(/(.*)\\/(.*)/, &quot;\\\\1&quot;, &quot;g&quot;, $2)&#125;&apos;)</span><br><span class=\"line\">localhostIp=$(echo $&#123;ipaddr&#125; | cut -d &quot; &quot; -f 1)</span><br><span class=\"line\"></span><br><span class=\"line\">function changeDockerProxy() &#123;</span><br><span class=\"line\">    mkdir -p /etc/systemd/system/docker.service.d</span><br><span class=\"line\">\tcat &lt;&lt;EOD &gt;/etc/systemd/system/docker.service.d/http-proxy.conf</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=&quot;HTTP_PROXY=http://127.0.0.1:3128/&quot;</span><br><span class=\"line\">Environment=&quot;HTTPS_PROXY=http://127.0.0.1:3128/&quot;</span><br><span class=\"line\">EOD</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function dockerDockerProxyRun() &#123;</span><br><span class=\"line\">    if [[ 0 != $(docker ps -a | grep $&#123;containername&#125; | wc -l) ]]; then</span><br><span class=\"line\">        docker rm -f $&#123;containername&#125;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    docker run --restart=always --privileged=true --name $&#123;containername&#125; -d -p 0.0.0.0:3128:3128 -v /etc/docker_proxy_nginx/docker_mirror_certs:/ca -v /var/log/docker_proxy_nginx:/var/log/nginx/ -e DRAGONFLY_REGISTRIES=&quot;$&#123;registry&#125;,http://$&#123;localhostIp&#125;:65001&quot; -e REGISTRIES=&quot;$&#123;registry&#125;&quot; -e DNS_SERVER=$&#123;DNS_SERVER&#125; $&#123;docker_registry_proxy&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">changeDockerProxy</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\">dockerDockerProxyRun</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、部署dragonfly\"><a href=\"#3、部署dragonfly\" class=\"headerlink\" title=\"3、部署dragonfly\"></a>3、部署dragonfly</h4><h5 id=\"部署Supernode\"><a href=\"#部署Supernode\" class=\"headerlink\" title=\"部署Supernode\"></a>部署Supernode</h5><p>supernode.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">#   Separate deployment supernode</span><br><span class=\"line\"></span><br><span class=\"line\">supernode=&quot;registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0&quot;</span><br><span class=\"line\">containername=supernode</span><br><span class=\"line\"></span><br><span class=\"line\">function superNode() &#123;</span><br><span class=\"line\">    if [[ 0 != $(docker ps -a | grep $&#123;containername&#125; | wc -l) ]]; then</span><br><span class=\"line\">        docker rm -f $&#123;containername&#125;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    docker run --name $&#123;containername&#125; --restart=always -d -p 8001:8001 -p 8002:8002 $&#123;supernode&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">superNode</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"部署dfclient\"><a href=\"#部署dfclient\" class=\"headerlink\" title=\"部署dfclient\"></a>部署dfclient</h5><p>dfclient.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">#   Separate deployment docker_proxy</span><br><span class=\"line\"></span><br><span class=\"line\">dfclient=&quot;dockerhubwp/dfclient:latest&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#harbor 地址</span><br><span class=\"line\">dfdaemon_registry=&quot;https://x.x.x&quot;</span><br><span class=\"line\">containername=dfclient</span><br><span class=\"line\"></span><br><span class=\"line\"># supernode ips  example (10.0.0.160,10.0.0.162)</span><br><span class=\"line\">supernodes=&quot;supernodeip&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ipaddr=$(ip addr | awk &apos;/^[0-9]+: / &#123;&#125;; /inet.*global/ &#123;print gensub(/(.*)\\/(.*)/, &quot;\\\\1&quot;, &quot;g&quot;, $2)&#125;&apos;)</span><br><span class=\"line\">localhostIp=$(echo $&#123;ipaddr&#125; | cut -d &quot; &quot; -f 1)</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOD &gt;/etc/dragonfly.conf</span><br><span class=\"line\">[node]</span><br><span class=\"line\">address=$&#123;supernodes&#125;</span><br><span class=\"line\">EOD</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function startDfClient() &#123;</span><br><span class=\"line\">    if [[ 0 != $(docker ps -a | grep $&#123;containername&#125; | wc -l) ]]; then</span><br><span class=\"line\">        docker rm -f $&#123;containername&#125;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">    docker run --name $&#123;containername&#125; --restart=always -d  -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly -v /etc/dragonfly.conf:/etc/dragonfly.conf  -e dfdaemon_registry=$&#123;dfdaemon_registry&#125; -e localhostIp=$&#123;localhostIp&#125; $&#123;dfclient&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">startDfClient</span><br></pre></td></tr></table></figure>\n<p>最后</p>\n<p>trust.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\"># trust ca</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://127.0.0.1:3128/ca.crt &gt;/etc/pki/ca-trust/source/anchors/docker_proxy_nginx.crt</span><br><span class=\"line\"></span><br><span class=\"line\">update-ca-trust</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull x.x.x/library/nginx:latest</span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p>   <a href=\"https://d7y.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://d7y.io/zh-cn/</a></p>\n<p>   <a href=\"https://github.com/goharbor/harbor/\" target=\"_blank\" rel=\"noopener\">https://github.com/goharbor/harbor/</a></p>\n<p>   <a href=\"https://github.com/rpardini/docker-registry-proxy\" target=\"_blank\" rel=\"noopener\">https://github.com/rpardini/docker-registry-proxy</a></p>\n<p>   <a href=\"https://github.com/chobits/ngx_http_proxy_connect_module\" target=\"_blank\" rel=\"noopener\">https://github.com/chobits/ngx_http_proxy_connect_module</a></p>\n"},{"title":"helm","date":"2019-02-26T10:42:41.000Z","_content":"\n\n#### helm  注意事项\n\nhelm  install chats 与repo 有关\n\nhelm 获取删除chats release 只与config 有关\n\nhelm repo add  可以 重复，第二次添加类似update\nhelm create wp\nhelm package wp --debug\n\n### 启动helm repo  serve\n```\nnohup ./helm serve --address 0.0.0.0:8879 &\n```\n\n### 通过harbor 启动helm repo\n```\nsudo ./install.sh   --with-clair --with-chartmuseum\n```\n### 添加harbor repo  需要密码\n```\n helm repo add --username=admin --password=Passw0rd myrepo https://xx.xx.xx.xx/chartrepo\n```\n### 添加私有特定仓库  公有的无需密码\n```\n   helm repo add --username=admin --password=Passw0rd myrepo https://xx.xx.xx.xx/chartrepo/myproject\n```\n","source":"_posts/helm.md","raw":"---\ntitle: helm\ndate: 2019-02-26 18:42:41\ntags: [helm,kubernetes]\ncategories: [helm,kubernetes]\n---\n\n\n#### helm  注意事项\n\nhelm  install chats 与repo 有关\n\nhelm 获取删除chats release 只与config 有关\n\nhelm repo add  可以 重复，第二次添加类似update\nhelm create wp\nhelm package wp --debug\n\n### 启动helm repo  serve\n```\nnohup ./helm serve --address 0.0.0.0:8879 &\n```\n\n### 通过harbor 启动helm repo\n```\nsudo ./install.sh   --with-clair --with-chartmuseum\n```\n### 添加harbor repo  需要密码\n```\n helm repo add --username=admin --password=Passw0rd myrepo https://xx.xx.xx.xx/chartrepo\n```\n### 添加私有特定仓库  公有的无需密码\n```\n   helm repo add --username=admin --password=Passw0rd myrepo https://xx.xx.xx.xx/chartrepo/myproject\n```\n","slug":"helm","published":1,"updated":"2019-07-02T08:22:01.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgc000jgkxrnjb7y5xd","content":"<h4 id=\"helm-注意事项\"><a href=\"#helm-注意事项\" class=\"headerlink\" title=\"helm  注意事项\"></a>helm  注意事项</h4><p>helm  install chats 与repo 有关</p>\n<p>helm 获取删除chats release 只与config 有关</p>\n<p>helm repo add  可以 重复，第二次添加类似update<br>helm create wp<br>helm package wp –debug</p>\n<h3 id=\"启动helm-repo-serve\"><a href=\"#启动helm-repo-serve\" class=\"headerlink\" title=\"启动helm repo  serve\"></a>启动helm repo  serve</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ./helm serve --address 0.0.0.0:8879 &amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过harbor-启动helm-repo\"><a href=\"#通过harbor-启动helm-repo\" class=\"headerlink\" title=\"通过harbor 启动helm repo\"></a>通过harbor 启动helm repo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./install.sh   --with-clair --with-chartmuseum</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加harbor-repo-需要密码\"><a href=\"#添加harbor-repo-需要密码\" class=\"headerlink\" title=\"添加harbor repo  需要密码\"></a>添加harbor repo  需要密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add --username=admin --password=Passw0rd myrepo https://xx.xx.xx.xx/chartrepo</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加私有特定仓库-公有的无需密码\"><a href=\"#添加私有特定仓库-公有的无需密码\" class=\"headerlink\" title=\"添加私有特定仓库  公有的无需密码\"></a>添加私有特定仓库  公有的无需密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add --username=admin --password=Passw0rd myrepo https://xx.xx.xx.xx/chartrepo/myproject</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h4 id=\"helm-注意事项\"><a href=\"#helm-注意事项\" class=\"headerlink\" title=\"helm  注意事项\"></a>helm  注意事项</h4><p>helm  install chats 与repo 有关</p>\n<p>helm 获取删除chats release 只与config 有关</p>\n<p>helm repo add  可以 重复，第二次添加类似update<br>helm create wp<br>helm package wp –debug</p>\n<h3 id=\"启动helm-repo-serve\"><a href=\"#启动helm-repo-serve\" class=\"headerlink\" title=\"启动helm repo  serve\"></a>启动helm repo  serve</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ./helm serve --address 0.0.0.0:8879 &amp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过harbor-启动helm-repo\"><a href=\"#通过harbor-启动helm-repo\" class=\"headerlink\" title=\"通过harbor 启动helm repo\"></a>通过harbor 启动helm repo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./install.sh   --with-clair --with-chartmuseum</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加harbor-repo-需要密码\"><a href=\"#添加harbor-repo-需要密码\" class=\"headerlink\" title=\"添加harbor repo  需要密码\"></a>添加harbor repo  需要密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add --username=admin --password=Passw0rd myrepo https://xx.xx.xx.xx/chartrepo</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加私有特定仓库-公有的无需密码\"><a href=\"#添加私有特定仓库-公有的无需密码\" class=\"headerlink\" title=\"添加私有特定仓库  公有的无需密码\"></a>添加私有特定仓库  公有的无需密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add --username=admin --password=Passw0rd myrepo https://xx.xx.xx.xx/chartrepo/myproject</span><br></pre></td></tr></table></figure>\n"},{"title":"iterm2 快捷键","date":"2019-04-21T01:50:59.000Z","_content":"command + t\t新建标签\n\ncommand + w\t关闭标签\n\ncommand + 数字 command + 左右方向键\t切换标签\n\ncommand + enter\t切换全屏\n\ncommand + f\t查找\n\ncommand + d\t垂直分屏\n\ncommand + shift + d\t水平分屏\n\ncommand + option + 方向键 command + [ 或 command + ]\t切换屏幕\n\ncommand + ;\t查看历史命令\n\ncommand + shift + h\t查看剪贴板历史\n\nctrl + u\t清除当前行\n\nctrl + l\t清屏\n\nctrl + a\t到行首\n\nctrl + e\t到行尾\n\nctrl + f/b\t前进后退\n\nctrl + p\t上一条命令\n\nctrl + r\t搜索命令历史","source":"_posts/iterm2.md","raw":"---\ntitle: iterm2 快捷键\ndate: 2019-04-21 09:50:59\ntags:\n---\ncommand + t\t新建标签\n\ncommand + w\t关闭标签\n\ncommand + 数字 command + 左右方向键\t切换标签\n\ncommand + enter\t切换全屏\n\ncommand + f\t查找\n\ncommand + d\t垂直分屏\n\ncommand + shift + d\t水平分屏\n\ncommand + option + 方向键 command + [ 或 command + ]\t切换屏幕\n\ncommand + ;\t查看历史命令\n\ncommand + shift + h\t查看剪贴板历史\n\nctrl + u\t清除当前行\n\nctrl + l\t清屏\n\nctrl + a\t到行首\n\nctrl + e\t到行尾\n\nctrl + f/b\t前进后退\n\nctrl + p\t上一条命令\n\nctrl + r\t搜索命令历史","slug":"iterm2","published":1,"updated":"2019-04-21T02:13:29.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgd000mgkxrfrgibaus","content":"<p>command + t    新建标签</p>\n<p>command + w    关闭标签</p>\n<p>command + 数字 command + 左右方向键    切换标签</p>\n<p>command + enter    切换全屏</p>\n<p>command + f    查找</p>\n<p>command + d    垂直分屏</p>\n<p>command + shift + d    水平分屏</p>\n<p>command + option + 方向键 command + [ 或 command + ]    切换屏幕</p>\n<p>command + ;    查看历史命令</p>\n<p>command + shift + h    查看剪贴板历史</p>\n<p>ctrl + u    清除当前行</p>\n<p>ctrl + l    清屏</p>\n<p>ctrl + a    到行首</p>\n<p>ctrl + e    到行尾</p>\n<p>ctrl + f/b    前进后退</p>\n<p>ctrl + p    上一条命令</p>\n<p>ctrl + r    搜索命令历史</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>command + t    新建标签</p>\n<p>command + w    关闭标签</p>\n<p>command + 数字 command + 左右方向键    切换标签</p>\n<p>command + enter    切换全屏</p>\n<p>command + f    查找</p>\n<p>command + d    垂直分屏</p>\n<p>command + shift + d    水平分屏</p>\n<p>command + option + 方向键 command + [ 或 command + ]    切换屏幕</p>\n<p>command + ;    查看历史命令</p>\n<p>command + shift + h    查看剪贴板历史</p>\n<p>ctrl + u    清除当前行</p>\n<p>ctrl + l    清屏</p>\n<p>ctrl + a    到行首</p>\n<p>ctrl + e    到行尾</p>\n<p>ctrl + f/b    前进后退</p>\n<p>ctrl + p    上一条命令</p>\n<p>ctrl + r    搜索命令历史</p>\n"},{"title":"https_harbor 搭建","date":"2019-06-25T10:19:53.000Z","_content":"```\nopenssl genrsa -out ca.key 4096\nopenssl req -x509 -new -nodes -sha512 -days 3650 \\\n    -subj \"/C=TW/ST=Taipei/L=Taipei/O=example/OU=Personal/CN=yourdomain.com\" \\\n    -key ca.key \\\n    -out ca.crt\nopenssl genrsa -out yourdomain.com.key 4096\n\nopenssl req -sha512 -new \\\n    -subj \"/C=TW/ST=Taipei/L=Taipei/O=example/OU=Personal/CN=yourdomain.com\" \\\n    -key yourdomain.com.key \\\n    -out yourdomain.com.csr\ncat > v3.ext <<-EOF\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1=yourdomain.com\nDNS.2=yourdomain\nDNS.3=https-harbor\nDNS.4=10.0.0.88\nEOF\nopenssl x509 -req -sha512 -days 3650 \\\n    -extfile v3.ext \\\n    -CA ca.crt -CAkey ca.key -CAcreateserial \\\n    -in yourdomain.com.csr \\\n    -out yourdomain.com.crt\n\nmkdir -p /data/cert/\ncp yourdomain.com.crt /data/cert/\ncp yourdomain.com.key /data/cert/\n\nopenssl x509 -inform PEM -in yourdomain.com.crt -out yourdomain.com.cert\n\nmkdir -p /etc/docker/certs.d/yourdomain.com/\ncp yourdomain.com.cert /etc/docker/certs.d/yourdomain.com/\ncp yourdomain.com.key /etc/docker/certs.d/yourdomain.com/\ncp ca.crt /etc/docker/certs.d/yourdomain.com/\n```\n\n#### 参考：https://github.com/goharbor/harbor/blob/master/docs/configure_https.md","source":"_posts/https-harbor.md","raw":"---\ntitle: https_harbor 搭建\ndate: 2019-06-25 18:19:53\ntags: [harbor,docker]\n---\n```\nopenssl genrsa -out ca.key 4096\nopenssl req -x509 -new -nodes -sha512 -days 3650 \\\n    -subj \"/C=TW/ST=Taipei/L=Taipei/O=example/OU=Personal/CN=yourdomain.com\" \\\n    -key ca.key \\\n    -out ca.crt\nopenssl genrsa -out yourdomain.com.key 4096\n\nopenssl req -sha512 -new \\\n    -subj \"/C=TW/ST=Taipei/L=Taipei/O=example/OU=Personal/CN=yourdomain.com\" \\\n    -key yourdomain.com.key \\\n    -out yourdomain.com.csr\ncat > v3.ext <<-EOF\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1=yourdomain.com\nDNS.2=yourdomain\nDNS.3=https-harbor\nDNS.4=10.0.0.88\nEOF\nopenssl x509 -req -sha512 -days 3650 \\\n    -extfile v3.ext \\\n    -CA ca.crt -CAkey ca.key -CAcreateserial \\\n    -in yourdomain.com.csr \\\n    -out yourdomain.com.crt\n\nmkdir -p /data/cert/\ncp yourdomain.com.crt /data/cert/\ncp yourdomain.com.key /data/cert/\n\nopenssl x509 -inform PEM -in yourdomain.com.crt -out yourdomain.com.cert\n\nmkdir -p /etc/docker/certs.d/yourdomain.com/\ncp yourdomain.com.cert /etc/docker/certs.d/yourdomain.com/\ncp yourdomain.com.key /etc/docker/certs.d/yourdomain.com/\ncp ca.crt /etc/docker/certs.d/yourdomain.com/\n```\n\n#### 参考：https://github.com/goharbor/harbor/blob/master/docs/configure_https.md","slug":"https-harbor","published":1,"updated":"2019-07-02T12:50:36.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kge000ogkxrwdznae55","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 4096</span><br><span class=\"line\">openssl req -x509 -new -nodes -sha512 -days 3650 \\</span><br><span class=\"line\">    -subj &quot;/C=TW/ST=Taipei/L=Taipei/O=example/OU=Personal/CN=yourdomain.com&quot; \\</span><br><span class=\"line\">    -key ca.key \\</span><br><span class=\"line\">    -out ca.crt</span><br><span class=\"line\">openssl genrsa -out yourdomain.com.key 4096</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -sha512 -new \\</span><br><span class=\"line\">    -subj &quot;/C=TW/ST=Taipei/L=Taipei/O=example/OU=Personal/CN=yourdomain.com&quot; \\</span><br><span class=\"line\">    -key yourdomain.com.key \\</span><br><span class=\"line\">    -out yourdomain.com.csr</span><br><span class=\"line\">cat &gt; v3.ext &lt;&lt;-EOF</span><br><span class=\"line\">authorityKeyIdentifier=keyid,issuer</span><br><span class=\"line\">basicConstraints=CA:FALSE</span><br><span class=\"line\">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class=\"line\">extendedKeyUsage = serverAuth</span><br><span class=\"line\">subjectAltName = @alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1=yourdomain.com</span><br><span class=\"line\">DNS.2=yourdomain</span><br><span class=\"line\">DNS.3=https-harbor</span><br><span class=\"line\">DNS.4=10.0.0.88</span><br><span class=\"line\">EOF</span><br><span class=\"line\">openssl x509 -req -sha512 -days 3650 \\</span><br><span class=\"line\">    -extfile v3.ext \\</span><br><span class=\"line\">    -CA ca.crt -CAkey ca.key -CAcreateserial \\</span><br><span class=\"line\">    -in yourdomain.com.csr \\</span><br><span class=\"line\">    -out yourdomain.com.crt</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /data/cert/</span><br><span class=\"line\">cp yourdomain.com.crt /data/cert/</span><br><span class=\"line\">cp yourdomain.com.key /data/cert/</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -inform PEM -in yourdomain.com.crt -out yourdomain.com.cert</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /etc/docker/certs.d/yourdomain.com/</span><br><span class=\"line\">cp yourdomain.com.cert /etc/docker/certs.d/yourdomain.com/</span><br><span class=\"line\">cp yourdomain.com.key /etc/docker/certs.d/yourdomain.com/</span><br><span class=\"line\">cp ca.crt /etc/docker/certs.d/yourdomain.com/</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考：https-github-com-goharbor-harbor-blob-master-docs-configure-https-md\"><a href=\"#参考：https-github-com-goharbor-harbor-blob-master-docs-configure-https-md\" class=\"headerlink\" title=\"参考：https://github.com/goharbor/harbor/blob/master/docs/configure_https.md\"></a>参考：<a href=\"https://github.com/goharbor/harbor/blob/master/docs/configure_https.md\" target=\"_blank\" rel=\"noopener\">https://github.com/goharbor/harbor/blob/master/docs/configure_https.md</a></h4>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 4096</span><br><span class=\"line\">openssl req -x509 -new -nodes -sha512 -days 3650 \\</span><br><span class=\"line\">    -subj &quot;/C=TW/ST=Taipei/L=Taipei/O=example/OU=Personal/CN=yourdomain.com&quot; \\</span><br><span class=\"line\">    -key ca.key \\</span><br><span class=\"line\">    -out ca.crt</span><br><span class=\"line\">openssl genrsa -out yourdomain.com.key 4096</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -sha512 -new \\</span><br><span class=\"line\">    -subj &quot;/C=TW/ST=Taipei/L=Taipei/O=example/OU=Personal/CN=yourdomain.com&quot; \\</span><br><span class=\"line\">    -key yourdomain.com.key \\</span><br><span class=\"line\">    -out yourdomain.com.csr</span><br><span class=\"line\">cat &gt; v3.ext &lt;&lt;-EOF</span><br><span class=\"line\">authorityKeyIdentifier=keyid,issuer</span><br><span class=\"line\">basicConstraints=CA:FALSE</span><br><span class=\"line\">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class=\"line\">extendedKeyUsage = serverAuth</span><br><span class=\"line\">subjectAltName = @alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1=yourdomain.com</span><br><span class=\"line\">DNS.2=yourdomain</span><br><span class=\"line\">DNS.3=https-harbor</span><br><span class=\"line\">DNS.4=10.0.0.88</span><br><span class=\"line\">EOF</span><br><span class=\"line\">openssl x509 -req -sha512 -days 3650 \\</span><br><span class=\"line\">    -extfile v3.ext \\</span><br><span class=\"line\">    -CA ca.crt -CAkey ca.key -CAcreateserial \\</span><br><span class=\"line\">    -in yourdomain.com.csr \\</span><br><span class=\"line\">    -out yourdomain.com.crt</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /data/cert/</span><br><span class=\"line\">cp yourdomain.com.crt /data/cert/</span><br><span class=\"line\">cp yourdomain.com.key /data/cert/</span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -inform PEM -in yourdomain.com.crt -out yourdomain.com.cert</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /etc/docker/certs.d/yourdomain.com/</span><br><span class=\"line\">cp yourdomain.com.cert /etc/docker/certs.d/yourdomain.com/</span><br><span class=\"line\">cp yourdomain.com.key /etc/docker/certs.d/yourdomain.com/</span><br><span class=\"line\">cp ca.crt /etc/docker/certs.d/yourdomain.com/</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考：https-github-com-goharbor-harbor-blob-master-docs-configure-https-md\"><a href=\"#参考：https-github-com-goharbor-harbor-blob-master-docs-configure-https-md\" class=\"headerlink\" title=\"参考：https://github.com/goharbor/harbor/blob/master/docs/configure_https.md\"></a>参考：<a href=\"https://github.com/goharbor/harbor/blob/master/docs/configure_https.md\" target=\"_blank\" rel=\"noopener\">https://github.com/goharbor/harbor/blob/master/docs/configure_https.md</a></h4>"},{"title":"使用kubeam install kubernets v1.15.0 实现master高可用","date":"2019-06-25T10:27:03.000Z","_content":"确保每台node都安装了 docker\n参考：https://docs.docker.com/install/linux/docker-ce/centos/\n\n## kubeadm-config.yaml\n```\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: 1.15.0\ncontrolPlaneEndpoint: \"10.0.0.101:8443\"  # haproxy host\nimageRepository: registry.aliyuncs.com/google_containers\nnetworking:\n  podSubnet: 10.148.0.0/16\n  serviceSubnet: 10.196.0.0/12\n```\n## haproxy.cfg\n```\ndocker run -d --net host  --name haproxy -v $(pwd)/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg haproxy:2.0\n```\n```\nglobal\n    maxconn 10000                   #默认最大连接数\n    log 127.0.0.1 local0            #[err warning info debug]\n    chroot /usr/local/sbin            #chroot运行的路径\n    daemon                          #以后台形式运行haproxy\n    pidfile /var/run/haproxy.pid\n\ndefaults\n    log 127.0.0.1 local3\n    mode http                       #所处理的类别 (#7层 http;4层tcp  )\n    maxconn 10000                   #最大连接数\n    option dontlognull              #不记录健康检查的日志信息\n    option redispatch               #serverId对应的服务器挂掉后,强制定向到其他健康的服务器\n    #stats refresh 30                #统计页面刷新间隔\n    retries 3                       #3次连接失败就认为服务不可用，也可以通过后面设置\n    balance roundrobin              #默认的负载均衡的方式,轮询方式\n    #balance source                  #默认的负载均衡的方式,类似nginx的ip_hash\n    #balance leastconn               #默认的负载均衡的方式,最小连接\n    timeout connect 5000                 #连接超时\n    timeout client 50000                #客户端超时\n    timeout server 50000                #服务器超时\n    timeout check 2000              #心跳检测超时\n\nlisten  admin_stats\n    bind 0.0.0.0:10080\n    mode http\n    log 127.0.0.1 local0 err\n    stats refresh 30s\n    stats uri /status\n    stats realm welcome login\\ Haproxy\n    stats auth admin:123456\n    stats hide-version\n    stats admin if TRUE\n\nlisten kube-master\n    bind 0.0.0.0:8443\n    mode tcp\n    option tcplog\n    balance source\n    server 10.0.0.106 10.0.0.106:6443 check inter 2000 fall 2 rise 2 weight 1\n    server 10.0.0.102 10.0.0.102:6443 check inter 2000 fall 2 rise 2 weight 1\n    server 10.0.0.101 10.0.0.101:6443 check inter 2000 fall 2 rise 2 weight 1\n```\n\n 在每台node上执行，kubectl 建议只在在master 安装\n```\ncat <<EOF >  /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system\nsetenforce 0\nswapoff -a\nsed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n# 安装\nyum install -y kubectl kubelet kubeadm\n# 开机启动\nsystemctl enable kubelet\n# 启动\nsystemctl start kubelet\n\n```\n初始化第一套集群,完成之后按照提示 cp /etc/kubernetes/admin.conf ~/.kube/config\n```\nkubeadm init --config=kubeadm-config.yaml --upload-certs -v=10\n```\n\n## 安装flannel网络\n```\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml\n```\n\n## 添加master 节点\n```\n如果忘了--certificate-key 值就用这个命令去master 生成一个\nkubeadm init phase upload-certs --experimental-upload-certs\n```\n```\nkubeadm join 10.0.0.101:8443 --token u20jmk.7cnbp7soe1e7vr4l \\\n    --discovery-token-ca-cert-hash sha256:3a5206c743a9369c2386db8bf181b78765862c4eb9caf12e332b6868db20633a \\\n    --experimental-control-plane --certificate-key 4af91f16c3997bc59a56cfc0e3061f6086c62012f4e7e4ed9da84b4622fc9d89\n```\n\n## 添加worker 节点\n```\nkubeadm join 10.0.0.101:8443 --token u20jmk.7cnbp7soe1e7vr4l \\\n    --discovery-token-ca-cert-hash sha256:3a5206c743a9369c2386db8bf181b78765862c4eb9caf12e332b6868db20633a \n\n可以print一个 join cluster command\nkubeadm  token create --print-join-command \n```\n\n## 其他命令\n```\nkubeadm reset  //重置node\n```\n参考：https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/","source":"_posts/kubeadm.md","raw":"---\ntitle: 使用kubeam install kubernets v1.15.0 实现master高可用\ndate: 2019-06-25 18:27:03\ntags:\n---\n确保每台node都安装了 docker\n参考：https://docs.docker.com/install/linux/docker-ce/centos/\n\n## kubeadm-config.yaml\n```\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: 1.15.0\ncontrolPlaneEndpoint: \"10.0.0.101:8443\"  # haproxy host\nimageRepository: registry.aliyuncs.com/google_containers\nnetworking:\n  podSubnet: 10.148.0.0/16\n  serviceSubnet: 10.196.0.0/12\n```\n## haproxy.cfg\n```\ndocker run -d --net host  --name haproxy -v $(pwd)/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg haproxy:2.0\n```\n```\nglobal\n    maxconn 10000                   #默认最大连接数\n    log 127.0.0.1 local0            #[err warning info debug]\n    chroot /usr/local/sbin            #chroot运行的路径\n    daemon                          #以后台形式运行haproxy\n    pidfile /var/run/haproxy.pid\n\ndefaults\n    log 127.0.0.1 local3\n    mode http                       #所处理的类别 (#7层 http;4层tcp  )\n    maxconn 10000                   #最大连接数\n    option dontlognull              #不记录健康检查的日志信息\n    option redispatch               #serverId对应的服务器挂掉后,强制定向到其他健康的服务器\n    #stats refresh 30                #统计页面刷新间隔\n    retries 3                       #3次连接失败就认为服务不可用，也可以通过后面设置\n    balance roundrobin              #默认的负载均衡的方式,轮询方式\n    #balance source                  #默认的负载均衡的方式,类似nginx的ip_hash\n    #balance leastconn               #默认的负载均衡的方式,最小连接\n    timeout connect 5000                 #连接超时\n    timeout client 50000                #客户端超时\n    timeout server 50000                #服务器超时\n    timeout check 2000              #心跳检测超时\n\nlisten  admin_stats\n    bind 0.0.0.0:10080\n    mode http\n    log 127.0.0.1 local0 err\n    stats refresh 30s\n    stats uri /status\n    stats realm welcome login\\ Haproxy\n    stats auth admin:123456\n    stats hide-version\n    stats admin if TRUE\n\nlisten kube-master\n    bind 0.0.0.0:8443\n    mode tcp\n    option tcplog\n    balance source\n    server 10.0.0.106 10.0.0.106:6443 check inter 2000 fall 2 rise 2 weight 1\n    server 10.0.0.102 10.0.0.102:6443 check inter 2000 fall 2 rise 2 weight 1\n    server 10.0.0.101 10.0.0.101:6443 check inter 2000 fall 2 rise 2 weight 1\n```\n\n 在每台node上执行，kubectl 建议只在在master 安装\n```\ncat <<EOF >  /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system\nsetenforce 0\nswapoff -a\nsed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n# 安装\nyum install -y kubectl kubelet kubeadm\n# 开机启动\nsystemctl enable kubelet\n# 启动\nsystemctl start kubelet\n\n```\n初始化第一套集群,完成之后按照提示 cp /etc/kubernetes/admin.conf ~/.kube/config\n```\nkubeadm init --config=kubeadm-config.yaml --upload-certs -v=10\n```\n\n## 安装flannel网络\n```\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml\n```\n\n## 添加master 节点\n```\n如果忘了--certificate-key 值就用这个命令去master 生成一个\nkubeadm init phase upload-certs --experimental-upload-certs\n```\n```\nkubeadm join 10.0.0.101:8443 --token u20jmk.7cnbp7soe1e7vr4l \\\n    --discovery-token-ca-cert-hash sha256:3a5206c743a9369c2386db8bf181b78765862c4eb9caf12e332b6868db20633a \\\n    --experimental-control-plane --certificate-key 4af91f16c3997bc59a56cfc0e3061f6086c62012f4e7e4ed9da84b4622fc9d89\n```\n\n## 添加worker 节点\n```\nkubeadm join 10.0.0.101:8443 --token u20jmk.7cnbp7soe1e7vr4l \\\n    --discovery-token-ca-cert-hash sha256:3a5206c743a9369c2386db8bf181b78765862c4eb9caf12e332b6868db20633a \n\n可以print一个 join cluster command\nkubeadm  token create --print-join-command \n```\n\n## 其他命令\n```\nkubeadm reset  //重置node\n```\n参考：https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/","slug":"kubeadm","published":1,"updated":"2019-06-28T08:52:09.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgf000qgkxr0rl9ty41","content":"<p>确保每台node都安装了 docker<br>参考：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>\n<h2 id=\"kubeadm-config-yaml\"><a href=\"#kubeadm-config-yaml\" class=\"headerlink\" title=\"kubeadm-config.yaml\"></a>kubeadm-config.yaml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: 1.15.0</span><br><span class=\"line\">controlPlaneEndpoint: &quot;10.0.0.101:8443&quot;  # haproxy host</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  podSubnet: 10.148.0.0/16</span><br><span class=\"line\">  serviceSubnet: 10.196.0.0/12</span><br></pre></td></tr></table></figure>\n<h2 id=\"haproxy-cfg\"><a href=\"#haproxy-cfg\" class=\"headerlink\" title=\"haproxy.cfg\"></a>haproxy.cfg</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --net host  --name haproxy -v $(pwd)/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg haproxy:2.0</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global</span><br><span class=\"line\">    maxconn 10000                   #默认最大连接数</span><br><span class=\"line\">    log 127.0.0.1 local0            #[err warning info debug]</span><br><span class=\"line\">    chroot /usr/local/sbin            #chroot运行的路径</span><br><span class=\"line\">    daemon                          #以后台形式运行haproxy</span><br><span class=\"line\">    pidfile /var/run/haproxy.pid</span><br><span class=\"line\"></span><br><span class=\"line\">defaults</span><br><span class=\"line\">    log 127.0.0.1 local3</span><br><span class=\"line\">    mode http                       #所处理的类别 (#7层 http;4层tcp  )</span><br><span class=\"line\">    maxconn 10000                   #最大连接数</span><br><span class=\"line\">    option dontlognull              #不记录健康检查的日志信息</span><br><span class=\"line\">    option redispatch               #serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span><br><span class=\"line\">    #stats refresh 30                #统计页面刷新间隔</span><br><span class=\"line\">    retries 3                       #3次连接失败就认为服务不可用，也可以通过后面设置</span><br><span class=\"line\">    balance roundrobin              #默认的负载均衡的方式,轮询方式</span><br><span class=\"line\">    #balance source                  #默认的负载均衡的方式,类似nginx的ip_hash</span><br><span class=\"line\">    #balance leastconn               #默认的负载均衡的方式,最小连接</span><br><span class=\"line\">    timeout connect 5000                 #连接超时</span><br><span class=\"line\">    timeout client 50000                #客户端超时</span><br><span class=\"line\">    timeout server 50000                #服务器超时</span><br><span class=\"line\">    timeout check 2000              #心跳检测超时</span><br><span class=\"line\"></span><br><span class=\"line\">listen  admin_stats</span><br><span class=\"line\">    bind 0.0.0.0:10080</span><br><span class=\"line\">    mode http</span><br><span class=\"line\">    log 127.0.0.1 local0 err</span><br><span class=\"line\">    stats refresh 30s</span><br><span class=\"line\">    stats uri /status</span><br><span class=\"line\">    stats realm welcome login\\ Haproxy</span><br><span class=\"line\">    stats auth admin:123456</span><br><span class=\"line\">    stats hide-version</span><br><span class=\"line\">    stats admin if TRUE</span><br><span class=\"line\"></span><br><span class=\"line\">listen kube-master</span><br><span class=\"line\">    bind 0.0.0.0:8443</span><br><span class=\"line\">    mode tcp</span><br><span class=\"line\">    option tcplog</span><br><span class=\"line\">    balance source</span><br><span class=\"line\">    server 10.0.0.106 10.0.0.106:6443 check inter 2000 fall 2 rise 2 weight 1</span><br><span class=\"line\">    server 10.0.0.102 10.0.0.102:6443 check inter 2000 fall 2 rise 2 weight 1</span><br><span class=\"line\">    server 10.0.0.101 10.0.0.101:6443 check inter 2000 fall 2 rise 2 weight 1</span><br></pre></td></tr></table></figure>\n<p> 在每台node上执行，kubectl 建议只在在master 安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sysctl --system</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">sed -i &apos;s/^SELINUX=enforcing$/SELINUX=permissive/&apos; /etc/selinux/config</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"># 安装</span><br><span class=\"line\">yum install -y kubectl kubelet kubeadm</span><br><span class=\"line\"># 开机启动</span><br><span class=\"line\">systemctl enable kubelet</span><br><span class=\"line\"># 启动</span><br><span class=\"line\">systemctl start kubelet</span><br></pre></td></tr></table></figure></p>\n<p>初始化第一套集群,完成之后按照提示 cp /etc/kubernetes/admin.conf ~/.kube/config<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs -v=10</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装flannel网络\"><a href=\"#安装flannel网络\" class=\"headerlink\" title=\"安装flannel网络\"></a>安装flannel网络</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加master-节点\"><a href=\"#添加master-节点\" class=\"headerlink\" title=\"添加master 节点\"></a>添加master 节点</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果忘了--certificate-key 值就用这个命令去master 生成一个</span><br><span class=\"line\">kubeadm init phase upload-certs --experimental-upload-certs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.0.0.101:8443 --token u20jmk.7cnbp7soe1e7vr4l \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:3a5206c743a9369c2386db8bf181b78765862c4eb9caf12e332b6868db20633a \\</span><br><span class=\"line\">    --experimental-control-plane --certificate-key 4af91f16c3997bc59a56cfc0e3061f6086c62012f4e7e4ed9da84b4622fc9d89</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加worker-节点\"><a href=\"#添加worker-节点\" class=\"headerlink\" title=\"添加worker 节点\"></a>添加worker 节点</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.0.0.101:8443 --token u20jmk.7cnbp7soe1e7vr4l \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:3a5206c743a9369c2386db8bf181b78765862c4eb9caf12e332b6868db20633a </span><br><span class=\"line\"></span><br><span class=\"line\">可以print一个 join cluster command</span><br><span class=\"line\">kubeadm  token create --print-join-command</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm reset  //重置node</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>确保每台node都安装了 docker<br>参考：<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>\n<h2 id=\"kubeadm-config-yaml\"><a href=\"#kubeadm-config-yaml\" class=\"headerlink\" title=\"kubeadm-config.yaml\"></a>kubeadm-config.yaml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: 1.15.0</span><br><span class=\"line\">controlPlaneEndpoint: &quot;10.0.0.101:8443&quot;  # haproxy host</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  podSubnet: 10.148.0.0/16</span><br><span class=\"line\">  serviceSubnet: 10.196.0.0/12</span><br></pre></td></tr></table></figure>\n<h2 id=\"haproxy-cfg\"><a href=\"#haproxy-cfg\" class=\"headerlink\" title=\"haproxy.cfg\"></a>haproxy.cfg</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --net host  --name haproxy -v $(pwd)/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg haproxy:2.0</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global</span><br><span class=\"line\">    maxconn 10000                   #默认最大连接数</span><br><span class=\"line\">    log 127.0.0.1 local0            #[err warning info debug]</span><br><span class=\"line\">    chroot /usr/local/sbin            #chroot运行的路径</span><br><span class=\"line\">    daemon                          #以后台形式运行haproxy</span><br><span class=\"line\">    pidfile /var/run/haproxy.pid</span><br><span class=\"line\"></span><br><span class=\"line\">defaults</span><br><span class=\"line\">    log 127.0.0.1 local3</span><br><span class=\"line\">    mode http                       #所处理的类别 (#7层 http;4层tcp  )</span><br><span class=\"line\">    maxconn 10000                   #最大连接数</span><br><span class=\"line\">    option dontlognull              #不记录健康检查的日志信息</span><br><span class=\"line\">    option redispatch               #serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span><br><span class=\"line\">    #stats refresh 30                #统计页面刷新间隔</span><br><span class=\"line\">    retries 3                       #3次连接失败就认为服务不可用，也可以通过后面设置</span><br><span class=\"line\">    balance roundrobin              #默认的负载均衡的方式,轮询方式</span><br><span class=\"line\">    #balance source                  #默认的负载均衡的方式,类似nginx的ip_hash</span><br><span class=\"line\">    #balance leastconn               #默认的负载均衡的方式,最小连接</span><br><span class=\"line\">    timeout connect 5000                 #连接超时</span><br><span class=\"line\">    timeout client 50000                #客户端超时</span><br><span class=\"line\">    timeout server 50000                #服务器超时</span><br><span class=\"line\">    timeout check 2000              #心跳检测超时</span><br><span class=\"line\"></span><br><span class=\"line\">listen  admin_stats</span><br><span class=\"line\">    bind 0.0.0.0:10080</span><br><span class=\"line\">    mode http</span><br><span class=\"line\">    log 127.0.0.1 local0 err</span><br><span class=\"line\">    stats refresh 30s</span><br><span class=\"line\">    stats uri /status</span><br><span class=\"line\">    stats realm welcome login\\ Haproxy</span><br><span class=\"line\">    stats auth admin:123456</span><br><span class=\"line\">    stats hide-version</span><br><span class=\"line\">    stats admin if TRUE</span><br><span class=\"line\"></span><br><span class=\"line\">listen kube-master</span><br><span class=\"line\">    bind 0.0.0.0:8443</span><br><span class=\"line\">    mode tcp</span><br><span class=\"line\">    option tcplog</span><br><span class=\"line\">    balance source</span><br><span class=\"line\">    server 10.0.0.106 10.0.0.106:6443 check inter 2000 fall 2 rise 2 weight 1</span><br><span class=\"line\">    server 10.0.0.102 10.0.0.102:6443 check inter 2000 fall 2 rise 2 weight 1</span><br><span class=\"line\">    server 10.0.0.101 10.0.0.101:6443 check inter 2000 fall 2 rise 2 weight 1</span><br></pre></td></tr></table></figure>\n<p> 在每台node上执行，kubectl 建议只在在master 安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sysctl --system</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">sed -i &apos;s/^SELINUX=enforcing$/SELINUX=permissive/&apos; /etc/selinux/config</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"># 安装</span><br><span class=\"line\">yum install -y kubectl kubelet kubeadm</span><br><span class=\"line\"># 开机启动</span><br><span class=\"line\">systemctl enable kubelet</span><br><span class=\"line\"># 启动</span><br><span class=\"line\">systemctl start kubelet</span><br></pre></td></tr></table></figure></p>\n<p>初始化第一套集群,完成之后按照提示 cp /etc/kubernetes/admin.conf ~/.kube/config<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs -v=10</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装flannel网络\"><a href=\"#安装flannel网络\" class=\"headerlink\" title=\"安装flannel网络\"></a>安装flannel网络</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加master-节点\"><a href=\"#添加master-节点\" class=\"headerlink\" title=\"添加master 节点\"></a>添加master 节点</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果忘了--certificate-key 值就用这个命令去master 生成一个</span><br><span class=\"line\">kubeadm init phase upload-certs --experimental-upload-certs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.0.0.101:8443 --token u20jmk.7cnbp7soe1e7vr4l \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:3a5206c743a9369c2386db8bf181b78765862c4eb9caf12e332b6868db20633a \\</span><br><span class=\"line\">    --experimental-control-plane --certificate-key 4af91f16c3997bc59a56cfc0e3061f6086c62012f4e7e4ed9da84b4622fc9d89</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加worker-节点\"><a href=\"#添加worker-节点\" class=\"headerlink\" title=\"添加worker 节点\"></a>添加worker 节点</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.0.0.101:8443 --token u20jmk.7cnbp7soe1e7vr4l \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:3a5206c743a9369c2386db8bf181b78765862c4eb9caf12e332b6868db20633a </span><br><span class=\"line\"></span><br><span class=\"line\">可以print一个 join cluster command</span><br><span class=\"line\">kubeadm  token create --print-join-command</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm reset  //重置node</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/</a></p>\n"},{"title":"kubernetes","date":"2019-03-27T14:12:04.000Z","_content":"```\n\ncat <<EOF >  /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system\nsetenforce 0\nswapoff -a\nsed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n# 安装\nyum install -y kubectl kubelet kubeadm\n# 开机启动\nsystemctl enable kubelet\n# 启动\nsystemctl start kubelet\n\n\n\nkubeadm init --kubernetes-version=1.15.0 --apiserver-advertise-address=10.0.0.101 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 -v=10\n\nhttps://www.jianshu.com/p/b58c85436f0a\n\nkubeadm init --kubernetes-version=1.15.0 --apiserver-advertise-address=10.0.0.106 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 -v=10\n\ninstall cni\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml\n\n\n```\n```\npod 优先级调度\n参考：\nhttps://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/\n```\nPriorityClass\n\ncrd\nhttps://sq.163yun.com/blog/article/174980128954048512\n\n\n```\nKubernetes 1.8开始要求关闭系统的Swap，如果不关闭，默认配置下kubelet将无法启动。可以通过kubelet的启动参数--fail-swap-on=false更改这个限制。\n\n全局关闭：\n关闭系统的Swap方法如下:\n\nswapoff -a\n  \n修改 /etc/fstab 文件，注释掉 SWAP 的自动挂载，使用free -m确认swap已经关闭。 > swappiness参数调整，修改/etc/sysctl.d/k8s.conf添加下面一行：\n\nvm.swappiness=0\n  \n执行sysctl -p /etc/sysctl.d/k8s.conf使修改生效。\n```\n\n\n\netcdctl --endpoints=https://[127.0.0.1]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt --key=/etc/kubernetes/pki/etcd/healthcheck-client.key get foo\n\n\n\nexport HOST0=10.0.0.106\nexport HOST1=10.0.0.101\nexport HOST2=10.0.0.108\n\nmkdir -p /tmp/${HOST0}/ /tmp/${HOST1}/ /tmp/${HOST2}/\n\nETCDHOSTS=(${HOST0} ${HOST1} ${HOST2})\nNAMES=(\"infra0\" \"infra1\" \"infra2\")\n\nfor i in \"${!ETCDHOSTS[@]}\"; do\nHOST=${ETCDHOSTS[$i]}\nNAME=${NAMES[$i]}\ncat << EOF > /tmp/${HOST}/kubeadmcfg.yaml\napiVersion: \"kubeadm.k8s.io/v1beta2\"\nkind: ClusterConfiguration\netcd:\n    local:\n        serverCertSANs:\n        - \"${HOST}\"\n        peerCertSANs:\n        - \"${HOST}\"\n        extraArgs:\n            initial-cluster: ${NAMES[0]}=https://${ETCDHOSTS[0]}:2380,${NAMES[1]}=https://${ETCDHOSTS[1]}:2380,${NAMES[2]}=https://${ETCDHOSTS[2]}:2380\n            initial-cluster-state: new\n            name: ${NAME}\n            listen-peer-urls: https://${HOST}:2380\n            listen-client-urls: https://${HOST}:2379\n            advertise-client-urls: https://${HOST}:2379\n            initial-advertise-peer-urls: https://${HOST}:2380\nEOF\ndone","source":"_posts/kubernetes.md","raw":"---\ntitle: kubernetes\ndate: 2019-03-27 22:12:04\ntags:\n---\n```\n\ncat <<EOF >  /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system\nsetenforce 0\nswapoff -a\nsed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n# 安装\nyum install -y kubectl kubelet kubeadm\n# 开机启动\nsystemctl enable kubelet\n# 启动\nsystemctl start kubelet\n\n\n\nkubeadm init --kubernetes-version=1.15.0 --apiserver-advertise-address=10.0.0.101 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 -v=10\n\nhttps://www.jianshu.com/p/b58c85436f0a\n\nkubeadm init --kubernetes-version=1.15.0 --apiserver-advertise-address=10.0.0.106 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 -v=10\n\ninstall cni\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml\n\n\n```\n```\npod 优先级调度\n参考：\nhttps://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/\n```\nPriorityClass\n\ncrd\nhttps://sq.163yun.com/blog/article/174980128954048512\n\n\n```\nKubernetes 1.8开始要求关闭系统的Swap，如果不关闭，默认配置下kubelet将无法启动。可以通过kubelet的启动参数--fail-swap-on=false更改这个限制。\n\n全局关闭：\n关闭系统的Swap方法如下:\n\nswapoff -a\n  \n修改 /etc/fstab 文件，注释掉 SWAP 的自动挂载，使用free -m确认swap已经关闭。 > swappiness参数调整，修改/etc/sysctl.d/k8s.conf添加下面一行：\n\nvm.swappiness=0\n  \n执行sysctl -p /etc/sysctl.d/k8s.conf使修改生效。\n```\n\n\n\netcdctl --endpoints=https://[127.0.0.1]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt --key=/etc/kubernetes/pki/etcd/healthcheck-client.key get foo\n\n\n\nexport HOST0=10.0.0.106\nexport HOST1=10.0.0.101\nexport HOST2=10.0.0.108\n\nmkdir -p /tmp/${HOST0}/ /tmp/${HOST1}/ /tmp/${HOST2}/\n\nETCDHOSTS=(${HOST0} ${HOST1} ${HOST2})\nNAMES=(\"infra0\" \"infra1\" \"infra2\")\n\nfor i in \"${!ETCDHOSTS[@]}\"; do\nHOST=${ETCDHOSTS[$i]}\nNAME=${NAMES[$i]}\ncat << EOF > /tmp/${HOST}/kubeadmcfg.yaml\napiVersion: \"kubeadm.k8s.io/v1beta2\"\nkind: ClusterConfiguration\netcd:\n    local:\n        serverCertSANs:\n        - \"${HOST}\"\n        peerCertSANs:\n        - \"${HOST}\"\n        extraArgs:\n            initial-cluster: ${NAMES[0]}=https://${ETCDHOSTS[0]}:2380,${NAMES[1]}=https://${ETCDHOSTS[1]}:2380,${NAMES[2]}=https://${ETCDHOSTS[2]}:2380\n            initial-cluster-state: new\n            name: ${NAME}\n            listen-peer-urls: https://${HOST}:2380\n            listen-client-urls: https://${HOST}:2379\n            advertise-client-urls: https://${HOST}:2379\n            initial-advertise-peer-urls: https://${HOST}:2380\nEOF\ndone","slug":"kubernetes","published":1,"updated":"2019-06-25T02:27:04.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgg000sgkxr9eg4jkbb","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sysctl --system</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">sed -i &apos;s/^SELINUX=enforcing$/SELINUX=permissive/&apos; /etc/selinux/config</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"># 安装</span><br><span class=\"line\">yum install -y kubectl kubelet kubeadm</span><br><span class=\"line\"># 开机启动</span><br><span class=\"line\">systemctl enable kubelet</span><br><span class=\"line\"># 启动</span><br><span class=\"line\">systemctl start kubelet</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm init --kubernetes-version=1.15.0 --apiserver-advertise-address=10.0.0.101 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 -v=10</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.jianshu.com/p/b58c85436f0a</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm init --kubernetes-version=1.15.0 --apiserver-advertise-address=10.0.0.106 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 -v=10</span><br><span class=\"line\"></span><br><span class=\"line\">install cni</span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod 优先级调度</span><br><span class=\"line\">参考：</span><br><span class=\"line\">https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/</span><br></pre></td></tr></table></figure>\n<p>PriorityClass</p>\n<p>crd<br><a href=\"https://sq.163yun.com/blog/article/174980128954048512\" target=\"_blank\" rel=\"noopener\">https://sq.163yun.com/blog/article/174980128954048512</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Kubernetes 1.8开始要求关闭系统的Swap，如果不关闭，默认配置下kubelet将无法启动。可以通过kubelet的启动参数--fail-swap-on=false更改这个限制。</span><br><span class=\"line\"></span><br><span class=\"line\">全局关闭：</span><br><span class=\"line\">关闭系统的Swap方法如下:</span><br><span class=\"line\"></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">  </span><br><span class=\"line\">修改 /etc/fstab 文件，注释掉 SWAP 的自动挂载，使用free -m确认swap已经关闭。 &gt; swappiness参数调整，修改/etc/sysctl.d/k8s.conf添加下面一行：</span><br><span class=\"line\"></span><br><span class=\"line\">vm.swappiness=0</span><br><span class=\"line\">  </span><br><span class=\"line\">执行sysctl -p /etc/sysctl.d/k8s.conf使修改生效。</span><br></pre></td></tr></table></figure>\n<p>etcdctl –endpoints=https://[127.0.0.1]:2379 –cacert=/etc/kubernetes/pki/etcd/ca.crt –cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt –key=/etc/kubernetes/pki/etcd/healthcheck-client.key get foo</p>\n<p>export HOST0=10.0.0.106<br>export HOST1=10.0.0.101<br>export HOST2=10.0.0.108</p>\n<p>mkdir -p /tmp/${HOST0}/ /tmp/${HOST1}/ /tmp/${HOST2}/</p>\n<p>ETCDHOSTS=(${HOST0} ${HOST1} ${HOST2})<br>NAMES=(“infra0” “infra1” “infra2”)</p>\n<p>for i in “${!ETCDHOSTS[@]}”; do<br>HOST=${ETCDHOSTS[$i]}<br>NAME=${NAMES[$i]}<br>cat &lt;&lt; EOF &gt; /tmp/${HOST}/kubeadmcfg.yaml<br>apiVersion: “kubeadm.k8s.io/v1beta2”<br>kind: ClusterConfiguration<br>etcd:<br>    local:<br>        serverCertSANs:</p>\n<pre><code>- &quot;${HOST}&quot;\npeerCertSANs:\n- &quot;${HOST}&quot;\nextraArgs:\n    initial-cluster: ${NAMES[0]}=https://${ETCDHOSTS[0]}:2380,${NAMES[1]}=https://${ETCDHOSTS[1]}:2380,${NAMES[2]}=https://${ETCDHOSTS[2]}:2380\n    initial-cluster-state: new\n    name: ${NAME}\n    listen-peer-urls: https://${HOST}:2380\n    listen-client-urls: https://${HOST}:2379\n    advertise-client-urls: https://${HOST}:2379\n    initial-advertise-peer-urls: https://${HOST}:2380\n</code></pre><p>EOF<br>done</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sysctl --system</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">sed -i &apos;s/^SELINUX=enforcing$/SELINUX=permissive/&apos; /etc/selinux/config</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"># 安装</span><br><span class=\"line\">yum install -y kubectl kubelet kubeadm</span><br><span class=\"line\"># 开机启动</span><br><span class=\"line\">systemctl enable kubelet</span><br><span class=\"line\"># 启动</span><br><span class=\"line\">systemctl start kubelet</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm init --kubernetes-version=1.15.0 --apiserver-advertise-address=10.0.0.101 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 -v=10</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.jianshu.com/p/b58c85436f0a</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm init --kubernetes-version=1.15.0 --apiserver-advertise-address=10.0.0.106 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 -v=10</span><br><span class=\"line\"></span><br><span class=\"line\">install cni</span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod 优先级调度</span><br><span class=\"line\">参考：</span><br><span class=\"line\">https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/</span><br></pre></td></tr></table></figure>\n<p>PriorityClass</p>\n<p>crd<br><a href=\"https://sq.163yun.com/blog/article/174980128954048512\" target=\"_blank\" rel=\"noopener\">https://sq.163yun.com/blog/article/174980128954048512</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Kubernetes 1.8开始要求关闭系统的Swap，如果不关闭，默认配置下kubelet将无法启动。可以通过kubelet的启动参数--fail-swap-on=false更改这个限制。</span><br><span class=\"line\"></span><br><span class=\"line\">全局关闭：</span><br><span class=\"line\">关闭系统的Swap方法如下:</span><br><span class=\"line\"></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\">  </span><br><span class=\"line\">修改 /etc/fstab 文件，注释掉 SWAP 的自动挂载，使用free -m确认swap已经关闭。 &gt; swappiness参数调整，修改/etc/sysctl.d/k8s.conf添加下面一行：</span><br><span class=\"line\"></span><br><span class=\"line\">vm.swappiness=0</span><br><span class=\"line\">  </span><br><span class=\"line\">执行sysctl -p /etc/sysctl.d/k8s.conf使修改生效。</span><br></pre></td></tr></table></figure>\n<p>etcdctl –endpoints=https://[127.0.0.1]:2379 –cacert=/etc/kubernetes/pki/etcd/ca.crt –cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt –key=/etc/kubernetes/pki/etcd/healthcheck-client.key get foo</p>\n<p>export HOST0=10.0.0.106<br>export HOST1=10.0.0.101<br>export HOST2=10.0.0.108</p>\n<p>mkdir -p /tmp/${HOST0}/ /tmp/${HOST1}/ /tmp/${HOST2}/</p>\n<p>ETCDHOSTS=(${HOST0} ${HOST1} ${HOST2})<br>NAMES=(“infra0” “infra1” “infra2”)</p>\n<p>for i in “${!ETCDHOSTS[@]}”; do<br>HOST=${ETCDHOSTS[$i]}<br>NAME=${NAMES[$i]}<br>cat &lt;&lt; EOF &gt; /tmp/${HOST}/kubeadmcfg.yaml<br>apiVersion: “kubeadm.k8s.io/v1beta2”<br>kind: ClusterConfiguration<br>etcd:<br>    local:<br>        serverCertSANs:</p>\n<pre><code>- &quot;${HOST}&quot;\npeerCertSANs:\n- &quot;${HOST}&quot;\nextraArgs:\n    initial-cluster: ${NAMES[0]}=https://${ETCDHOSTS[0]}:2380,${NAMES[1]}=https://${ETCDHOSTS[1]}:2380,${NAMES[2]}=https://${ETCDHOSTS[2]}:2380\n    initial-cluster-state: new\n    name: ${NAME}\n    listen-peer-urls: https://${HOST}:2380\n    listen-client-urls: https://${HOST}:2379\n    advertise-client-urls: https://${HOST}:2379\n    initial-advertise-peer-urls: https://${HOST}:2380\n</code></pre><p>EOF<br>done</p>\n"},{"title":"docker 版kafka集群搭建","date":"2019-02-25T02:27:45.000Z","_content":"\n## kafka 集群搭建\n\n参考:https://hub.docker.com/r/wurstmeister/kafka/tags\n\n### docker-compose.yaml\n```\nversion: '2'\nservices:\n  zookeeper:\n    image: wurstmeister/zookeeper\n    ports:\n      - \"2181:2181\"\n  kafka:\n    image: wurstmeister/kafka\n    ports:\n      - \"9092\"\n    environment:\n      KAFKA_ADVERTISED_HOST_NAME: 10.0.0.159  #需要改成宿主ip\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n\n\n\n\n```\n### 启动kafka\n```\ndocker-compose up -d\ndocker-compose scale kafka=3\n```\n\n","source":"_posts/kafka.md","raw":"---\ntitle: docker 版kafka集群搭建\ndate: 2019-02-25 10:27:45\ntags: [docker,kafka]\n---\n\n## kafka 集群搭建\n\n参考:https://hub.docker.com/r/wurstmeister/kafka/tags\n\n### docker-compose.yaml\n```\nversion: '2'\nservices:\n  zookeeper:\n    image: wurstmeister/zookeeper\n    ports:\n      - \"2181:2181\"\n  kafka:\n    image: wurstmeister/kafka\n    ports:\n      - \"9092\"\n    environment:\n      KAFKA_ADVERTISED_HOST_NAME: 10.0.0.159  #需要改成宿主ip\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n\n\n\n\n```\n### 启动kafka\n```\ndocker-compose up -d\ndocker-compose scale kafka=3\n```\n\n","slug":"kafka","published":1,"updated":"2019-07-02T12:51:08.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgh000ugkxr99vbsb1d","content":"<h2 id=\"kafka-集群搭建\"><a href=\"#kafka-集群搭建\" class=\"headerlink\" title=\"kafka 集群搭建\"></a>kafka 集群搭建</h2><p>参考:<a href=\"https://hub.docker.com/r/wurstmeister/kafka/tags\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/wurstmeister/kafka/tags</a></p>\n<h3 id=\"docker-compose-yaml\"><a href=\"#docker-compose-yaml\" class=\"headerlink\" title=\"docker-compose.yaml\"></a>docker-compose.yaml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;2&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  zookeeper:</span><br><span class=\"line\">    image: wurstmeister/zookeeper</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;2181:2181&quot;</span><br><span class=\"line\">  kafka:</span><br><span class=\"line\">    image: wurstmeister/kafka</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;9092&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      KAFKA_ADVERTISED_HOST_NAME: 10.0.0.159  #需要改成宿主ip</span><br><span class=\"line\">      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /var/run/docker.sock:/var/run/docker.sock</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动kafka\"><a href=\"#启动kafka\" class=\"headerlink\" title=\"启动kafka\"></a>启动kafka</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br><span class=\"line\">docker-compose scale kafka=3</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"kafka-集群搭建\"><a href=\"#kafka-集群搭建\" class=\"headerlink\" title=\"kafka 集群搭建\"></a>kafka 集群搭建</h2><p>参考:<a href=\"https://hub.docker.com/r/wurstmeister/kafka/tags\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/wurstmeister/kafka/tags</a></p>\n<h3 id=\"docker-compose-yaml\"><a href=\"#docker-compose-yaml\" class=\"headerlink\" title=\"docker-compose.yaml\"></a>docker-compose.yaml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;2&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  zookeeper:</span><br><span class=\"line\">    image: wurstmeister/zookeeper</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;2181:2181&quot;</span><br><span class=\"line\">  kafka:</span><br><span class=\"line\">    image: wurstmeister/kafka</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;9092&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      KAFKA_ADVERTISED_HOST_NAME: 10.0.0.159  #需要改成宿主ip</span><br><span class=\"line\">      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /var/run/docker.sock:/var/run/docker.sock</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动kafka\"><a href=\"#启动kafka\" class=\"headerlink\" title=\"启动kafka\"></a>启动kafka</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br><span class=\"line\">docker-compose scale kafka=3</span><br></pre></td></tr></table></figure>\n"},{"title":"pprof","date":"2019-03-06T15:18:18.000Z","_content":"\n\nCPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置\nMemory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏\nBlock Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置\nMutex Profiling：互斥锁分析，报告互斥锁的竞争情况\n\n\ncpu（CPU Profiling）: $HOST/debug/pprof/profile，默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件\nblock（Block Profiling）：$HOST/debug/pprof/block，查看导致阻塞同步的堆栈跟踪\ngoroutine：$HOST/debug/pprof/goroutine，查看当前所有运行的 goroutines 堆栈跟踪\nheap（Memory Profiling）: $HOST/debug/pprof/heap，查看活动对象的内存分配情况\nmutex（Mutex Profiling）：$HOST/debug/pprof/mutex，查看导致互斥锁的竞争持有者的堆栈跟踪\nthreadcreate：$HOST/debug/pprof/threadcreate，查看创建新OS线程的堆栈跟踪\n\n\nhttps://www.jianshu.com/p/4e4ff6be6af9\n\nhttps://www.cnblogs.com/li-peng/p/9391543.html\n\n\ngo tool pprof httpdemo http://192.168.3.34:9909/debug/pprof/profile\n\ntop\n\n\nlist handleData\n\nmac环境下graphviz安装及使用\n\nhttps://blog.csdn.net/mouday/article/details/80902025\n","source":"_posts/pprof.md","raw":"---\ntitle: pprof\ndate: 2019-03-06 23:18:18\ntags:\n---\n\n\nCPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置\nMemory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏\nBlock Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置\nMutex Profiling：互斥锁分析，报告互斥锁的竞争情况\n\n\ncpu（CPU Profiling）: $HOST/debug/pprof/profile，默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件\nblock（Block Profiling）：$HOST/debug/pprof/block，查看导致阻塞同步的堆栈跟踪\ngoroutine：$HOST/debug/pprof/goroutine，查看当前所有运行的 goroutines 堆栈跟踪\nheap（Memory Profiling）: $HOST/debug/pprof/heap，查看活动对象的内存分配情况\nmutex（Mutex Profiling）：$HOST/debug/pprof/mutex，查看导致互斥锁的竞争持有者的堆栈跟踪\nthreadcreate：$HOST/debug/pprof/threadcreate，查看创建新OS线程的堆栈跟踪\n\n\nhttps://www.jianshu.com/p/4e4ff6be6af9\n\nhttps://www.cnblogs.com/li-peng/p/9391543.html\n\n\ngo tool pprof httpdemo http://192.168.3.34:9909/debug/pprof/profile\n\ntop\n\n\nlist handleData\n\nmac环境下graphviz安装及使用\n\nhttps://blog.csdn.net/mouday/article/details/80902025\n","slug":"pprof","published":1,"updated":"2019-04-20T03:39:51.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgi000xgkxrqg489ykv","content":"<p>CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置<br>Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏<br>Block Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置<br>Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况</p>\n<p>cpu（CPU Profiling）: $HOST/debug/pprof/profile，默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件<br>block（Block Profiling）：$HOST/debug/pprof/block，查看导致阻塞同步的堆栈跟踪<br>goroutine：$HOST/debug/pprof/goroutine，查看当前所有运行的 goroutines 堆栈跟踪<br>heap（Memory Profiling）: $HOST/debug/pprof/heap，查看活动对象的内存分配情况<br>mutex（Mutex Profiling）：$HOST/debug/pprof/mutex，查看导致互斥锁的竞争持有者的堆栈跟踪<br>threadcreate：$HOST/debug/pprof/threadcreate，查看创建新OS线程的堆栈跟踪</p>\n<p><a href=\"https://www.jianshu.com/p/4e4ff6be6af9\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4e4ff6be6af9</a></p>\n<p><a href=\"https://www.cnblogs.com/li-peng/p/9391543.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/li-peng/p/9391543.html</a></p>\n<p>go tool pprof httpdemo <a href=\"http://192.168.3.34:9909/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://192.168.3.34:9909/debug/pprof/profile</a></p>\n<p>top</p>\n<p>list handleData</p>\n<p>mac环境下graphviz安装及使用</p>\n<p><a href=\"https://blog.csdn.net/mouday/article/details/80902025\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mouday/article/details/80902025</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置<br>Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏<br>Block Profiling：阻塞分析，记录 goroutine 阻塞等待同步（包括定时器通道）的位置<br>Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况</p>\n<p>cpu（CPU Profiling）: $HOST/debug/pprof/profile，默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件<br>block（Block Profiling）：$HOST/debug/pprof/block，查看导致阻塞同步的堆栈跟踪<br>goroutine：$HOST/debug/pprof/goroutine，查看当前所有运行的 goroutines 堆栈跟踪<br>heap（Memory Profiling）: $HOST/debug/pprof/heap，查看活动对象的内存分配情况<br>mutex（Mutex Profiling）：$HOST/debug/pprof/mutex，查看导致互斥锁的竞争持有者的堆栈跟踪<br>threadcreate：$HOST/debug/pprof/threadcreate，查看创建新OS线程的堆栈跟踪</p>\n<p><a href=\"https://www.jianshu.com/p/4e4ff6be6af9\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4e4ff6be6af9</a></p>\n<p><a href=\"https://www.cnblogs.com/li-peng/p/9391543.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/li-peng/p/9391543.html</a></p>\n<p>go tool pprof httpdemo <a href=\"http://192.168.3.34:9909/debug/pprof/profile\" target=\"_blank\" rel=\"noopener\">http://192.168.3.34:9909/debug/pprof/profile</a></p>\n<p>top</p>\n<p>list handleData</p>\n<p>mac环境下graphviz安装及使用</p>\n<p><a href=\"https://blog.csdn.net/mouday/article/details/80902025\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mouday/article/details/80902025</a></p>\n"},{"title":"搭建nginx-https","date":"2019-02-25T04:24:07.000Z","_content":"## nginx https\ndefalut.conf\n```\n\n    upstream www.aaa.com.38240.r1.up {\n\n        server 127.0.0.1:8443  weight=1  max_fails=1 fail_timeout=10s;\n    }\n\n server {\n\n        listen                        38240;\n        server_name                   registry.wise2c.com;\n\n        access_log                    /var/log/nginx/host.access.log  main;\n        error_log                     /var/log/nginx/host_error.log;\n\n\n        # for support ssl\n\n        ssl                           on;\n        ssl_certificate               /etc/nginx/registry.wise2c.com.crt;\n        ssl_certificate_key           /etc/nginx/registry.wise2c.com.key;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n        ssl_prefer_server_ciphers on;\n\n\n       proxy_headers_hash_max_size     51200;\n       proxy_headers_hash_bucket_size  6400;\n       proxy_set_header                X-Forwarded-For  $remote_addr;\n       proxy_set_header                Host             $http_host;\n       proxy_set_header                X-Real-IP        $remote_addr;\n       proxy_set_header                X-Forwarded-For  $proxy_add_x_forwarded_for;\n\n       add_header Upgrade \"TLS/1.2, HTTP/1.1\";\n       add_header Connection \"Upgrade\";\n       add_header PPP  https://$host:$server_port$uri/;\n       error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n        location / {\n                proxy_pass                http://www.aaa.com.38240.r1.up/;\n                proxy_connect_timeout     2s;\n                proxy_redirect http:// $scheme://;\n      }\n\n    }\n```\n\n```\n\nhttps http\n\n端口(88)相同  域名不相同  \n\n访问http://www.xx.com:88     400  \n访问https://www.xxx.com:88     200\n\n端口相同  域名相同  只有https的存在\n\n问题\nnginx log\n\n2019/02/25 08:10:46 [warn] 1#1: conflicting server name \"registry.wise2c.com\" on 0.0.0.0:38240, ignored\nnginx: [warn] conflicting server name \"registry.wise2c.com\" on 0.0.0.0:38240, ignored\n\n端口不相同  域名相同 200\n\n\n```\n\n## Nginx环境下http和https可同时访问方法\n```\n\nserver {\nlisten 80 default backlog=2048;\nlisten 443 ssl;\nserver_name x.x.x;\nroot /var/www/html;\nssl_certificate /usr/local/Tengine/sslcrt/domain.crt;\nssl_certificate_key /usr/local/Tengine/sslcrt/domain.Key;\n\n location / {\n                proxy_pass                http://www.aaa.com.38240.r1.up/;\n                proxy_connect_timeout     2s;\n                proxy_redirect http:// $scheme://;\n      }\n}\n```\n\n\n\n\n```\n\nhttps://www.ixsystems.com/community/threads/how-to-owncloud-using-nginx-php-fpm-and-mysql.17786/page-78#post-395092\n过添加\n\nclient_body_in_file_only clean 找到解决方案; \nclient_body_buffer_size 32K; #set \n\nmax upload size \nclient_max_body_size 4000M; \n\n\n       add_header X-Xss-Protection“1; mode = block”总是;\n\t   add_header X-Content-Type-Options“nosniff”总是;\n\t   add_header Strict-Transport-Security“max-age = 2592000; includeSubdomains”总是;\n\t   add_header X-Frame-Options“SAMEORIGIN”总是;\n\t   proxy_hide_header X-Powered-By;\n\t   add_header'Referrer-Policy''no-referrer';\n\t   add_header Content-Security-Policy“frame-ancestors mydomain.eu;”;\n```\n\n\ndragonfly docker proxy   branch fix-md2\n\n```\nserver {\n    listen       443 ssl;\n    server_name localhost;\n\n    # 上面生成的自签名证书\n    ssl_certificate /tmp/ssl/server.crt;\n    ssl_certificate_key /tmp/ssl/server.key;\n\n    ssl_session_timeout 5m;\n\n    location / {\n        proxy_set_header  X-Real-IP  $remote_addr;\n        proxy_set_header  Host $host;\n        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n        # 后端服务\n        proxy_pass http://localhost:8080;\n    }\n}\n```","source":"_posts/nginx-https.md","raw":"---\ntitle: 搭建nginx-https\ndate: 2019-02-25 12:24:07\ntags: [nginx]\n---\n## nginx https\ndefalut.conf\n```\n\n    upstream www.aaa.com.38240.r1.up {\n\n        server 127.0.0.1:8443  weight=1  max_fails=1 fail_timeout=10s;\n    }\n\n server {\n\n        listen                        38240;\n        server_name                   registry.wise2c.com;\n\n        access_log                    /var/log/nginx/host.access.log  main;\n        error_log                     /var/log/nginx/host_error.log;\n\n\n        # for support ssl\n\n        ssl                           on;\n        ssl_certificate               /etc/nginx/registry.wise2c.com.crt;\n        ssl_certificate_key           /etc/nginx/registry.wise2c.com.key;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n        ssl_prefer_server_ciphers on;\n\n\n       proxy_headers_hash_max_size     51200;\n       proxy_headers_hash_bucket_size  6400;\n       proxy_set_header                X-Forwarded-For  $remote_addr;\n       proxy_set_header                Host             $http_host;\n       proxy_set_header                X-Real-IP        $remote_addr;\n       proxy_set_header                X-Forwarded-For  $proxy_add_x_forwarded_for;\n\n       add_header Upgrade \"TLS/1.2, HTTP/1.1\";\n       add_header Connection \"Upgrade\";\n       add_header PPP  https://$host:$server_port$uri/;\n       error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n\n        location / {\n                proxy_pass                http://www.aaa.com.38240.r1.up/;\n                proxy_connect_timeout     2s;\n                proxy_redirect http:// $scheme://;\n      }\n\n    }\n```\n\n```\n\nhttps http\n\n端口(88)相同  域名不相同  \n\n访问http://www.xx.com:88     400  \n访问https://www.xxx.com:88     200\n\n端口相同  域名相同  只有https的存在\n\n问题\nnginx log\n\n2019/02/25 08:10:46 [warn] 1#1: conflicting server name \"registry.wise2c.com\" on 0.0.0.0:38240, ignored\nnginx: [warn] conflicting server name \"registry.wise2c.com\" on 0.0.0.0:38240, ignored\n\n端口不相同  域名相同 200\n\n\n```\n\n## Nginx环境下http和https可同时访问方法\n```\n\nserver {\nlisten 80 default backlog=2048;\nlisten 443 ssl;\nserver_name x.x.x;\nroot /var/www/html;\nssl_certificate /usr/local/Tengine/sslcrt/domain.crt;\nssl_certificate_key /usr/local/Tengine/sslcrt/domain.Key;\n\n location / {\n                proxy_pass                http://www.aaa.com.38240.r1.up/;\n                proxy_connect_timeout     2s;\n                proxy_redirect http:// $scheme://;\n      }\n}\n```\n\n\n\n\n```\n\nhttps://www.ixsystems.com/community/threads/how-to-owncloud-using-nginx-php-fpm-and-mysql.17786/page-78#post-395092\n过添加\n\nclient_body_in_file_only clean 找到解决方案; \nclient_body_buffer_size 32K; #set \n\nmax upload size \nclient_max_body_size 4000M; \n\n\n       add_header X-Xss-Protection“1; mode = block”总是;\n\t   add_header X-Content-Type-Options“nosniff”总是;\n\t   add_header Strict-Transport-Security“max-age = 2592000; includeSubdomains”总是;\n\t   add_header X-Frame-Options“SAMEORIGIN”总是;\n\t   proxy_hide_header X-Powered-By;\n\t   add_header'Referrer-Policy''no-referrer';\n\t   add_header Content-Security-Policy“frame-ancestors mydomain.eu;”;\n```\n\n\ndragonfly docker proxy   branch fix-md2\n\n```\nserver {\n    listen       443 ssl;\n    server_name localhost;\n\n    # 上面生成的自签名证书\n    ssl_certificate /tmp/ssl/server.crt;\n    ssl_certificate_key /tmp/ssl/server.key;\n\n    ssl_session_timeout 5m;\n\n    location / {\n        proxy_set_header  X-Real-IP  $remote_addr;\n        proxy_set_header  Host $host;\n        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n        # 后端服务\n        proxy_pass http://localhost:8080;\n    }\n}\n```","slug":"nginx-https","published":1,"updated":"2019-06-23T14:58:32.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgj000zgkxr4q6zjm9z","content":"<h2 id=\"nginx-https\"><a href=\"#nginx-https\" class=\"headerlink\" title=\"nginx https\"></a>nginx https</h2><p>defalut.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   upstream www.aaa.com.38240.r1.up &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       server 127.0.0.1:8443  weight=1  max_fails=1 fail_timeout=10s;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       listen                        38240;</span><br><span class=\"line\">       server_name                   registry.wise2c.com;</span><br><span class=\"line\"></span><br><span class=\"line\">       access_log                    /var/log/nginx/host.access.log  main;</span><br><span class=\"line\">       error_log                     /var/log/nginx/host_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       # for support ssl</span><br><span class=\"line\"></span><br><span class=\"line\">       ssl                           on;</span><br><span class=\"line\">       ssl_certificate               /etc/nginx/registry.wise2c.com.crt;</span><br><span class=\"line\">       ssl_certificate_key           /etc/nginx/registry.wise2c.com.key;</span><br><span class=\"line\">       ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class=\"line\">       ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      proxy_headers_hash_max_size     51200;</span><br><span class=\"line\">      proxy_headers_hash_bucket_size  6400;</span><br><span class=\"line\">      proxy_set_header                X-Forwarded-For  $remote_addr;</span><br><span class=\"line\">      proxy_set_header                Host             $http_host;</span><br><span class=\"line\">      proxy_set_header                X-Real-IP        $remote_addr;</span><br><span class=\"line\">      proxy_set_header                X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\"></span><br><span class=\"line\">      add_header Upgrade &quot;TLS/1.2, HTTP/1.1&quot;;</span><br><span class=\"line\">      add_header Connection &quot;Upgrade&quot;;</span><br><span class=\"line\">      add_header PPP  https://$host:$server_port$uri/;</span><br><span class=\"line\">      error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">       location = /50x.html &#123;</span><br><span class=\"line\">           root   html;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">               proxy_pass                http://www.aaa.com.38240.r1.up/;</span><br><span class=\"line\">               proxy_connect_timeout     2s;</span><br><span class=\"line\">               proxy_redirect http:// $scheme://;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">https http</span><br><span class=\"line\"></span><br><span class=\"line\">端口(88)相同  域名不相同  </span><br><span class=\"line\"></span><br><span class=\"line\">访问http://www.xx.com:88     400  </span><br><span class=\"line\">访问https://www.xxx.com:88     200</span><br><span class=\"line\"></span><br><span class=\"line\">端口相同  域名相同  只有https的存在</span><br><span class=\"line\"></span><br><span class=\"line\">问题</span><br><span class=\"line\">nginx log</span><br><span class=\"line\"></span><br><span class=\"line\">2019/02/25 08:10:46 [warn] 1#1: conflicting server name &quot;registry.wise2c.com&quot; on 0.0.0.0:38240, ignored</span><br><span class=\"line\">nginx: [warn] conflicting server name &quot;registry.wise2c.com&quot; on 0.0.0.0:38240, ignored</span><br><span class=\"line\"></span><br><span class=\"line\">端口不相同  域名相同 200</span><br></pre></td></tr></table></figure>\n<h2 id=\"Nginx环境下http和https可同时访问方法\"><a href=\"#Nginx环境下http和https可同时访问方法\" class=\"headerlink\" title=\"Nginx环境下http和https可同时访问方法\"></a>Nginx环境下http和https可同时访问方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">listen 80 default backlog=2048;</span><br><span class=\"line\">listen 443 ssl;</span><br><span class=\"line\">server_name x.x.x;</span><br><span class=\"line\">root /var/www/html;</span><br><span class=\"line\">ssl_certificate /usr/local/Tengine/sslcrt/domain.crt;</span><br><span class=\"line\">ssl_certificate_key /usr/local/Tengine/sslcrt/domain.Key;</span><br><span class=\"line\"></span><br><span class=\"line\"> location / &#123;</span><br><span class=\"line\">                proxy_pass                http://www.aaa.com.38240.r1.up/;</span><br><span class=\"line\">                proxy_connect_timeout     2s;</span><br><span class=\"line\">                proxy_redirect http:// $scheme://;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">https://www.ixsystems.com/community/threads/how-to-owncloud-using-nginx-php-fpm-and-mysql.17786/page-78#post-395092</span><br><span class=\"line\">过添加</span><br><span class=\"line\"></span><br><span class=\"line\">client_body_in_file_only clean 找到解决方案; </span><br><span class=\"line\">client_body_buffer_size 32K; #set </span><br><span class=\"line\"></span><br><span class=\"line\">max upload size </span><br><span class=\"line\">client_max_body_size 4000M; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       add_header X-Xss-Protection“1; mode = block”总是;</span><br><span class=\"line\">\t   add_header X-Content-Type-Options“nosniff”总是;</span><br><span class=\"line\">\t   add_header Strict-Transport-Security“max-age = 2592000; includeSubdomains”总是;</span><br><span class=\"line\">\t   add_header X-Frame-Options“SAMEORIGIN”总是;</span><br><span class=\"line\">\t   proxy_hide_header X-Powered-By;</span><br><span class=\"line\">\t   add_header&apos;Referrer-Policy&apos;&apos;no-referrer&apos;;</span><br><span class=\"line\">\t   add_header Content-Security-Policy“frame-ancestors mydomain.eu;”;</span><br></pre></td></tr></table></figure>\n<p>dragonfly docker proxy   branch fix-md2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 上面生成的自签名证书</span><br><span class=\"line\">    ssl_certificate /tmp/ssl/server.crt;</span><br><span class=\"line\">    ssl_certificate_key /tmp/ssl/server.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">        proxy_set_header  Host $host;</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        # 后端服务</span><br><span class=\"line\">        proxy_pass http://localhost:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"nginx-https\"><a href=\"#nginx-https\" class=\"headerlink\" title=\"nginx https\"></a>nginx https</h2><p>defalut.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">   upstream www.aaa.com.38240.r1.up &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       server 127.0.0.1:8443  weight=1  max_fails=1 fail_timeout=10s;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       listen                        38240;</span><br><span class=\"line\">       server_name                   registry.wise2c.com;</span><br><span class=\"line\"></span><br><span class=\"line\">       access_log                    /var/log/nginx/host.access.log  main;</span><br><span class=\"line\">       error_log                     /var/log/nginx/host_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       # for support ssl</span><br><span class=\"line\"></span><br><span class=\"line\">       ssl                           on;</span><br><span class=\"line\">       ssl_certificate               /etc/nginx/registry.wise2c.com.crt;</span><br><span class=\"line\">       ssl_certificate_key           /etc/nginx/registry.wise2c.com.key;</span><br><span class=\"line\">       ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class=\"line\">       ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      proxy_headers_hash_max_size     51200;</span><br><span class=\"line\">      proxy_headers_hash_bucket_size  6400;</span><br><span class=\"line\">      proxy_set_header                X-Forwarded-For  $remote_addr;</span><br><span class=\"line\">      proxy_set_header                Host             $http_host;</span><br><span class=\"line\">      proxy_set_header                X-Real-IP        $remote_addr;</span><br><span class=\"line\">      proxy_set_header                X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\"></span><br><span class=\"line\">      add_header Upgrade &quot;TLS/1.2, HTTP/1.1&quot;;</span><br><span class=\"line\">      add_header Connection &quot;Upgrade&quot;;</span><br><span class=\"line\">      add_header PPP  https://$host:$server_port$uri/;</span><br><span class=\"line\">      error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">       location = /50x.html &#123;</span><br><span class=\"line\">           root   html;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">               proxy_pass                http://www.aaa.com.38240.r1.up/;</span><br><span class=\"line\">               proxy_connect_timeout     2s;</span><br><span class=\"line\">               proxy_redirect http:// $scheme://;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">https http</span><br><span class=\"line\"></span><br><span class=\"line\">端口(88)相同  域名不相同  </span><br><span class=\"line\"></span><br><span class=\"line\">访问http://www.xx.com:88     400  </span><br><span class=\"line\">访问https://www.xxx.com:88     200</span><br><span class=\"line\"></span><br><span class=\"line\">端口相同  域名相同  只有https的存在</span><br><span class=\"line\"></span><br><span class=\"line\">问题</span><br><span class=\"line\">nginx log</span><br><span class=\"line\"></span><br><span class=\"line\">2019/02/25 08:10:46 [warn] 1#1: conflicting server name &quot;registry.wise2c.com&quot; on 0.0.0.0:38240, ignored</span><br><span class=\"line\">nginx: [warn] conflicting server name &quot;registry.wise2c.com&quot; on 0.0.0.0:38240, ignored</span><br><span class=\"line\"></span><br><span class=\"line\">端口不相同  域名相同 200</span><br></pre></td></tr></table></figure>\n<h2 id=\"Nginx环境下http和https可同时访问方法\"><a href=\"#Nginx环境下http和https可同时访问方法\" class=\"headerlink\" title=\"Nginx环境下http和https可同时访问方法\"></a>Nginx环境下http和https可同时访问方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">listen 80 default backlog=2048;</span><br><span class=\"line\">listen 443 ssl;</span><br><span class=\"line\">server_name x.x.x;</span><br><span class=\"line\">root /var/www/html;</span><br><span class=\"line\">ssl_certificate /usr/local/Tengine/sslcrt/domain.crt;</span><br><span class=\"line\">ssl_certificate_key /usr/local/Tengine/sslcrt/domain.Key;</span><br><span class=\"line\"></span><br><span class=\"line\"> location / &#123;</span><br><span class=\"line\">                proxy_pass                http://www.aaa.com.38240.r1.up/;</span><br><span class=\"line\">                proxy_connect_timeout     2s;</span><br><span class=\"line\">                proxy_redirect http:// $scheme://;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">https://www.ixsystems.com/community/threads/how-to-owncloud-using-nginx-php-fpm-and-mysql.17786/page-78#post-395092</span><br><span class=\"line\">过添加</span><br><span class=\"line\"></span><br><span class=\"line\">client_body_in_file_only clean 找到解决方案; </span><br><span class=\"line\">client_body_buffer_size 32K; #set </span><br><span class=\"line\"></span><br><span class=\"line\">max upload size </span><br><span class=\"line\">client_max_body_size 4000M; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       add_header X-Xss-Protection“1; mode = block”总是;</span><br><span class=\"line\">\t   add_header X-Content-Type-Options“nosniff”总是;</span><br><span class=\"line\">\t   add_header Strict-Transport-Security“max-age = 2592000; includeSubdomains”总是;</span><br><span class=\"line\">\t   add_header X-Frame-Options“SAMEORIGIN”总是;</span><br><span class=\"line\">\t   proxy_hide_header X-Powered-By;</span><br><span class=\"line\">\t   add_header&apos;Referrer-Policy&apos;&apos;no-referrer&apos;;</span><br><span class=\"line\">\t   add_header Content-Security-Policy“frame-ancestors mydomain.eu;”;</span><br></pre></td></tr></table></figure>\n<p>dragonfly docker proxy   branch fix-md2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443 ssl;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 上面生成的自签名证书</span><br><span class=\"line\">    ssl_certificate /tmp/ssl/server.crt;</span><br><span class=\"line\">    ssl_certificate_key /tmp/ssl/server.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class=\"line\">        proxy_set_header  Host $host;</span><br><span class=\"line\">        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        # 后端服务</span><br><span class=\"line\">        proxy_pass http://localhost:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"protobuf","date":"2019-03-07T01:58:58.000Z","_content":"\n\nmac\n\nprotoc-3.7.0-osx-x86_64.zip\n\nhttps://github.com/protocolbuffers/protobuf/releases/tag/v3.7.0\n\nhttps://github.com/golang/protobuf\nhttps://github.com/micro/protoc-gen-micro","source":"_posts/protobuf.md","raw":"---\ntitle: protobuf\ndate: 2019-03-07 09:58:58\ntags:\n---\n\n\nmac\n\nprotoc-3.7.0-osx-x86_64.zip\n\nhttps://github.com/protocolbuffers/protobuf/releases/tag/v3.7.0\n\nhttps://github.com/golang/protobuf\nhttps://github.com/micro/protoc-gen-micro","slug":"protobuf","published":1,"updated":"2019-04-20T03:39:51.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgk0010gkxr14emv8hp","content":"<p>mac</p>\n<p>protoc-3.7.0-osx-x86_64.zip</p>\n<p><a href=\"https://github.com/protocolbuffers/protobuf/releases/tag/v3.7.0\" target=\"_blank\" rel=\"noopener\">https://github.com/protocolbuffers/protobuf/releases/tag/v3.7.0</a></p>\n<p><a href=\"https://github.com/golang/protobuf\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/protobuf</a><br><a href=\"https://github.com/micro/protoc-gen-micro\" target=\"_blank\" rel=\"noopener\">https://github.com/micro/protoc-gen-micro</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>mac</p>\n<p>protoc-3.7.0-osx-x86_64.zip</p>\n<p><a href=\"https://github.com/protocolbuffers/protobuf/releases/tag/v3.7.0\" target=\"_blank\" rel=\"noopener\">https://github.com/protocolbuffers/protobuf/releases/tag/v3.7.0</a></p>\n<p><a href=\"https://github.com/golang/protobuf\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/protobuf</a><br><a href=\"https://github.com/micro/protoc-gen-micro\" target=\"_blank\" rel=\"noopener\">https://github.com/micro/protoc-gen-micro</a></p>\n"},{"title":"kubernetes 创建 pvc-pv","date":"2019-07-02T02:18:31.000Z","_content":"pv.yaml\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n    name: pv0003\nspec:\n    capacity:\n      storage: 5Gi\n    accessModes:\n      - ReadWriteOnce\n    persistentVolumeReclaimPolicy: Recycle\n    nfs:\n      path: /k8s/weblogic\n      server: 192.168.0.103\n```\npvc.yaml\n```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: weblogiclogs\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n```\n\n创建\n```\nkubectl apply -f pv.yaml -f pvc.yaml\n```\n查看创建之后的,发现pv已经被bound\n```\nkubectl  get pv\nNAME                                 CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM            \npv0003                               5Gi        RWO            Recycle          Bound      default/weblogiclogs\n\nkubectl get pvc\nNAME           STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nweblogiclogs   Bound     pv0003    5Gi        RWO                           9m\n```\n","source":"_posts/pvc-pv.md","raw":"---\ntitle: kubernetes 创建 pvc-pv\ndate: 2019-07-02 10:18:31\ntags: kubernetes\n---\npv.yaml\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n    name: pv0003\nspec:\n    capacity:\n      storage: 5Gi\n    accessModes:\n      - ReadWriteOnce\n    persistentVolumeReclaimPolicy: Recycle\n    nfs:\n      path: /k8s/weblogic\n      server: 192.168.0.103\n```\npvc.yaml\n```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: weblogiclogs\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n```\n\n创建\n```\nkubectl apply -f pv.yaml -f pvc.yaml\n```\n查看创建之后的,发现pv已经被bound\n```\nkubectl  get pv\nNAME                                 CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM            \npv0003                               5Gi        RWO            Recycle          Bound      default/weblogiclogs\n\nkubectl get pvc\nNAME           STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nweblogiclogs   Bound     pv0003    5Gi        RWO                           9m\n```\n","slug":"pvc-pv","published":1,"updated":"2019-07-02T13:04:58.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgl0011gkxrlx664w8h","content":"<p>pv.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">    name: pv0003</span><br><span class=\"line\">spec:</span><br><span class=\"line\">    capacity:</span><br><span class=\"line\">      storage: 5Gi</span><br><span class=\"line\">    accessModes:</span><br><span class=\"line\">      - ReadWriteOnce</span><br><span class=\"line\">    persistentVolumeReclaimPolicy: Recycle</span><br><span class=\"line\">    nfs:</span><br><span class=\"line\">      path: /k8s/weblogic</span><br><span class=\"line\">      server: 192.168.0.103</span><br></pre></td></tr></table></figure></p>\n<p>pvc.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: weblogiclogs</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteOnce</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 5Gi</span><br></pre></td></tr></table></figure></p>\n<p>创建<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f pv.yaml -f pvc.yaml</span><br></pre></td></tr></table></figure></p>\n<p>查看创建之后的,发现pv已经被bound<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl  get pv</span><br><span class=\"line\">NAME                                 CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM            </span><br><span class=\"line\">pv0003                               5Gi        RWO            Recycle          Bound      default/weblogiclogs</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pvc</span><br><span class=\"line\">NAME           STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">weblogiclogs   Bound     pv0003    5Gi        RWO                           9m</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>pv.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolume</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">    name: pv0003</span><br><span class=\"line\">spec:</span><br><span class=\"line\">    capacity:</span><br><span class=\"line\">      storage: 5Gi</span><br><span class=\"line\">    accessModes:</span><br><span class=\"line\">      - ReadWriteOnce</span><br><span class=\"line\">    persistentVolumeReclaimPolicy: Recycle</span><br><span class=\"line\">    nfs:</span><br><span class=\"line\">      path: /k8s/weblogic</span><br><span class=\"line\">      server: 192.168.0.103</span><br></pre></td></tr></table></figure></p>\n<p>pvc.yaml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: weblogiclogs</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteOnce</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 5Gi</span><br></pre></td></tr></table></figure></p>\n<p>创建<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f pv.yaml -f pvc.yaml</span><br></pre></td></tr></table></figure></p>\n<p>查看创建之后的,发现pv已经被bound<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl  get pv</span><br><span class=\"line\">NAME                                 CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM            </span><br><span class=\"line\">pv0003                               5Gi        RWO            Recycle          Bound      default/weblogiclogs</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pvc</span><br><span class=\"line\">NAME           STATUS    VOLUME    CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class=\"line\">weblogiclogs   Bound     pv0003    5Gi        RWO                           9m</span><br></pre></td></tr></table></figure></p>\n"},{"title":"nats","date":"2019-06-26T03:31:42.000Z","_content":"","source":"_posts/nats.md","raw":"---\ntitle: nats\ndate: 2019-06-26 11:31:42\ntags:\n---\n","slug":"nats","published":1,"updated":"2019-06-26T03:31:42.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgn0015gkxrfxced36n","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"vim基本操作","date":"2019-04-08T13:49:32.000Z","_content":"```\nw 或 W\t光标移动至下一个单词的单词首\n\nb 或 B\t光标移动至上一个单词的单词首\n\ne 或 E\t光标移动至下一个单词的单词尾\n\nnw 或 nW\tn 为数字，表示光标向右移动 n 个单词\n\nnb 或 nB\tn 为数字，表示光标向左移动 n 个单词\n\n0 或 ^\t光标移动至当前行的行首\n\n$\t光标移动至当前行的行尾\n\nn$\t光标移动至当前行只有 n 行的行尾，n为数字\n\n例如，在査看 /etc/passwd 时需要参考 /etc/shadow，有两种办法可以实现：\n\n先使用 Vim 打开第一个文件，接着输入命 令 \":sp/etc/shadow\" 水平切分窗口，然后按回车键；如果想垂直切分窗口则可以输入 \":vs/etc/shadow\";\n\n可以直接执行命令\"vim -o 第一个文件名 第二个文件名\"，也就是 \"vim-o /etc/passwd /etc/shadow\"。\n\n如果想将一个文件的内容全部复制到另一个文件中，则可以输入命令 \":r 被复制的文件名\"，即可将导入文件的全部内容复制到当前光标所在行下面。\n\n设置参数\t含 义\n:set nu\n:set nonu\t设置与取消行号。\n:syn on\n:syn off\t是否依据语法显示相关的颜色帮助。在Vim中修改相关的配置文件或Shell脚本文件 时（如前面示例的脚本/etc/init.d/sshd)，默认会显示相应的颜色，用来帮助排错。如果觉得颜色产生了干扰，则可以取消此设置\nset hlsearch\nset nohlsearch\t设置是否将査找的字符串高亮显示。默认是hlsearch高亮显示\nset nobackup\nset backup\t是否保存自动备份文件。默认是nobackup不自动备份。如果设定了:set backup，则会产生“文件名〜”作为备份文件\nset ruler\nset noruler\t设置是否显示右下角的状态栏。默认是ruler显示\nset showmode\nset noshowmode\t设置是否在左下角显示如“一INSERT--”之类的状态栏。默认是showmode显示\n\n  x 删除当前光标下的字符(\"dl\"的快捷命令)\n  X 删除当前光标之前的字符(\"dh\"的快捷命令)\n  D 删除自当前光标至行尾的内容(\"d$\"的快捷命令)\n  dw 删除自当前光标至下一个word的开头\n  db 删除自当前光标至前一个word的开始\n  diw 删除当前光标所在的word(不包括空白字符)\n  daw 删除当前光标所在的word(包括空白字符)\n  dG 删除当前行至文件尾的内容\n  dgg 删除当前行至文件头的内容\n  如果你用\"c\"命令代替\"d\"这些命令就都变成更改命令。使用\"y\"就是yank命令，如此类推。\n\n  在文本中查找下一个word\n  把光标定位于这个word上然后按下\"*\"键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。\"#\"命令是\"*\"的反向版。还可以在这两个命令前加一个命令计数:\"3*\"查找当前光标下的word的第三次出现。\n\n# 大小写转换\nguu                             : 行小写\ngUU                             : 行大写\ng~~                             : 行翻转\n```\n\n","source":"_posts/vim.md","raw":"---\ntitle: vim基本操作\ndate: 2019-04-08 21:49:32\ntags: [linux]\n---\n```\nw 或 W\t光标移动至下一个单词的单词首\n\nb 或 B\t光标移动至上一个单词的单词首\n\ne 或 E\t光标移动至下一个单词的单词尾\n\nnw 或 nW\tn 为数字，表示光标向右移动 n 个单词\n\nnb 或 nB\tn 为数字，表示光标向左移动 n 个单词\n\n0 或 ^\t光标移动至当前行的行首\n\n$\t光标移动至当前行的行尾\n\nn$\t光标移动至当前行只有 n 行的行尾，n为数字\n\n例如，在査看 /etc/passwd 时需要参考 /etc/shadow，有两种办法可以实现：\n\n先使用 Vim 打开第一个文件，接着输入命 令 \":sp/etc/shadow\" 水平切分窗口，然后按回车键；如果想垂直切分窗口则可以输入 \":vs/etc/shadow\";\n\n可以直接执行命令\"vim -o 第一个文件名 第二个文件名\"，也就是 \"vim-o /etc/passwd /etc/shadow\"。\n\n如果想将一个文件的内容全部复制到另一个文件中，则可以输入命令 \":r 被复制的文件名\"，即可将导入文件的全部内容复制到当前光标所在行下面。\n\n设置参数\t含 义\n:set nu\n:set nonu\t设置与取消行号。\n:syn on\n:syn off\t是否依据语法显示相关的颜色帮助。在Vim中修改相关的配置文件或Shell脚本文件 时（如前面示例的脚本/etc/init.d/sshd)，默认会显示相应的颜色，用来帮助排错。如果觉得颜色产生了干扰，则可以取消此设置\nset hlsearch\nset nohlsearch\t设置是否将査找的字符串高亮显示。默认是hlsearch高亮显示\nset nobackup\nset backup\t是否保存自动备份文件。默认是nobackup不自动备份。如果设定了:set backup，则会产生“文件名〜”作为备份文件\nset ruler\nset noruler\t设置是否显示右下角的状态栏。默认是ruler显示\nset showmode\nset noshowmode\t设置是否在左下角显示如“一INSERT--”之类的状态栏。默认是showmode显示\n\n  x 删除当前光标下的字符(\"dl\"的快捷命令)\n  X 删除当前光标之前的字符(\"dh\"的快捷命令)\n  D 删除自当前光标至行尾的内容(\"d$\"的快捷命令)\n  dw 删除自当前光标至下一个word的开头\n  db 删除自当前光标至前一个word的开始\n  diw 删除当前光标所在的word(不包括空白字符)\n  daw 删除当前光标所在的word(包括空白字符)\n  dG 删除当前行至文件尾的内容\n  dgg 删除当前行至文件头的内容\n  如果你用\"c\"命令代替\"d\"这些命令就都变成更改命令。使用\"y\"就是yank命令，如此类推。\n\n  在文本中查找下一个word\n  把光标定位于这个word上然后按下\"*\"键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。\"#\"命令是\"*\"的反向版。还可以在这两个命令前加一个命令计数:\"3*\"查找当前光标下的word的第三次出现。\n\n# 大小写转换\nguu                             : 行小写\ngUU                             : 行大写\ng~~                             : 行翻转\n```\n\n","slug":"vim","published":1,"updated":"2019-07-02T13:19:11.205Z","_id":"cjxlu2kgo0018gkxr8mvqjcnq","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w 或 W\t光标移动至下一个单词的单词首</span><br><span class=\"line\"></span><br><span class=\"line\">b 或 B\t光标移动至上一个单词的单词首</span><br><span class=\"line\"></span><br><span class=\"line\">e 或 E\t光标移动至下一个单词的单词尾</span><br><span class=\"line\"></span><br><span class=\"line\">nw 或 nW\tn 为数字，表示光标向右移动 n 个单词</span><br><span class=\"line\"></span><br><span class=\"line\">nb 或 nB\tn 为数字，表示光标向左移动 n 个单词</span><br><span class=\"line\"></span><br><span class=\"line\">0 或 ^\t光标移动至当前行的行首</span><br><span class=\"line\"></span><br><span class=\"line\">$\t光标移动至当前行的行尾</span><br><span class=\"line\"></span><br><span class=\"line\">n$\t光标移动至当前行只有 n 行的行尾，n为数字</span><br><span class=\"line\"></span><br><span class=\"line\">例如，在査看 /etc/passwd 时需要参考 /etc/shadow，有两种办法可以实现：</span><br><span class=\"line\"></span><br><span class=\"line\">先使用 Vim 打开第一个文件，接着输入命 令 &quot;:sp/etc/shadow&quot; 水平切分窗口，然后按回车键；如果想垂直切分窗口则可以输入 &quot;:vs/etc/shadow&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">可以直接执行命令&quot;vim -o 第一个文件名 第二个文件名&quot;，也就是 &quot;vim-o /etc/passwd /etc/shadow&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">如果想将一个文件的内容全部复制到另一个文件中，则可以输入命令 &quot;:r 被复制的文件名&quot;，即可将导入文件的全部内容复制到当前光标所在行下面。</span><br><span class=\"line\"></span><br><span class=\"line\">设置参数\t含 义</span><br><span class=\"line\">:set nu</span><br><span class=\"line\">:set nonu\t设置与取消行号。</span><br><span class=\"line\">:syn on</span><br><span class=\"line\">:syn off\t是否依据语法显示相关的颜色帮助。在Vim中修改相关的配置文件或Shell脚本文件 时（如前面示例的脚本/etc/init.d/sshd)，默认会显示相应的颜色，用来帮助排错。如果觉得颜色产生了干扰，则可以取消此设置</span><br><span class=\"line\">set hlsearch</span><br><span class=\"line\">set nohlsearch\t设置是否将査找的字符串高亮显示。默认是hlsearch高亮显示</span><br><span class=\"line\">set nobackup</span><br><span class=\"line\">set backup\t是否保存自动备份文件。默认是nobackup不自动备份。如果设定了:set backup，则会产生“文件名〜”作为备份文件</span><br><span class=\"line\">set ruler</span><br><span class=\"line\">set noruler\t设置是否显示右下角的状态栏。默认是ruler显示</span><br><span class=\"line\">set showmode</span><br><span class=\"line\">set noshowmode\t设置是否在左下角显示如“一INSERT--”之类的状态栏。默认是showmode显示</span><br><span class=\"line\"></span><br><span class=\"line\">  x 删除当前光标下的字符(&quot;dl&quot;的快捷命令)</span><br><span class=\"line\">  X 删除当前光标之前的字符(&quot;dh&quot;的快捷命令)</span><br><span class=\"line\">  D 删除自当前光标至行尾的内容(&quot;d$&quot;的快捷命令)</span><br><span class=\"line\">  dw 删除自当前光标至下一个word的开头</span><br><span class=\"line\">  db 删除自当前光标至前一个word的开始</span><br><span class=\"line\">  diw 删除当前光标所在的word(不包括空白字符)</span><br><span class=\"line\">  daw 删除当前光标所在的word(包括空白字符)</span><br><span class=\"line\">  dG 删除当前行至文件尾的内容</span><br><span class=\"line\">  dgg 删除当前行至文件头的内容</span><br><span class=\"line\">  如果你用&quot;c&quot;命令代替&quot;d&quot;这些命令就都变成更改命令。使用&quot;y&quot;就是yank命令，如此类推。</span><br><span class=\"line\"></span><br><span class=\"line\">  在文本中查找下一个word</span><br><span class=\"line\">  把光标定位于这个word上然后按下&quot;*&quot;键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。&quot;#&quot;命令是&quot;*&quot;的反向版。还可以在这两个命令前加一个命令计数:&quot;3*&quot;查找当前光标下的word的第三次出现。</span><br><span class=\"line\"></span><br><span class=\"line\"># 大小写转换</span><br><span class=\"line\">guu                             : 行小写</span><br><span class=\"line\">gUU                             : 行大写</span><br><span class=\"line\">g~~                             : 行翻转</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w 或 W\t光标移动至下一个单词的单词首</span><br><span class=\"line\"></span><br><span class=\"line\">b 或 B\t光标移动至上一个单词的单词首</span><br><span class=\"line\"></span><br><span class=\"line\">e 或 E\t光标移动至下一个单词的单词尾</span><br><span class=\"line\"></span><br><span class=\"line\">nw 或 nW\tn 为数字，表示光标向右移动 n 个单词</span><br><span class=\"line\"></span><br><span class=\"line\">nb 或 nB\tn 为数字，表示光标向左移动 n 个单词</span><br><span class=\"line\"></span><br><span class=\"line\">0 或 ^\t光标移动至当前行的行首</span><br><span class=\"line\"></span><br><span class=\"line\">$\t光标移动至当前行的行尾</span><br><span class=\"line\"></span><br><span class=\"line\">n$\t光标移动至当前行只有 n 行的行尾，n为数字</span><br><span class=\"line\"></span><br><span class=\"line\">例如，在査看 /etc/passwd 时需要参考 /etc/shadow，有两种办法可以实现：</span><br><span class=\"line\"></span><br><span class=\"line\">先使用 Vim 打开第一个文件，接着输入命 令 &quot;:sp/etc/shadow&quot; 水平切分窗口，然后按回车键；如果想垂直切分窗口则可以输入 &quot;:vs/etc/shadow&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">可以直接执行命令&quot;vim -o 第一个文件名 第二个文件名&quot;，也就是 &quot;vim-o /etc/passwd /etc/shadow&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">如果想将一个文件的内容全部复制到另一个文件中，则可以输入命令 &quot;:r 被复制的文件名&quot;，即可将导入文件的全部内容复制到当前光标所在行下面。</span><br><span class=\"line\"></span><br><span class=\"line\">设置参数\t含 义</span><br><span class=\"line\">:set nu</span><br><span class=\"line\">:set nonu\t设置与取消行号。</span><br><span class=\"line\">:syn on</span><br><span class=\"line\">:syn off\t是否依据语法显示相关的颜色帮助。在Vim中修改相关的配置文件或Shell脚本文件 时（如前面示例的脚本/etc/init.d/sshd)，默认会显示相应的颜色，用来帮助排错。如果觉得颜色产生了干扰，则可以取消此设置</span><br><span class=\"line\">set hlsearch</span><br><span class=\"line\">set nohlsearch\t设置是否将査找的字符串高亮显示。默认是hlsearch高亮显示</span><br><span class=\"line\">set nobackup</span><br><span class=\"line\">set backup\t是否保存自动备份文件。默认是nobackup不自动备份。如果设定了:set backup，则会产生“文件名〜”作为备份文件</span><br><span class=\"line\">set ruler</span><br><span class=\"line\">set noruler\t设置是否显示右下角的状态栏。默认是ruler显示</span><br><span class=\"line\">set showmode</span><br><span class=\"line\">set noshowmode\t设置是否在左下角显示如“一INSERT--”之类的状态栏。默认是showmode显示</span><br><span class=\"line\"></span><br><span class=\"line\">  x 删除当前光标下的字符(&quot;dl&quot;的快捷命令)</span><br><span class=\"line\">  X 删除当前光标之前的字符(&quot;dh&quot;的快捷命令)</span><br><span class=\"line\">  D 删除自当前光标至行尾的内容(&quot;d$&quot;的快捷命令)</span><br><span class=\"line\">  dw 删除自当前光标至下一个word的开头</span><br><span class=\"line\">  db 删除自当前光标至前一个word的开始</span><br><span class=\"line\">  diw 删除当前光标所在的word(不包括空白字符)</span><br><span class=\"line\">  daw 删除当前光标所在的word(包括空白字符)</span><br><span class=\"line\">  dG 删除当前行至文件尾的内容</span><br><span class=\"line\">  dgg 删除当前行至文件头的内容</span><br><span class=\"line\">  如果你用&quot;c&quot;命令代替&quot;d&quot;这些命令就都变成更改命令。使用&quot;y&quot;就是yank命令，如此类推。</span><br><span class=\"line\"></span><br><span class=\"line\">  在文本中查找下一个word</span><br><span class=\"line\">  把光标定位于这个word上然后按下&quot;*&quot;键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。&quot;#&quot;命令是&quot;*&quot;的反向版。还可以在这两个命令前加一个命令计数:&quot;3*&quot;查找当前光标下的word的第三次出现。</span><br><span class=\"line\"></span><br><span class=\"line\"># 大小写转换</span><br><span class=\"line\">guu                             : 行小写</span><br><span class=\"line\">gUU                             : 行大写</span><br><span class=\"line\">g~~                             : 行翻转</span><br></pre></td></tr></table></figure>\n"},{"title":"shell基本命令","date":"2019-04-21T01:36:41.000Z","_content":"## shell基本命令\n把多个文件夹中的内容复制到同一个文件下\n```$xslt\ncp -r ./file1 ./file2  /root\n```\nuname -r 获取系统版本\n```$xslt\nsh-4.2# uname -r\n3.10.0-957.10.1.el7.x86_64\n```\nunset重新设置变量内容\n```$xslt\nunset name\n```\ndate 格式化\n```$xslt\nsh-4.2# date +%Y/%m/%d\n2019/04/21\n\nsh-4.2# date +%H:%m\n08:04\n```\ncal 查看日历\n\nbc 计算器\n\n搜索：\n```$xslt\n/string  向上搜索N\n?string  向下搜索n\n```\n正确的关机方法\n```bash\nshutdown\npoweroff\nhalt \n```\n重启方法\n```\nreboot\n```\n添加用户和密码\n```\nuseradd wp\npasswd wp\n```","source":"_posts/shell-1.md","raw":"---\ntitle: shell基本命令\ndate: 2019-04-21 09:36:41\ntags:\n---\n## shell基本命令\n把多个文件夹中的内容复制到同一个文件下\n```$xslt\ncp -r ./file1 ./file2  /root\n```\nuname -r 获取系统版本\n```$xslt\nsh-4.2# uname -r\n3.10.0-957.10.1.el7.x86_64\n```\nunset重新设置变量内容\n```$xslt\nunset name\n```\ndate 格式化\n```$xslt\nsh-4.2# date +%Y/%m/%d\n2019/04/21\n\nsh-4.2# date +%H:%m\n08:04\n```\ncal 查看日历\n\nbc 计算器\n\n搜索：\n```$xslt\n/string  向上搜索N\n?string  向下搜索n\n```\n正确的关机方法\n```bash\nshutdown\npoweroff\nhalt \n```\n重启方法\n```\nreboot\n```\n添加用户和密码\n```\nuseradd wp\npasswd wp\n```","slug":"shell-1","published":1,"updated":"2019-04-21T11:05:58.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kgp001bgkxr11zy4jag","content":"<h2 id=\"shell基本命令\"><a href=\"#shell基本命令\" class=\"headerlink\" title=\"shell基本命令\"></a>shell基本命令</h2><p>把多个文件夹中的内容复制到同一个文件下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r ./file1 ./file2  /root</span><br></pre></td></tr></table></figure></p>\n<p>uname -r 获取系统版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh-4.2# uname -r</span><br><span class=\"line\">3.10.0-957.10.1.el7.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>unset重新设置变量内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset name</span><br></pre></td></tr></table></figure></p>\n<p>date 格式化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh-4.2# date +%Y/%m/%d</span><br><span class=\"line\">2019/04/21</span><br><span class=\"line\"></span><br><span class=\"line\">sh-4.2# date +%H:%m</span><br><span class=\"line\">08:04</span><br></pre></td></tr></table></figure></p>\n<p>cal 查看日历</p>\n<p>bc 计算器</p>\n<p>搜索：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/string  向上搜索N</span><br><span class=\"line\">?string  向下搜索n</span><br></pre></td></tr></table></figure></p>\n<p>正确的关机方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown</span><br><span class=\"line\">poweroff</span><br><span class=\"line\">halt</span><br></pre></td></tr></table></figure></p>\n<p>重启方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure></p>\n<p>添加用户和密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd wp</span><br><span class=\"line\">passwd wp</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"shell基本命令\"><a href=\"#shell基本命令\" class=\"headerlink\" title=\"shell基本命令\"></a>shell基本命令</h2><p>把多个文件夹中的内容复制到同一个文件下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r ./file1 ./file2  /root</span><br></pre></td></tr></table></figure></p>\n<p>uname -r 获取系统版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh-4.2# uname -r</span><br><span class=\"line\">3.10.0-957.10.1.el7.x86_64</span><br></pre></td></tr></table></figure></p>\n<p>unset重新设置变量内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset name</span><br></pre></td></tr></table></figure></p>\n<p>date 格式化<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh-4.2# date +%Y/%m/%d</span><br><span class=\"line\">2019/04/21</span><br><span class=\"line\"></span><br><span class=\"line\">sh-4.2# date +%H:%m</span><br><span class=\"line\">08:04</span><br></pre></td></tr></table></figure></p>\n<p>cal 查看日历</p>\n<p>bc 计算器</p>\n<p>搜索：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/string  向上搜索N</span><br><span class=\"line\">?string  向下搜索n</span><br></pre></td></tr></table></figure></p>\n<p>正确的关机方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown</span><br><span class=\"line\">poweroff</span><br><span class=\"line\">halt</span><br></pre></td></tr></table></figure></p>\n<p>重启方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure></p>\n<p>添加用户和密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd wp</span><br><span class=\"line\">passwd wp</span><br></pre></td></tr></table></figure></p>\n"},{"title":"如何在 Linux 中不使用 CD 命令进入目录/文件夹","date":"2019-04-12T02:00:06.000Z","_content":"\n众所周知，如果没有 cd 命令，我们无法 Linux 中切换目录。这个没错，但我们有一个名为 shopt的 Linux 内置命令能帮助我们解决这个问题。\n\nshopt[1] 是一个 shell 内置命令，用于设置和取消设置各种 bash shell 选项，由于它已安装，因此我们不需要再次安装它。\n\n是的，我们可以在启用此选项后，可以不使用 cd 命令切换目录。\n\n我们将在本文中向你展示如何操作。这是一个小的调整，但对于那些从 Windows 迁移到 Linux 的新手来说非常有用。\n\n这对 Linux 管理员没用，因为我们不会在没有 cd 命令的情况下切换到该目录，因为我们对此有经验。\n\n如果你尝试在没有 cd 命令的情况下切换 Linux 的目录/文件夹，你将看到以下错误消息。这在 Linux 中很常见。\n\n$ Documents/\nbash: Documents/: Is a directory\n为此，我们需要在用户 .bashrc 中追加以下值。\n\n什么是 .bashrc ？\n\n.bashrc 是一个 shell 脚本，每次用户以交互模式打开新 shell 时都会运行该脚本。\n\n你可以在该文件中添加要在命令提示符下输入的任何命令。\n\n.bashrc 文件本身包含终端会话的一系列配置。包括设置和启用：着色、补全，shell 历史，命令别名等。\n\n$ vi ~/.bashrc\n加入这一行：\n\nshopt -s autocd\n运行以下命令使更改生效。\n\n$ source ~/.bashrc\n我们已完成所有配置。简单地对此进行测试以确认这是否有效。\n\n$ Documents/\ncd -- Documents/\n$ daygeek/\ncd -- daygeek/\n$ /home/daygeek/Documents/daygeek\ncd -- /home/daygeek/Documents/daygeek\n$ pwd\n/home/daygeek/Documents/daygeek\n\n是的，它正如预期的那样正常工作。\n\n而且，它在 fish shell 中工作正常，而无需对 .bashrc 进行任何更改。\n\n\n如果要暂时执行此操作，请使用以下命令（设置或取消设置）。重启系统时，它将消失。\n\n# shopt -s autocd\n# shopt | grep autocd\nautocd  on\n# shopt -u autocd\n# shopt | grep autocd\nautocd  off\nshopt 命令提供了许多其他选项，如果要验证这些选项，请运行以下命令。\n\n$ shopt\nautocd  on\nassoc_expand_once   off\ncdable_vars     off\ncdspell     on\ncheckhash   off\ncheckjobs   off\ncheckwinsize    on\ncmdhist     on\ncompat31    off\ncompat32    off\ncompat40    off\ncompat41    off\ncompat42    off\ncompat43    off\ncompat44    off\ncomplete_fullquote  on\ndirexpand   off\ndirspell    off\ndotglob     off\nexecfail    off\nexpand_aliases  on\nextdebug    off\nextglob     off\nextquote    on\nfailglob    off\nforce_fignore   on\nglobasciiranges on\nglobstar    off\ngnu_errfmt  off\nhistappend  on\nhistreedit  off\nhistverify  off\nhostcomplete    on\nhuponexit   off\ninherit_errexit off\ninteractive_comments    on\nlastpipe    off\nlithist     off\nlocalvar_inherit    off\nlocalvar_unset  off\nlogin_shell     off\nmailwarn    off\nno_empty_cmd_completion off\nnocaseglob  off\nnocasematch     off\nnullglob    off\nprogcomp    on\nprogcomp_alias  off\npromptvars  on\nrestricted_shell    off\nshift_verbose   off\nsourcepath  on\nxpg_echo    off\n此外，我找到了一些其他程序，它们可以帮助我们在 Linux 中比 cd 命令更快地切换目录。\n\n它们是 pushd、popd、up shell 脚本和 bd 工具。我们将在接下来的文章中介绍这些主题。\n\nvia: https://www.2daygeek.com/navigate-switch-directory-without-using-cd-command-in-linux/","source":"_posts/如何在-Linux-中不使用-CD-命令进入目录-文件夹.md","raw":"---\ntitle: 如何在 Linux 中不使用 CD 命令进入目录/文件夹\ndate: 2019-04-12 10:00:06\ntags: [linux]\n---\n\n众所周知，如果没有 cd 命令，我们无法 Linux 中切换目录。这个没错，但我们有一个名为 shopt的 Linux 内置命令能帮助我们解决这个问题。\n\nshopt[1] 是一个 shell 内置命令，用于设置和取消设置各种 bash shell 选项，由于它已安装，因此我们不需要再次安装它。\n\n是的，我们可以在启用此选项后，可以不使用 cd 命令切换目录。\n\n我们将在本文中向你展示如何操作。这是一个小的调整，但对于那些从 Windows 迁移到 Linux 的新手来说非常有用。\n\n这对 Linux 管理员没用，因为我们不会在没有 cd 命令的情况下切换到该目录，因为我们对此有经验。\n\n如果你尝试在没有 cd 命令的情况下切换 Linux 的目录/文件夹，你将看到以下错误消息。这在 Linux 中很常见。\n\n$ Documents/\nbash: Documents/: Is a directory\n为此，我们需要在用户 .bashrc 中追加以下值。\n\n什么是 .bashrc ？\n\n.bashrc 是一个 shell 脚本，每次用户以交互模式打开新 shell 时都会运行该脚本。\n\n你可以在该文件中添加要在命令提示符下输入的任何命令。\n\n.bashrc 文件本身包含终端会话的一系列配置。包括设置和启用：着色、补全，shell 历史，命令别名等。\n\n$ vi ~/.bashrc\n加入这一行：\n\nshopt -s autocd\n运行以下命令使更改生效。\n\n$ source ~/.bashrc\n我们已完成所有配置。简单地对此进行测试以确认这是否有效。\n\n$ Documents/\ncd -- Documents/\n$ daygeek/\ncd -- daygeek/\n$ /home/daygeek/Documents/daygeek\ncd -- /home/daygeek/Documents/daygeek\n$ pwd\n/home/daygeek/Documents/daygeek\n\n是的，它正如预期的那样正常工作。\n\n而且，它在 fish shell 中工作正常，而无需对 .bashrc 进行任何更改。\n\n\n如果要暂时执行此操作，请使用以下命令（设置或取消设置）。重启系统时，它将消失。\n\n# shopt -s autocd\n# shopt | grep autocd\nautocd  on\n# shopt -u autocd\n# shopt | grep autocd\nautocd  off\nshopt 命令提供了许多其他选项，如果要验证这些选项，请运行以下命令。\n\n$ shopt\nautocd  on\nassoc_expand_once   off\ncdable_vars     off\ncdspell     on\ncheckhash   off\ncheckjobs   off\ncheckwinsize    on\ncmdhist     on\ncompat31    off\ncompat32    off\ncompat40    off\ncompat41    off\ncompat42    off\ncompat43    off\ncompat44    off\ncomplete_fullquote  on\ndirexpand   off\ndirspell    off\ndotglob     off\nexecfail    off\nexpand_aliases  on\nextdebug    off\nextglob     off\nextquote    on\nfailglob    off\nforce_fignore   on\nglobasciiranges on\nglobstar    off\ngnu_errfmt  off\nhistappend  on\nhistreedit  off\nhistverify  off\nhostcomplete    on\nhuponexit   off\ninherit_errexit off\ninteractive_comments    on\nlastpipe    off\nlithist     off\nlocalvar_inherit    off\nlocalvar_unset  off\nlogin_shell     off\nmailwarn    off\nno_empty_cmd_completion off\nnocaseglob  off\nnocasematch     off\nnullglob    off\nprogcomp    on\nprogcomp_alias  off\npromptvars  on\nrestricted_shell    off\nshift_verbose   off\nsourcepath  on\nxpg_echo    off\n此外，我找到了一些其他程序，它们可以帮助我们在 Linux 中比 cd 命令更快地切换目录。\n\n它们是 pushd、popd、up shell 脚本和 bd 工具。我们将在接下来的文章中介绍这些主题。\n\nvia: https://www.2daygeek.com/navigate-switch-directory-without-using-cd-command-in-linux/","slug":"如何在-Linux-中不使用-CD-命令进入目录-文件夹","published":1,"updated":"2019-07-02T13:19:11.224Z","_id":"cjxlu2kgq001cgkxreown214s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>众所周知，如果没有 cd 命令，我们无法 Linux 中切换目录。这个没错，但我们有一个名为 shopt的 Linux 内置命令能帮助我们解决这个问题。</p>\n<p>shopt[1] 是一个 shell 内置命令，用于设置和取消设置各种 bash shell 选项，由于它已安装，因此我们不需要再次安装它。</p>\n<p>是的，我们可以在启用此选项后，可以不使用 cd 命令切换目录。</p>\n<p>我们将在本文中向你展示如何操作。这是一个小的调整，但对于那些从 Windows 迁移到 Linux 的新手来说非常有用。</p>\n<p>这对 Linux 管理员没用，因为我们不会在没有 cd 命令的情况下切换到该目录，因为我们对此有经验。</p>\n<p>如果你尝试在没有 cd 命令的情况下切换 Linux 的目录/文件夹，你将看到以下错误消息。这在 Linux 中很常见。</p>\n<p>$ Documents/<br>bash: Documents/: Is a directory<br>为此，我们需要在用户 .bashrc 中追加以下值。</p>\n<p>什么是 .bashrc ？</p>\n<p>.bashrc 是一个 shell 脚本，每次用户以交互模式打开新 shell 时都会运行该脚本。</p>\n<p>你可以在该文件中添加要在命令提示符下输入的任何命令。</p>\n<p>.bashrc 文件本身包含终端会话的一系列配置。包括设置和启用：着色、补全，shell 历史，命令别名等。</p>\n<p>$ vi ~/.bashrc<br>加入这一行：</p>\n<p>shopt -s autocd<br>运行以下命令使更改生效。</p>\n<p>$ source ~/.bashrc<br>我们已完成所有配置。简单地对此进行测试以确认这是否有效。</p>\n<p>$ Documents/<br>cd – Documents/<br>$ daygeek/<br>cd – daygeek/<br>$ /home/daygeek/Documents/daygeek<br>cd – /home/daygeek/Documents/daygeek<br>$ pwd<br>/home/daygeek/Documents/daygeek</p>\n<p>是的，它正如预期的那样正常工作。</p>\n<p>而且，它在 fish shell 中工作正常，而无需对 .bashrc 进行任何更改。</p>\n<p>如果要暂时执行此操作，请使用以下命令（设置或取消设置）。重启系统时，它将消失。</p>\n<h1 id=\"shopt-s-autocd\"><a href=\"#shopt-s-autocd\" class=\"headerlink\" title=\"shopt -s autocd\"></a>shopt -s autocd</h1><h1 id=\"shopt-grep-autocd\"><a href=\"#shopt-grep-autocd\" class=\"headerlink\" title=\"shopt | grep autocd\"></a>shopt | grep autocd</h1><p>autocd  on</p>\n<h1 id=\"shopt-u-autocd\"><a href=\"#shopt-u-autocd\" class=\"headerlink\" title=\"shopt -u autocd\"></a>shopt -u autocd</h1><h1 id=\"shopt-grep-autocd-1\"><a href=\"#shopt-grep-autocd-1\" class=\"headerlink\" title=\"shopt | grep autocd\"></a>shopt | grep autocd</h1><p>autocd  off<br>shopt 命令提供了许多其他选项，如果要验证这些选项，请运行以下命令。</p>\n<p>$ shopt<br>autocd  on<br>assoc_expand_once   off<br>cdable_vars     off<br>cdspell     on<br>checkhash   off<br>checkjobs   off<br>checkwinsize    on<br>cmdhist     on<br>compat31    off<br>compat32    off<br>compat40    off<br>compat41    off<br>compat42    off<br>compat43    off<br>compat44    off<br>complete_fullquote  on<br>direxpand   off<br>dirspell    off<br>dotglob     off<br>execfail    off<br>expand_aliases  on<br>extdebug    off<br>extglob     off<br>extquote    on<br>failglob    off<br>force_fignore   on<br>globasciiranges on<br>globstar    off<br>gnu_errfmt  off<br>histappend  on<br>histreedit  off<br>histverify  off<br>hostcomplete    on<br>huponexit   off<br>inherit_errexit off<br>interactive_comments    on<br>lastpipe    off<br>lithist     off<br>localvar_inherit    off<br>localvar_unset  off<br>login_shell     off<br>mailwarn    off<br>no_empty_cmd_completion off<br>nocaseglob  off<br>nocasematch     off<br>nullglob    off<br>progcomp    on<br>progcomp_alias  off<br>promptvars  on<br>restricted_shell    off<br>shift_verbose   off<br>sourcepath  on<br>xpg_echo    off<br>此外，我找到了一些其他程序，它们可以帮助我们在 Linux 中比 cd 命令更快地切换目录。</p>\n<p>它们是 pushd、popd、up shell 脚本和 bd 工具。我们将在接下来的文章中介绍这些主题。</p>\n<p>via: <a href=\"https://www.2daygeek.com/navigate-switch-directory-without-using-cd-command-in-linux/\" target=\"_blank\" rel=\"noopener\">https://www.2daygeek.com/navigate-switch-directory-without-using-cd-command-in-linux/</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>众所周知，如果没有 cd 命令，我们无法 Linux 中切换目录。这个没错，但我们有一个名为 shopt的 Linux 内置命令能帮助我们解决这个问题。</p>\n<p>shopt[1] 是一个 shell 内置命令，用于设置和取消设置各种 bash shell 选项，由于它已安装，因此我们不需要再次安装它。</p>\n<p>是的，我们可以在启用此选项后，可以不使用 cd 命令切换目录。</p>\n<p>我们将在本文中向你展示如何操作。这是一个小的调整，但对于那些从 Windows 迁移到 Linux 的新手来说非常有用。</p>\n<p>这对 Linux 管理员没用，因为我们不会在没有 cd 命令的情况下切换到该目录，因为我们对此有经验。</p>\n<p>如果你尝试在没有 cd 命令的情况下切换 Linux 的目录/文件夹，你将看到以下错误消息。这在 Linux 中很常见。</p>\n<p>$ Documents/<br>bash: Documents/: Is a directory<br>为此，我们需要在用户 .bashrc 中追加以下值。</p>\n<p>什么是 .bashrc ？</p>\n<p>.bashrc 是一个 shell 脚本，每次用户以交互模式打开新 shell 时都会运行该脚本。</p>\n<p>你可以在该文件中添加要在命令提示符下输入的任何命令。</p>\n<p>.bashrc 文件本身包含终端会话的一系列配置。包括设置和启用：着色、补全，shell 历史，命令别名等。</p>\n<p>$ vi ~/.bashrc<br>加入这一行：</p>\n<p>shopt -s autocd<br>运行以下命令使更改生效。</p>\n<p>$ source ~/.bashrc<br>我们已完成所有配置。简单地对此进行测试以确认这是否有效。</p>\n<p>$ Documents/<br>cd – Documents/<br>$ daygeek/<br>cd – daygeek/<br>$ /home/daygeek/Documents/daygeek<br>cd – /home/daygeek/Documents/daygeek<br>$ pwd<br>/home/daygeek/Documents/daygeek</p>\n<p>是的，它正如预期的那样正常工作。</p>\n<p>而且，它在 fish shell 中工作正常，而无需对 .bashrc 进行任何更改。</p>\n<p>如果要暂时执行此操作，请使用以下命令（设置或取消设置）。重启系统时，它将消失。</p>\n<h1 id=\"shopt-s-autocd\"><a href=\"#shopt-s-autocd\" class=\"headerlink\" title=\"shopt -s autocd\"></a>shopt -s autocd</h1><h1 id=\"shopt-grep-autocd\"><a href=\"#shopt-grep-autocd\" class=\"headerlink\" title=\"shopt | grep autocd\"></a>shopt | grep autocd</h1><p>autocd  on</p>\n<h1 id=\"shopt-u-autocd\"><a href=\"#shopt-u-autocd\" class=\"headerlink\" title=\"shopt -u autocd\"></a>shopt -u autocd</h1><h1 id=\"shopt-grep-autocd-1\"><a href=\"#shopt-grep-autocd-1\" class=\"headerlink\" title=\"shopt | grep autocd\"></a>shopt | grep autocd</h1><p>autocd  off<br>shopt 命令提供了许多其他选项，如果要验证这些选项，请运行以下命令。</p>\n<p>$ shopt<br>autocd  on<br>assoc_expand_once   off<br>cdable_vars     off<br>cdspell     on<br>checkhash   off<br>checkjobs   off<br>checkwinsize    on<br>cmdhist     on<br>compat31    off<br>compat32    off<br>compat40    off<br>compat41    off<br>compat42    off<br>compat43    off<br>compat44    off<br>complete_fullquote  on<br>direxpand   off<br>dirspell    off<br>dotglob     off<br>execfail    off<br>expand_aliases  on<br>extdebug    off<br>extglob     off<br>extquote    on<br>failglob    off<br>force_fignore   on<br>globasciiranges on<br>globstar    off<br>gnu_errfmt  off<br>histappend  on<br>histreedit  off<br>histverify  off<br>hostcomplete    on<br>huponexit   off<br>inherit_errexit off<br>interactive_comments    on<br>lastpipe    off<br>lithist     off<br>localvar_inherit    off<br>localvar_unset  off<br>login_shell     off<br>mailwarn    off<br>no_empty_cmd_completion off<br>nocaseglob  off<br>nocasematch     off<br>nullglob    off<br>progcomp    on<br>progcomp_alias  off<br>promptvars  on<br>restricted_shell    off<br>shift_verbose   off<br>sourcepath  on<br>xpg_echo    off<br>此外，我找到了一些其他程序，它们可以帮助我们在 Linux 中比 cd 命令更快地切换目录。</p>\n<p>它们是 pushd、popd、up shell 脚本和 bd 工具。我们将在接下来的文章中介绍这些主题。</p>\n<p>via: <a href=\"https://www.2daygeek.com/navigate-switch-directory-without-using-cd-command-in-linux/\" target=\"_blank\" rel=\"noopener\">https://www.2daygeek.com/navigate-switch-directory-without-using-cd-command-in-linux/</a></p>\n"},{"title":"yum  源加速设置","date":"2019-04-13T02:29:37.000Z","_content":"\nyum 安装完成后生成的配置文件及目录：\n\n主配置文件：/etc/yum.conf\n资源库配置目录：/etc/yum.repos.d\n重要文件： /etc/yum.repos.d/CentOS-Base.repo\nyum 加速插件：\n实现的功能：可以自动选择速度最快的镜像\n\n安装yum 加速插件： \nyum install yum-plugin-fastestmirror\n加速插件的配置文件：\n/etc/yum/pluginconf.d/fastestmirror.conf\nyum镜像的速度测试记录文件：\n/var/cache/yum/timedhosts.txt\n更换系统默认yum 源\n举例：以更换yum源为阿里云yum源\n\n备份系统默认的yum源\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n\n下载阿里云yum源\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n添加 epel 源\n\nyum -y install epel-release.noarch\n常用的yum源\nepel源：https://fedoraproject.org/wiki/EPEL\nrepoforge源：http://repoforge.org/use/\nphp和mysql源：https://webtatic.com\n\n清理缓存\nyum clean all\n\n生成新的缓存\nyum makecache","source":"_posts/yum.md","raw":"---\ntitle: yum  源加速设置\ndate: 2019-04-13 10:29:37\ntags: [linux]\n---\n\nyum 安装完成后生成的配置文件及目录：\n\n主配置文件：/etc/yum.conf\n资源库配置目录：/etc/yum.repos.d\n重要文件： /etc/yum.repos.d/CentOS-Base.repo\nyum 加速插件：\n实现的功能：可以自动选择速度最快的镜像\n\n安装yum 加速插件： \nyum install yum-plugin-fastestmirror\n加速插件的配置文件：\n/etc/yum/pluginconf.d/fastestmirror.conf\nyum镜像的速度测试记录文件：\n/var/cache/yum/timedhosts.txt\n更换系统默认yum 源\n举例：以更换yum源为阿里云yum源\n\n备份系统默认的yum源\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n\n下载阿里云yum源\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n添加 epel 源\n\nyum -y install epel-release.noarch\n常用的yum源\nepel源：https://fedoraproject.org/wiki/EPEL\nrepoforge源：http://repoforge.org/use/\nphp和mysql源：https://webtatic.com\n\n清理缓存\nyum clean all\n\n生成新的缓存\nyum makecache","slug":"yum","published":1,"updated":"2019-07-02T13:19:11.244Z","_id":"cjxlu2kgs001egkxrayv5yu8h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>yum 安装完成后生成的配置文件及目录：</p>\n<p>主配置文件：/etc/yum.conf<br>资源库配置目录：/etc/yum.repos.d<br>重要文件： /etc/yum.repos.d/CentOS-Base.repo<br>yum 加速插件：<br>实现的功能：可以自动选择速度最快的镜像</p>\n<p>安装yum 加速插件：<br>yum install yum-plugin-fastestmirror<br>加速插件的配置文件：<br>/etc/yum/pluginconf.d/fastestmirror.conf<br>yum镜像的速度测试记录文件：<br>/var/cache/yum/timedhosts.txt<br>更换系统默认yum 源<br>举例：以更换yum源为阿里云yum源</p>\n<p>备份系统默认的yum源<br>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</p>\n<p>下载阿里云yum源</p>\n<p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href=\"http://mirrors.aliyun.com/repo/Centos-7.repo\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p>\n<p>添加 epel 源</p>\n<p>yum -y install epel-release.noarch<br>常用的yum源<br>epel源：<a href=\"https://fedoraproject.org/wiki/EPEL\" target=\"_blank\" rel=\"noopener\">https://fedoraproject.org/wiki/EPEL</a><br>repoforge源：<a href=\"http://repoforge.org/use/\" target=\"_blank\" rel=\"noopener\">http://repoforge.org/use/</a><br>php和mysql源：<a href=\"https://webtatic.com\" target=\"_blank\" rel=\"noopener\">https://webtatic.com</a></p>\n<p>清理缓存<br>yum clean all</p>\n<p>生成新的缓存<br>yum makecache</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>yum 安装完成后生成的配置文件及目录：</p>\n<p>主配置文件：/etc/yum.conf<br>资源库配置目录：/etc/yum.repos.d<br>重要文件： /etc/yum.repos.d/CentOS-Base.repo<br>yum 加速插件：<br>实现的功能：可以自动选择速度最快的镜像</p>\n<p>安装yum 加速插件：<br>yum install yum-plugin-fastestmirror<br>加速插件的配置文件：<br>/etc/yum/pluginconf.d/fastestmirror.conf<br>yum镜像的速度测试记录文件：<br>/var/cache/yum/timedhosts.txt<br>更换系统默认yum 源<br>举例：以更换yum源为阿里云yum源</p>\n<p>备份系统默认的yum源<br>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</p>\n<p>下载阿里云yum源</p>\n<p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href=\"http://mirrors.aliyun.com/repo/Centos-7.repo\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p>\n<p>添加 epel 源</p>\n<p>yum -y install epel-release.noarch<br>常用的yum源<br>epel源：<a href=\"https://fedoraproject.org/wiki/EPEL\" target=\"_blank\" rel=\"noopener\">https://fedoraproject.org/wiki/EPEL</a><br>repoforge源：<a href=\"http://repoforge.org/use/\" target=\"_blank\" rel=\"noopener\">http://repoforge.org/use/</a><br>php和mysql源：<a href=\"https://webtatic.com\" target=\"_blank\" rel=\"noopener\">https://webtatic.com</a></p>\n<p>清理缓存<br>yum clean all</p>\n<p>生成新的缓存<br>yum makecache</p>\n"},{"title":"redis","date":"2019-02-27T03:49:23.000Z","_content":"\n###  github.com/garyburd/redigo/redis  \n\n#### 遇到的坑：\n\n#### 并发\nConnections支持Receive方法的一个并发调用者和Send和Flush方法的一个并发调用者。不支持其他并发，包括对Do和Close方法的并发调用。\n要完全并发访问Redis，请使用线程安全池从goroutine中获取，使用和释放连接。从池返回的连接具有上一段中描述的并发限制。\n#### 清空redis 数据\n```\nflushall\n```","source":"_posts/redis.md","raw":"---\ntitle: redis\ndate: 2019-02-27 11:49:23\ntags: [redis]\n---\n\n###  github.com/garyburd/redigo/redis  \n\n#### 遇到的坑：\n\n#### 并发\nConnections支持Receive方法的一个并发调用者和Send和Flush方法的一个并发调用者。不支持其他并发，包括对Do和Close方法的并发调用。\n要完全并发访问Redis，请使用线程安全池从goroutine中获取，使用和释放连接。从池返回的连接具有上一段中描述的并发限制。\n#### 清空redis 数据\n```\nflushall\n```","slug":"redis","published":1,"updated":"2019-07-02T13:19:11.230Z","_id":"cjxlu2kgt001ggkxry7aulut7","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"github-com-garyburd-redigo-redis\"><a href=\"#github-com-garyburd-redigo-redis\" class=\"headerlink\" title=\"github.com/garyburd/redigo/redis\"></a>github.com/garyburd/redigo/redis</h3><h4 id=\"遇到的坑：\"><a href=\"#遇到的坑：\" class=\"headerlink\" title=\"遇到的坑：\"></a>遇到的坑：</h4><h4 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h4><p>Connections支持Receive方法的一个并发调用者和Send和Flush方法的一个并发调用者。不支持其他并发，包括对Do和Close方法的并发调用。<br>要完全并发访问Redis，请使用线程安全池从goroutine中获取，使用和释放连接。从池返回的连接具有上一段中描述的并发限制。</p>\n<h4 id=\"清空redis-数据\"><a href=\"#清空redis-数据\" class=\"headerlink\" title=\"清空redis 数据\"></a>清空redis 数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"github-com-garyburd-redigo-redis\"><a href=\"#github-com-garyburd-redigo-redis\" class=\"headerlink\" title=\"github.com/garyburd/redigo/redis\"></a>github.com/garyburd/redigo/redis</h3><h4 id=\"遇到的坑：\"><a href=\"#遇到的坑：\" class=\"headerlink\" title=\"遇到的坑：\"></a>遇到的坑：</h4><h4 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h4><p>Connections支持Receive方法的一个并发调用者和Send和Flush方法的一个并发调用者。不支持其他并发，包括对Do和Close方法的并发调用。<br>要完全并发访问Redis，请使用线程安全池从goroutine中获取，使用和释放连接。从池返回的连接具有上一段中描述的并发限制。</p>\n<h4 id=\"清空redis-数据\"><a href=\"#清空redis-数据\" class=\"headerlink\" title=\"清空redis 数据\"></a>清空redis 数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall</span><br></pre></td></tr></table></figure>"},{"title":"kubernetes排除应用程序故障","date":"2019-02-27T13:23:00.000Z","_content":"\n访问上一个容器崩溃的日志\n\n```\nkubernetes logs --previous pod_name  container_name\n```\n\n修改image\n```\nkubectl set image deployments/deploy_name container_name=image\n```\n\nkcc delete po -n default $(kcc get po -n defalut |grep nginx |awk '{print $1}') --force --grace-period=0\n\ndocker rm -f $(docker ps -aq --filter exited=1)\n\n\n可以直接进入容器终端\nkubectl run curl --image=radial/busyboxplus:curl -i --tty -n wp\n\n\nkubectl exec podname -c containername -- printenv","source":"_posts/排除应用程序故障.md","raw":"---\ntitle: kubernetes排除应用程序故障\ndate: 2019-02-27 21:23:00\ntags: [kubernetes]\n---\n\n访问上一个容器崩溃的日志\n\n```\nkubernetes logs --previous pod_name  container_name\n```\n\n修改image\n```\nkubectl set image deployments/deploy_name container_name=image\n```\n\nkcc delete po -n default $(kcc get po -n defalut |grep nginx |awk '{print $1}') --force --grace-period=0\n\ndocker rm -f $(docker ps -aq --filter exited=1)\n\n\n可以直接进入容器终端\nkubectl run curl --image=radial/busyboxplus:curl -i --tty -n wp\n\n\nkubectl exec podname -c containername -- printenv","slug":"排除应用程序故障","published":1,"updated":"2019-07-02T13:19:11.197Z","_id":"cjxlu2kgu001jgkxr97x16qn8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>访问上一个容器崩溃的日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubernetes logs --previous pod_name  container_name</span><br></pre></td></tr></table></figure>\n<p>修改image<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl set image deployments/deploy_name container_name=image</span><br></pre></td></tr></table></figure></p>\n<p>kcc delete po -n default $(kcc get po -n defalut |grep nginx |awk ‘{print $1}’) –force –grace-period=0</p>\n<p>docker rm -f $(docker ps -aq –filter exited=1)</p>\n<p>可以直接进入容器终端<br>kubectl run curl –image=radial/busyboxplus:curl -i –tty -n wp</p>\n<p>kubectl exec podname -c containername – printenv</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>访问上一个容器崩溃的日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubernetes logs --previous pod_name  container_name</span><br></pre></td></tr></table></figure>\n<p>修改image<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl set image deployments/deploy_name container_name=image</span><br></pre></td></tr></table></figure></p>\n<p>kcc delete po -n default $(kcc get po -n defalut |grep nginx |awk ‘{print $1}’) –force –grace-period=0</p>\n<p>docker rm -f $(docker ps -aq –filter exited=1)</p>\n<p>可以直接进入容器终端<br>kubectl run curl –image=radial/busyboxplus:curl -i –tty -n wp</p>\n<p>kubectl exec podname -c containername – printenv</p>\n"},{"title":"Kubernetes中的Admission Controller webhook","date":"2019-06-28T06:39:47.000Z","_content":"\n# Kubernetes中的Admission Controller是做什么的呢？有什么用呢？怎么自己定义一个呢？\n## Q: 什么是Admission Controller?\nA: 官方定义：\n\nAn admission controller is a piece of code that intercepts requests to the Kubernetes API server prior to persistence of the object, but after the request is authenticated and authorized.\n\n我理解的：\n\nAdmission Controller是一个拦截器\n拦截发送给Kuberenetes API Server的请求\n什么时候拦截？在请求通过认证之后，请求被存储起来之前\n\n所以顺理成章，由于拦截的是发送给API Server的请求，所以Admission Controller存在于API Server内部，即compiled into the kube-apiserver binary（被编译进API Server的可执行文件里）。\nkubernetes将AC分为三种：\n\nvalidating，验证型。用于验证k8s的资源定义是否符合规则\nmutating，修改型。用于修改k8s的资源定义，比如加个label什么的\n二者皆是，即同一个AC，既是验证型又是修改型\n\n多个Admission Controller会形成一个Admission Chain（链条），修改型的在前面先执行，验证型的在后面后执行，这样验证型的才能去验证修改的对不对。\nK: interceptor, validating, mutating, Admission Chain\nQ: Admission Controller有什么用？\nA: API Server内置了一些AC，有各种各样的作用[1]。比如：\n\nEventRateLimit，用于限制事件的频率\nLimitRanger，验证所有的请求都没有超出namespace中定义的LimitRange\n\n还有很多其他AC，具体请参考Kubernetes文档。\n这些AC中，有两个对用户来说比较有用：\n\nMutatingAdmissionWebhook，这是一个webhook，即网络钩子，也就是说该AC会去请求服务端，并执行相应的逻辑\nValidatingAdmissionWebhook，也是一个webhook，只是用于验证\n\nQ: 怎么查看哪些AC是打开了的？\nA: 文档上写的用：kube-apiserver -h | grep enable-admission-plugins。但是由于本地是minikube，进入虚拟机之后并没有发现kube-apiserver命令。\n后来发现api-server是以pod的形式运行的：\nkubectl get pods -n kube-system\n\n于是，使用kubectl exec登入pod，然后调用上述的指令，其结果为：\n```\nkube-apiserver -h | grep enable-admission-plugins\n      --admission-control strings              Admission is divided into two phases. In the first phase, only mutating admission plugins run. In the second phase, only validating admission plugins run. The names in the below list may represent a validating plugin, a mutating plugin, or both. The order of plugins in which they are passed to this flag does not matter. Comma-delimited list of: AlwaysAdmit, AlwaysDeny, AlwaysPullImages, DefaultStorageClass, DefaultTolerationSeconds, DenyEscalatingExec, DenyExecOnPrivileged, EventRateLimit, ExtendedResourceToleration, ImagePolicyWebhook, Initializers, LimitPodHardAntiAffinityTopology, LimitRanger, MutatingAdmissionWebhook, NamespaceAutoProvision, NamespaceExists, NamespaceLifecycle, NodeRestriction, OwnerReferencesPermissionEnforcement, PersistentVolumeClaimResize, PersistentVolumeLabel, PodNodeSelector, PodPreset, PodSecurityPolicy, PodTolerationRestriction, Priority, ResourceQuota, SecurityContextDeny, ServiceAccount, StorageObjectInUseProtection, ValidatingAdmissionWebhook. (DEPRECATED: Use --enable-admission-plugins or --disable-admission-plugins instead. Will be removed in a future version.)\n      --enable-admission-plugins strings       admission plugins that should be enabled in addition to default enabled ones (NamespaceLifecycle, LimitRanger, ServiceAccount, Priority, DefaultTolerationSeconds, DefaultStorageClass, PersistentVolumeClaimResize, MutatingAdmissionWebhook, ValidatingAdmissionWebhook, ResourceQuota). Comma-delimited list of admission plugins: AlwaysAdmit, AlwaysDeny, AlwaysPullImages, DefaultStorageClass, DefaultTolerationSeconds, DenyEscalatingExec, DenyExecOnPrivileged, EventRateLimit, ExtendedResourceToleration, ImagePolicyWebhook, Initializers, LimitPodHardAntiAffinityTopology, LimitRanger, MutatingAdmissionWebhook, NamespaceAutoProvision, NamespaceExists, NamespaceLifecycle, NodeRestriction, OwnerReferencesPermissionEnforcement, PersistentVolumeClaimResize, PersistentVolumeLabel, PodNodeSelector, PodPreset, PodSecurityPolicy, PodTolerationRestriction, Priority, ResourceQuota, SecurityContextDeny, ServiceAccount, StorageObjectInUseProtection, ValidatingAdmissionWebhook. The order of plugins in this flag does not matter.\n```\n## Q: Admission webhook是啥？\nA: 官方定义：\n\nAdmission webhooks are HTTP callbacks that receive admission requests and do something with them.\n\n简单来说webhook就是一个HTTP回调，接收admission请求，处理并返回。\n用户可以定义两种webhook:\n\nvalidating admission webhook\nmutating admission webhook\n一个用于验证，另一个用于修改。\nwebhook回调，接收API Server发送的admissionReview请求，并返回 admissionResponse。\n\nK: 回调，admissionReview请求，admissionResponse返回。\nQ: 如何配置和查看WebhookConfiguration?\nA: 以Validating为例，查看：\nkubectl get ValidatingWebhookConfiguration\n\n### ValidatingWebhookConfiguration的资源定义：\n```\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  name: <name of this configuration object>\nwebhooks:\n- name: <webhook name, e.g., pod-policy.example.io>\n  rules:\n  - apiGroups:\n    - \"\"\n    apiVersions:\n    - v1\n    operations:\n    - CREATE\n    resources:\n    - pods\n  clientConfig:\n    service:\n      namespace: <namespace of the front-end service>\n      name: <name of the front-end service>\n    caBundle: <pem encoded ca cert that signs the server cert used by the webhook>\n```\n### 其中rules定义了匹配规则，当发给API Server的请求满足该规则的时候，API Server就会给clientConfig中配置的service发送Admission请求。\n使用webhook有什么要求？\nA: 几点：\n\nkubernetes版本最低是v1.9\napi server使能（enable）了MutatingAdmissionWebhook和ValidatingAdmissionWebhook\nadmissionregistration.k8s.io/v1beta1 API处于enable状态，即使用kubectl api-versions | grep admissionregistration.k8s.io/v1beta1\n\n\n###Q: 如何自己写一个webhook?\n### A: 需要完成几个事情：\n\n创建TLS Certificate，即证书\n编写服务端代码，服务端代码需要使用证书\n根据证书创建k8s sercret\n创建k8s Deployment和Service\n创建k8s WebhookConfiguration，其中需要使用之前创建的证书\n\n具体代码和流程参见[3]［4］\n参考文献：\n[1] https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/\n[2] https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#admission-webhooks\n[3] https://banzaicloud.com/blog/k8s-admission-webhooks/\n[4] https://github.com/morvencao/kube-mutating-webhook-tutorial\n[5] https://github.com/banzaicloud/admission-webhook-example\n\n作者：Mr_Hospital\n链接：https://www.jianshu.com/p/39ae0b6fc907\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。","source":"_posts/webhook.md","raw":"---\ntitle: Kubernetes中的Admission Controller webhook\ndate: 2019-06-28 14:39:47\ntags:\n---\n\n# Kubernetes中的Admission Controller是做什么的呢？有什么用呢？怎么自己定义一个呢？\n## Q: 什么是Admission Controller?\nA: 官方定义：\n\nAn admission controller is a piece of code that intercepts requests to the Kubernetes API server prior to persistence of the object, but after the request is authenticated and authorized.\n\n我理解的：\n\nAdmission Controller是一个拦截器\n拦截发送给Kuberenetes API Server的请求\n什么时候拦截？在请求通过认证之后，请求被存储起来之前\n\n所以顺理成章，由于拦截的是发送给API Server的请求，所以Admission Controller存在于API Server内部，即compiled into the kube-apiserver binary（被编译进API Server的可执行文件里）。\nkubernetes将AC分为三种：\n\nvalidating，验证型。用于验证k8s的资源定义是否符合规则\nmutating，修改型。用于修改k8s的资源定义，比如加个label什么的\n二者皆是，即同一个AC，既是验证型又是修改型\n\n多个Admission Controller会形成一个Admission Chain（链条），修改型的在前面先执行，验证型的在后面后执行，这样验证型的才能去验证修改的对不对。\nK: interceptor, validating, mutating, Admission Chain\nQ: Admission Controller有什么用？\nA: API Server内置了一些AC，有各种各样的作用[1]。比如：\n\nEventRateLimit，用于限制事件的频率\nLimitRanger，验证所有的请求都没有超出namespace中定义的LimitRange\n\n还有很多其他AC，具体请参考Kubernetes文档。\n这些AC中，有两个对用户来说比较有用：\n\nMutatingAdmissionWebhook，这是一个webhook，即网络钩子，也就是说该AC会去请求服务端，并执行相应的逻辑\nValidatingAdmissionWebhook，也是一个webhook，只是用于验证\n\nQ: 怎么查看哪些AC是打开了的？\nA: 文档上写的用：kube-apiserver -h | grep enable-admission-plugins。但是由于本地是minikube，进入虚拟机之后并没有发现kube-apiserver命令。\n后来发现api-server是以pod的形式运行的：\nkubectl get pods -n kube-system\n\n于是，使用kubectl exec登入pod，然后调用上述的指令，其结果为：\n```\nkube-apiserver -h | grep enable-admission-plugins\n      --admission-control strings              Admission is divided into two phases. In the first phase, only mutating admission plugins run. In the second phase, only validating admission plugins run. The names in the below list may represent a validating plugin, a mutating plugin, or both. The order of plugins in which they are passed to this flag does not matter. Comma-delimited list of: AlwaysAdmit, AlwaysDeny, AlwaysPullImages, DefaultStorageClass, DefaultTolerationSeconds, DenyEscalatingExec, DenyExecOnPrivileged, EventRateLimit, ExtendedResourceToleration, ImagePolicyWebhook, Initializers, LimitPodHardAntiAffinityTopology, LimitRanger, MutatingAdmissionWebhook, NamespaceAutoProvision, NamespaceExists, NamespaceLifecycle, NodeRestriction, OwnerReferencesPermissionEnforcement, PersistentVolumeClaimResize, PersistentVolumeLabel, PodNodeSelector, PodPreset, PodSecurityPolicy, PodTolerationRestriction, Priority, ResourceQuota, SecurityContextDeny, ServiceAccount, StorageObjectInUseProtection, ValidatingAdmissionWebhook. (DEPRECATED: Use --enable-admission-plugins or --disable-admission-plugins instead. Will be removed in a future version.)\n      --enable-admission-plugins strings       admission plugins that should be enabled in addition to default enabled ones (NamespaceLifecycle, LimitRanger, ServiceAccount, Priority, DefaultTolerationSeconds, DefaultStorageClass, PersistentVolumeClaimResize, MutatingAdmissionWebhook, ValidatingAdmissionWebhook, ResourceQuota). Comma-delimited list of admission plugins: AlwaysAdmit, AlwaysDeny, AlwaysPullImages, DefaultStorageClass, DefaultTolerationSeconds, DenyEscalatingExec, DenyExecOnPrivileged, EventRateLimit, ExtendedResourceToleration, ImagePolicyWebhook, Initializers, LimitPodHardAntiAffinityTopology, LimitRanger, MutatingAdmissionWebhook, NamespaceAutoProvision, NamespaceExists, NamespaceLifecycle, NodeRestriction, OwnerReferencesPermissionEnforcement, PersistentVolumeClaimResize, PersistentVolumeLabel, PodNodeSelector, PodPreset, PodSecurityPolicy, PodTolerationRestriction, Priority, ResourceQuota, SecurityContextDeny, ServiceAccount, StorageObjectInUseProtection, ValidatingAdmissionWebhook. The order of plugins in this flag does not matter.\n```\n## Q: Admission webhook是啥？\nA: 官方定义：\n\nAdmission webhooks are HTTP callbacks that receive admission requests and do something with them.\n\n简单来说webhook就是一个HTTP回调，接收admission请求，处理并返回。\n用户可以定义两种webhook:\n\nvalidating admission webhook\nmutating admission webhook\n一个用于验证，另一个用于修改。\nwebhook回调，接收API Server发送的admissionReview请求，并返回 admissionResponse。\n\nK: 回调，admissionReview请求，admissionResponse返回。\nQ: 如何配置和查看WebhookConfiguration?\nA: 以Validating为例，查看：\nkubectl get ValidatingWebhookConfiguration\n\n### ValidatingWebhookConfiguration的资源定义：\n```\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  name: <name of this configuration object>\nwebhooks:\n- name: <webhook name, e.g., pod-policy.example.io>\n  rules:\n  - apiGroups:\n    - \"\"\n    apiVersions:\n    - v1\n    operations:\n    - CREATE\n    resources:\n    - pods\n  clientConfig:\n    service:\n      namespace: <namespace of the front-end service>\n      name: <name of the front-end service>\n    caBundle: <pem encoded ca cert that signs the server cert used by the webhook>\n```\n### 其中rules定义了匹配规则，当发给API Server的请求满足该规则的时候，API Server就会给clientConfig中配置的service发送Admission请求。\n使用webhook有什么要求？\nA: 几点：\n\nkubernetes版本最低是v1.9\napi server使能（enable）了MutatingAdmissionWebhook和ValidatingAdmissionWebhook\nadmissionregistration.k8s.io/v1beta1 API处于enable状态，即使用kubectl api-versions | grep admissionregistration.k8s.io/v1beta1\n\n\n###Q: 如何自己写一个webhook?\n### A: 需要完成几个事情：\n\n创建TLS Certificate，即证书\n编写服务端代码，服务端代码需要使用证书\n根据证书创建k8s sercret\n创建k8s Deployment和Service\n创建k8s WebhookConfiguration，其中需要使用之前创建的证书\n\n具体代码和流程参见[3]［4］\n参考文献：\n[1] https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/\n[2] https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#admission-webhooks\n[3] https://banzaicloud.com/blog/k8s-admission-webhooks/\n[4] https://github.com/morvencao/kube-mutating-webhook-tutorial\n[5] https://github.com/banzaicloud/admission-webhook-example\n\n作者：Mr_Hospital\n链接：https://www.jianshu.com/p/39ae0b6fc907\n来源：简书\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。","slug":"webhook","published":1,"updated":"2019-07-02T13:19:11.249Z","_id":"cjxlu2kgu001kgkxrzbti75eo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Kubernetes中的Admission-Controller是做什么的呢？有什么用呢？怎么自己定义一个呢？\"><a href=\"#Kubernetes中的Admission-Controller是做什么的呢？有什么用呢？怎么自己定义一个呢？\" class=\"headerlink\" title=\"Kubernetes中的Admission Controller是做什么的呢？有什么用呢？怎么自己定义一个呢？\"></a>Kubernetes中的Admission Controller是做什么的呢？有什么用呢？怎么自己定义一个呢？</h1><h2 id=\"Q-什么是Admission-Controller\"><a href=\"#Q-什么是Admission-Controller\" class=\"headerlink\" title=\"Q: 什么是Admission Controller?\"></a>Q: 什么是Admission Controller?</h2><p>A: 官方定义：</p>\n<p>An admission controller is a piece of code that intercepts requests to the Kubernetes API server prior to persistence of the object, but after the request is authenticated and authorized.</p>\n<p>我理解的：</p>\n<p>Admission Controller是一个拦截器<br>拦截发送给Kuberenetes API Server的请求<br>什么时候拦截？在请求通过认证之后，请求被存储起来之前</p>\n<p>所以顺理成章，由于拦截的是发送给API Server的请求，所以Admission Controller存在于API Server内部，即compiled into the kube-apiserver binary（被编译进API Server的可执行文件里）。<br>kubernetes将AC分为三种：</p>\n<p>validating，验证型。用于验证k8s的资源定义是否符合规则<br>mutating，修改型。用于修改k8s的资源定义，比如加个label什么的<br>二者皆是，即同一个AC，既是验证型又是修改型</p>\n<p>多个Admission Controller会形成一个Admission Chain（链条），修改型的在前面先执行，验证型的在后面后执行，这样验证型的才能去验证修改的对不对。<br>K: interceptor, validating, mutating, Admission Chain<br>Q: Admission Controller有什么用？<br>A: API Server内置了一些AC，有各种各样的作用[1]。比如：</p>\n<p>EventRateLimit，用于限制事件的频率<br>LimitRanger，验证所有的请求都没有超出namespace中定义的LimitRange</p>\n<p>还有很多其他AC，具体请参考Kubernetes文档。<br>这些AC中，有两个对用户来说比较有用：</p>\n<p>MutatingAdmissionWebhook，这是一个webhook，即网络钩子，也就是说该AC会去请求服务端，并执行相应的逻辑<br>ValidatingAdmissionWebhook，也是一个webhook，只是用于验证</p>\n<p>Q: 怎么查看哪些AC是打开了的？<br>A: 文档上写的用：kube-apiserver -h | grep enable-admission-plugins。但是由于本地是minikube，进入虚拟机之后并没有发现kube-apiserver命令。<br>后来发现api-server是以pod的形式运行的：<br>kubectl get pods -n kube-system</p>\n<p>于是，使用kubectl exec登入pod，然后调用上述的指令，其结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube-apiserver -h | grep enable-admission-plugins</span><br><span class=\"line\">      --admission-control strings              Admission is divided into two phases. In the first phase, only mutating admission plugins run. In the second phase, only validating admission plugins run. The names in the below list may represent a validating plugin, a mutating plugin, or both. The order of plugins in which they are passed to this flag does not matter. Comma-delimited list of: AlwaysAdmit, AlwaysDeny, AlwaysPullImages, DefaultStorageClass, DefaultTolerationSeconds, DenyEscalatingExec, DenyExecOnPrivileged, EventRateLimit, ExtendedResourceToleration, ImagePolicyWebhook, Initializers, LimitPodHardAntiAffinityTopology, LimitRanger, MutatingAdmissionWebhook, NamespaceAutoProvision, NamespaceExists, NamespaceLifecycle, NodeRestriction, OwnerReferencesPermissionEnforcement, PersistentVolumeClaimResize, PersistentVolumeLabel, PodNodeSelector, PodPreset, PodSecurityPolicy, PodTolerationRestriction, Priority, ResourceQuota, SecurityContextDeny, ServiceAccount, StorageObjectInUseProtection, ValidatingAdmissionWebhook. (DEPRECATED: Use --enable-admission-plugins or --disable-admission-plugins instead. Will be removed in a future version.)</span><br><span class=\"line\">      --enable-admission-plugins strings       admission plugins that should be enabled in addition to default enabled ones (NamespaceLifecycle, LimitRanger, ServiceAccount, Priority, DefaultTolerationSeconds, DefaultStorageClass, PersistentVolumeClaimResize, MutatingAdmissionWebhook, ValidatingAdmissionWebhook, ResourceQuota). Comma-delimited list of admission plugins: AlwaysAdmit, AlwaysDeny, AlwaysPullImages, DefaultStorageClass, DefaultTolerationSeconds, DenyEscalatingExec, DenyExecOnPrivileged, EventRateLimit, ExtendedResourceToleration, ImagePolicyWebhook, Initializers, LimitPodHardAntiAffinityTopology, LimitRanger, MutatingAdmissionWebhook, NamespaceAutoProvision, NamespaceExists, NamespaceLifecycle, NodeRestriction, OwnerReferencesPermissionEnforcement, PersistentVolumeClaimResize, PersistentVolumeLabel, PodNodeSelector, PodPreset, PodSecurityPolicy, PodTolerationRestriction, Priority, ResourceQuota, SecurityContextDeny, ServiceAccount, StorageObjectInUseProtection, ValidatingAdmissionWebhook. The order of plugins in this flag does not matter.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Q-Admission-webhook是啥？\"><a href=\"#Q-Admission-webhook是啥？\" class=\"headerlink\" title=\"Q: Admission webhook是啥？\"></a>Q: Admission webhook是啥？</h2><p>A: 官方定义：</p>\n<p>Admission webhooks are HTTP callbacks that receive admission requests and do something with them.</p>\n<p>简单来说webhook就是一个HTTP回调，接收admission请求，处理并返回。<br>用户可以定义两种webhook:</p>\n<p>validating admission webhook<br>mutating admission webhook<br>一个用于验证，另一个用于修改。<br>webhook回调，接收API Server发送的admissionReview请求，并返回 admissionResponse。</p>\n<p>K: 回调，admissionReview请求，admissionResponse返回。<br>Q: 如何配置和查看WebhookConfiguration?<br>A: 以Validating为例，查看：<br>kubectl get ValidatingWebhookConfiguration</p>\n<h3 id=\"ValidatingWebhookConfiguration的资源定义：\"><a href=\"#ValidatingWebhookConfiguration的资源定义：\" class=\"headerlink\" title=\"ValidatingWebhookConfiguration的资源定义：\"></a>ValidatingWebhookConfiguration的资源定义：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: admissionregistration.k8s.io/v1beta1</span><br><span class=\"line\">kind: ValidatingWebhookConfiguration</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &lt;name of this configuration object&gt;</span><br><span class=\"line\">webhooks:</span><br><span class=\"line\">- name: &lt;webhook name, e.g., pod-policy.example.io&gt;</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">    - &quot;&quot;</span><br><span class=\"line\">    apiVersions:</span><br><span class=\"line\">    - v1</span><br><span class=\"line\">    operations:</span><br><span class=\"line\">    - CREATE</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">    - pods</span><br><span class=\"line\">  clientConfig:</span><br><span class=\"line\">    service:</span><br><span class=\"line\">      namespace: &lt;namespace of the front-end service&gt;</span><br><span class=\"line\">      name: &lt;name of the front-end service&gt;</span><br><span class=\"line\">    caBundle: &lt;pem encoded ca cert that signs the server cert used by the webhook&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其中rules定义了匹配规则，当发给API-Server的请求满足该规则的时候，API-Server就会给clientConfig中配置的service发送Admission请求。\"><a href=\"#其中rules定义了匹配规则，当发给API-Server的请求满足该规则的时候，API-Server就会给clientConfig中配置的service发送Admission请求。\" class=\"headerlink\" title=\"其中rules定义了匹配规则，当发给API Server的请求满足该规则的时候，API Server就会给clientConfig中配置的service发送Admission请求。\"></a>其中rules定义了匹配规则，当发给API Server的请求满足该规则的时候，API Server就会给clientConfig中配置的service发送Admission请求。</h3><p>使用webhook有什么要求？<br>A: 几点：</p>\n<p>kubernetes版本最低是v1.9<br>api server使能（enable）了MutatingAdmissionWebhook和ValidatingAdmissionWebhook<br>admissionregistration.k8s.io/v1beta1 API处于enable状态，即使用kubectl api-versions | grep admissionregistration.k8s.io/v1beta1</p>\n<p>###Q: 如何自己写一个webhook?</p>\n<h3 id=\"A-需要完成几个事情：\"><a href=\"#A-需要完成几个事情：\" class=\"headerlink\" title=\"A: 需要完成几个事情：\"></a>A: 需要完成几个事情：</h3><p>创建TLS Certificate，即证书<br>编写服务端代码，服务端代码需要使用证书<br>根据证书创建k8s sercret<br>创建k8s Deployment和Service<br>创建k8s WebhookConfiguration，其中需要使用之前创建的证书</p>\n<p>具体代码和流程参见[3]［4］<br>参考文献：<br>[1] <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/</a><br>[2] <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#admission-webhooks\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#admission-webhooks</a><br>[3] <a href=\"https://banzaicloud.com/blog/k8s-admission-webhooks/\" target=\"_blank\" rel=\"noopener\">https://banzaicloud.com/blog/k8s-admission-webhooks/</a><br>[4] <a href=\"https://github.com/morvencao/kube-mutating-webhook-tutorial\" target=\"_blank\" rel=\"noopener\">https://github.com/morvencao/kube-mutating-webhook-tutorial</a><br>[5] <a href=\"https://github.com/banzaicloud/admission-webhook-example\" target=\"_blank\" rel=\"noopener\">https://github.com/banzaicloud/admission-webhook-example</a></p>\n<p>作者：Mr_Hospital<br>链接：<a href=\"https://www.jianshu.com/p/39ae0b6fc907\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/39ae0b6fc907</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"Kubernetes中的Admission-Controller是做什么的呢？有什么用呢？怎么自己定义一个呢？\"><a href=\"#Kubernetes中的Admission-Controller是做什么的呢？有什么用呢？怎么自己定义一个呢？\" class=\"headerlink\" title=\"Kubernetes中的Admission Controller是做什么的呢？有什么用呢？怎么自己定义一个呢？\"></a>Kubernetes中的Admission Controller是做什么的呢？有什么用呢？怎么自己定义一个呢？</h1><h2 id=\"Q-什么是Admission-Controller\"><a href=\"#Q-什么是Admission-Controller\" class=\"headerlink\" title=\"Q: 什么是Admission Controller?\"></a>Q: 什么是Admission Controller?</h2><p>A: 官方定义：</p>\n<p>An admission controller is a piece of code that intercepts requests to the Kubernetes API server prior to persistence of the object, but after the request is authenticated and authorized.</p>\n<p>我理解的：</p>\n<p>Admission Controller是一个拦截器<br>拦截发送给Kuberenetes API Server的请求<br>什么时候拦截？在请求通过认证之后，请求被存储起来之前</p>\n<p>所以顺理成章，由于拦截的是发送给API Server的请求，所以Admission Controller存在于API Server内部，即compiled into the kube-apiserver binary（被编译进API Server的可执行文件里）。<br>kubernetes将AC分为三种：</p>\n<p>validating，验证型。用于验证k8s的资源定义是否符合规则<br>mutating，修改型。用于修改k8s的资源定义，比如加个label什么的<br>二者皆是，即同一个AC，既是验证型又是修改型</p>\n<p>多个Admission Controller会形成一个Admission Chain（链条），修改型的在前面先执行，验证型的在后面后执行，这样验证型的才能去验证修改的对不对。<br>K: interceptor, validating, mutating, Admission Chain<br>Q: Admission Controller有什么用？<br>A: API Server内置了一些AC，有各种各样的作用[1]。比如：</p>\n<p>EventRateLimit，用于限制事件的频率<br>LimitRanger，验证所有的请求都没有超出namespace中定义的LimitRange</p>\n<p>还有很多其他AC，具体请参考Kubernetes文档。<br>这些AC中，有两个对用户来说比较有用：</p>\n<p>MutatingAdmissionWebhook，这是一个webhook，即网络钩子，也就是说该AC会去请求服务端，并执行相应的逻辑<br>ValidatingAdmissionWebhook，也是一个webhook，只是用于验证</p>\n<p>Q: 怎么查看哪些AC是打开了的？<br>A: 文档上写的用：kube-apiserver -h | grep enable-admission-plugins。但是由于本地是minikube，进入虚拟机之后并没有发现kube-apiserver命令。<br>后来发现api-server是以pod的形式运行的：<br>kubectl get pods -n kube-system</p>\n<p>于是，使用kubectl exec登入pod，然后调用上述的指令，其结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube-apiserver -h | grep enable-admission-plugins</span><br><span class=\"line\">      --admission-control strings              Admission is divided into two phases. In the first phase, only mutating admission plugins run. In the second phase, only validating admission plugins run. The names in the below list may represent a validating plugin, a mutating plugin, or both. The order of plugins in which they are passed to this flag does not matter. Comma-delimited list of: AlwaysAdmit, AlwaysDeny, AlwaysPullImages, DefaultStorageClass, DefaultTolerationSeconds, DenyEscalatingExec, DenyExecOnPrivileged, EventRateLimit, ExtendedResourceToleration, ImagePolicyWebhook, Initializers, LimitPodHardAntiAffinityTopology, LimitRanger, MutatingAdmissionWebhook, NamespaceAutoProvision, NamespaceExists, NamespaceLifecycle, NodeRestriction, OwnerReferencesPermissionEnforcement, PersistentVolumeClaimResize, PersistentVolumeLabel, PodNodeSelector, PodPreset, PodSecurityPolicy, PodTolerationRestriction, Priority, ResourceQuota, SecurityContextDeny, ServiceAccount, StorageObjectInUseProtection, ValidatingAdmissionWebhook. (DEPRECATED: Use --enable-admission-plugins or --disable-admission-plugins instead. Will be removed in a future version.)</span><br><span class=\"line\">      --enable-admission-plugins strings       admission plugins that should be enabled in addition to default enabled ones (NamespaceLifecycle, LimitRanger, ServiceAccount, Priority, DefaultTolerationSeconds, DefaultStorageClass, PersistentVolumeClaimResize, MutatingAdmissionWebhook, ValidatingAdmissionWebhook, ResourceQuota). Comma-delimited list of admission plugins: AlwaysAdmit, AlwaysDeny, AlwaysPullImages, DefaultStorageClass, DefaultTolerationSeconds, DenyEscalatingExec, DenyExecOnPrivileged, EventRateLimit, ExtendedResourceToleration, ImagePolicyWebhook, Initializers, LimitPodHardAntiAffinityTopology, LimitRanger, MutatingAdmissionWebhook, NamespaceAutoProvision, NamespaceExists, NamespaceLifecycle, NodeRestriction, OwnerReferencesPermissionEnforcement, PersistentVolumeClaimResize, PersistentVolumeLabel, PodNodeSelector, PodPreset, PodSecurityPolicy, PodTolerationRestriction, Priority, ResourceQuota, SecurityContextDeny, ServiceAccount, StorageObjectInUseProtection, ValidatingAdmissionWebhook. The order of plugins in this flag does not matter.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Q-Admission-webhook是啥？\"><a href=\"#Q-Admission-webhook是啥？\" class=\"headerlink\" title=\"Q: Admission webhook是啥？\"></a>Q: Admission webhook是啥？</h2><p>A: 官方定义：</p>\n<p>Admission webhooks are HTTP callbacks that receive admission requests and do something with them.</p>\n<p>简单来说webhook就是一个HTTP回调，接收admission请求，处理并返回。<br>用户可以定义两种webhook:</p>\n<p>validating admission webhook<br>mutating admission webhook<br>一个用于验证，另一个用于修改。<br>webhook回调，接收API Server发送的admissionReview请求，并返回 admissionResponse。</p>\n<p>K: 回调，admissionReview请求，admissionResponse返回。<br>Q: 如何配置和查看WebhookConfiguration?<br>A: 以Validating为例，查看：<br>kubectl get ValidatingWebhookConfiguration</p>\n<h3 id=\"ValidatingWebhookConfiguration的资源定义：\"><a href=\"#ValidatingWebhookConfiguration的资源定义：\" class=\"headerlink\" title=\"ValidatingWebhookConfiguration的资源定义：\"></a>ValidatingWebhookConfiguration的资源定义：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: admissionregistration.k8s.io/v1beta1</span><br><span class=\"line\">kind: ValidatingWebhookConfiguration</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &lt;name of this configuration object&gt;</span><br><span class=\"line\">webhooks:</span><br><span class=\"line\">- name: &lt;webhook name, e.g., pod-policy.example.io&gt;</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - apiGroups:</span><br><span class=\"line\">    - &quot;&quot;</span><br><span class=\"line\">    apiVersions:</span><br><span class=\"line\">    - v1</span><br><span class=\"line\">    operations:</span><br><span class=\"line\">    - CREATE</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">    - pods</span><br><span class=\"line\">  clientConfig:</span><br><span class=\"line\">    service:</span><br><span class=\"line\">      namespace: &lt;namespace of the front-end service&gt;</span><br><span class=\"line\">      name: &lt;name of the front-end service&gt;</span><br><span class=\"line\">    caBundle: &lt;pem encoded ca cert that signs the server cert used by the webhook&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"其中rules定义了匹配规则，当发给API-Server的请求满足该规则的时候，API-Server就会给clientConfig中配置的service发送Admission请求。\"><a href=\"#其中rules定义了匹配规则，当发给API-Server的请求满足该规则的时候，API-Server就会给clientConfig中配置的service发送Admission请求。\" class=\"headerlink\" title=\"其中rules定义了匹配规则，当发给API Server的请求满足该规则的时候，API Server就会给clientConfig中配置的service发送Admission请求。\"></a>其中rules定义了匹配规则，当发给API Server的请求满足该规则的时候，API Server就会给clientConfig中配置的service发送Admission请求。</h3><p>使用webhook有什么要求？<br>A: 几点：</p>\n<p>kubernetes版本最低是v1.9<br>api server使能（enable）了MutatingAdmissionWebhook和ValidatingAdmissionWebhook<br>admissionregistration.k8s.io/v1beta1 API处于enable状态，即使用kubectl api-versions | grep admissionregistration.k8s.io/v1beta1</p>\n<p>###Q: 如何自己写一个webhook?</p>\n<h3 id=\"A-需要完成几个事情：\"><a href=\"#A-需要完成几个事情：\" class=\"headerlink\" title=\"A: 需要完成几个事情：\"></a>A: 需要完成几个事情：</h3><p>创建TLS Certificate，即证书<br>编写服务端代码，服务端代码需要使用证书<br>根据证书创建k8s sercret<br>创建k8s Deployment和Service<br>创建k8s WebhookConfiguration，其中需要使用之前创建的证书</p>\n<p>具体代码和流程参见[3]［4］<br>参考文献：<br>[1] <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/</a><br>[2] <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#admission-webhooks\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#admission-webhooks</a><br>[3] <a href=\"https://banzaicloud.com/blog/k8s-admission-webhooks/\" target=\"_blank\" rel=\"noopener\">https://banzaicloud.com/blog/k8s-admission-webhooks/</a><br>[4] <a href=\"https://github.com/morvencao/kube-mutating-webhook-tutorial\" target=\"_blank\" rel=\"noopener\">https://github.com/morvencao/kube-mutating-webhook-tutorial</a><br>[5] <a href=\"https://github.com/banzaicloud/admission-webhook-example\" target=\"_blank\" rel=\"noopener\">https://github.com/banzaicloud/admission-webhook-example</a></p>\n<p>作者：Mr_Hospital<br>链接：<a href=\"https://www.jianshu.com/p/39ae0b6fc907\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/39ae0b6fc907</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>\n"},{"title":"版本管理工具 git相关命令","date":"2019-02-26T14:02:36.000Z","_content":"\nGit\n\n新建分支：v1.1.1\n\n```\ngit branch v1.1.1\n\n```\n或\n\n```\ngit branch -b v1.1.1\n```\n\n\n//新建分支并切换到新建分支\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.2)\n\n```\n$ git checkout -b v1.1.5 v1.1.2\n```\n\n\n\n切换分支：\n\n```\ngit checkout v1.1.1\n```\n\n\n//把分支push 到remote\n\n\n```\ngit push orign v1.1.1\n```\n\n\n\n//修改branch 的名字\n\n\n```\ngit branch -m v1.1.1 v1.1.2\n```\n\n\n//删除branch\n\n\n```\ngit push origin --delete v1.1.1\n```\n\n\n\n\n\n添加文件到git\n将当前目录下所有变化的文件，放入暂存区\n\n\n```\ngit add .\ngit add ./\n```\n\n\n//参数表示只添加暂存区已有的文件（包括删除操作），但不添加新增的文件。\n\n\n\n```\ngit add -u\n```\n\n\n\n\n\n//查看本地branch 分支\n\n\n```\ngit branch \n\ngit branch -v\n```\n\n\n//查看本地和远程的分支\n\n\n```\ngit branch -a\n```\n\n\n//查看 远程remote 分支\n\n```\ngit branch -r\n```\n\n\n\n//比较文件差异\n\n\n```\ngit diff\n```\n\n\n//删除分支(前提条件是该分支没有被合并)\n\n\n```\ngit branch -d v1.1.1\n```\n\n//强制删除一个分支，不管该分支有没有被合并\n\ngit branch -D v1.1.1\n\n\n//查看merge的情况\ngit branch --merged\n\n将工作区制定的文件还原到上次commit的状态\ngit checkout xxx.txt\n\n//切换到某个tag\n\ngit checkout tags/1.1.4\n或\ngit checkout 1.1.4\n\n\n//命令”复制”一个提交节点并在当前分支做一次完全一样的新提交。\n\n\n\n```\ngit cherry-pick xxxxx\n```\n\n//根据一个树对象，生成新的commit对象。\n\ngit commit-tree 16e19f -m “First commit”\n\n\n查看工作区与暂存区的差异\n\n\n```\n$ git diff\n```\n\n 查看某个文件的工作区与暂存区的差异\n\n```\n$ git diff file.txt\n```\n\n查看暂存区与当前 commit 的差异\n\n```\n$ git diff --cached\n```\n\n```\n\n```\n\n查看两个commit的差异\n\n```\n$ git diff <commitBefore> <commitAfter\n```\n>\n 查看暂存区与仓库区的差异\n\n```\n$ git diff --cached\n```\n\n查看工作区与上一次commit之间的差异\n即如果执行 git commit -a，将提交的文件\n\n```\n$ git diff HEAD\n```\n\n查看工作区与某个 commit 的差异\n\n```\n$ git diff <commit>\n```\n\n显示两次提交之间的差异\n\n```\n$ git diff [first-branch]...[second-branch]\n```\n\n查看工作区与当前分支上一次提交的差异，但是局限于test文件\n\n```\n$ git diff HEAD -- ./test\n```\n\n查看当前分支上一次提交与上上一次提交之间的差异\n\n```\n$ git diff HEAD -- ./test\n```\n\n生成patch\n\n```\n$ git format-patch master --stdout > mypatch.patch\n```\n\n```\n\n```\n\n\n\n 查看topic分支与master分支最新提交之间的差异\n\n```\n$ git diff topic master\n```\n\n 与上一条命令相同\n\n```\n$ git diff topic..master\n```\n\n查看自从topic分支建立以后，master分支发生的变化\n\n```\n$ git diff topic...master\n```\n\n```\n\n```\n\n\n\n命令将当前目录转为git仓库。\n\n\n```\ngit init\n```\n\n\n\n\n命令按照提交时间从最晚到最早的顺序，列出所有 commit。\n\n```\ngit log\n```\n\ngit remote\n为远程仓库添加别名。\n\n\n```\nit remote add john git@github.com:johnsomeone/someproject.git\n```\n 显示所有的远程主机\n\n```\ngit remote -v\n```\n\n 列出某个主机的详细信息\n\n```\ngit remote show name\n```\ngit revert\ngit revert命令用于撤销commit。\n\n\n```\ngit revert <commitID>\n```\n\ngit rm\ngit rm命令用于删除文件。\n\n解除追踪某个文件，即该文件已被git add添加，然后抵消这个操作。\n\n```\n$ git rm --cached <fileName>\n\n\n\ngit show\ngit show命令用于查看commit的内容\n\n# 输出某次提交的元数据和内容变化\n$ git show [commit]\n$ git show 12a86bc38 # By revision\n$ git show v1.0.1 # By tag\n$ git show feature132 # By branch name\n$ git show 12a86bc38^ # Parent of a commit\n$ git show 12a86bc38~2 # Grandparent of a commit\n$ git show feature132@{yesterday} # Time relative\n$ git show feature132@{2.hours.ago} # Time relative\n\n```\n\n\n\n\ngit merge master\n```\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)\n$ git merge master\nAlready up-to-date.\n\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)\n$ git checkout v1.1.5\nAlready on 'v1.1.5'\n\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (master)\n$ git merge v1.1.5\nUpdating 891e496..f6a3810\nFast-forward\n dome.txt | 1 +\n 1 file changed, 1 insertion(+)\n\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (master)\n$ cat dome.txt\ngjkdsjsdjfjjgjksjdjfkdsjfsjffjkdsjfsjkfjksjfjsdjjsf\n```\n\n\n查看提交日志\n\n```\ngit log --pretty=oneline\n1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master) append GPL\n```\n回退版本\n\n\n```\ngit reset --hard 1094adb7b9b3807259d8cb349e7df1d4d6477073\n```\n\n\n\n\n查看远程分支\n加上-a参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）：\n$ git branch -a\n  master\n  remote\n  tungway\n  v1.52\n* zrong\n  remotes/origin/master\n  remotes/origin/tungway\n  remotes/origin/v1.52\n  remotes/origin/zrong\n删除远程分支和tag\n在Git v1.7.0 之后，可以使用这种语法删除远程分支：\n\n1\n$ git push origin --delete <branchName>\n删除tag这么用：\n\n1\ngit push origin --delete tag <tagname>\n否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：\n\n1\ngit push origin :<branchName>\n这是删除tag的方法，推送一个空tag到远程tag：\n\n$ git remote show origin\n* remote origin\n  Fetch URL: git@github.com:xxx/xxx.git\n  Push  URL: git@github.com:xxx/xxx.git\n  HEAD branch: master\n  Remote branches:\n    master                 tracked\n    refs/remotes/origin/b1 stale (use 'git remote prune' to remove)\n  Local branch configured for 'git pull':\n    master merges with remote master\n  Local ref configured for 'git push':\n    master pushes to master (up to date)\n这时候能够看到b1是stale的，使用 git remote prune origin 可以将其从本地版本库中去除。\n\n更简单的方法是使用这个命令，它在fetch之后删除掉没有与远程分支对应的本地分支：\n\n1\ngit fetch -p\n重命名远程分支\n在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。\n\n例如下面的例子中，我需要把 devel 分支重命名为 develop 分支：\n\n$ git branch -av\n* devel                             752bb84 Merge pull request #158 from Gwill/devel\n  master                            53b27b8 Merge pull request #138 from tdlrobin/master\n  zrong                             2ae98d8 modify CCFileUtils, export getFileData\n  remotes/origin/HEAD               -> origin/master\n  remotes/origin/add_build_script   d4a8c4f Merge branch 'master' into add_build_script\n  remotes/origin/devel              752bb84 Merge pull request #158 from Gwill/devel\n  remotes/origin/devel_qt51         62208f1 update .gitignore\n  remotes/origin/master             53b27b8 Merge pull request #138 from tdlrobin/master\n  remotes/origin/zrong              2ae98d8 modify CCFileUtils, export getFileData\n删除远程分支：\n\n\n```\n$ git push --delete origin devel\n```\n\nTo git@github.com:zrong/quick-cocos2d-x.git\n - [deleted]         devel\n重命名本地分支：\n\n1\n\n```\ngit branch -m devel develop\n```\n\n推送本地分支：\n\n$ git push origin develop\nCounting objects: 92, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (48/48), done.\nWriting objects: 100% (58/58), 1.38 MiB, done.\nTotal 58 (delta 34), reused 12 (delta 5)\nTo git@github.com:zrong/quick-cocos2d-x.git\n * [new branch]      develop -> develop\n然而，在 github 上操作的时候，我在删除远程分支时碰到这个错误：\n\n\n$ git push --delete origin devel\nremote: error: refusing to delete the current branch: refs/heads/devel\nTo git@github.com:zrong/quick-cocos2d-x.git\n ! [remote rejected] devel (deletion of the current branch prohibited)\nerror: failed to push some refs to 'git@github.com:zrong/quick-cocos2d-x.git'\n这是由于在 github 中，devel 是项目的默认分支。要解决此问题，这样操作：\n\n进入 github 中该项目的 Settings 页面；\n设置 Default Branch 为其他的分支（例如 master）；\n重新执行删除远程分支命令。\n把本地tag推送到远程\n1\ngit push --tags\n获取远程tag\n1\ngit fetch origin tag <tagname>\n\n\n保存当前修改在缓存中，不可见\n\n```\ngit stash save \"worker\"\n```\n把当前保存在缓存的显示出来，可见\n\n```\n git stash pop\n\n```\n\n## Git-命令行-使用 Tag 标记你的代码 ## \n参考\nhttps://blog.csdn.net/qq_32452623/article/details/73949509\n\nhttps://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001376951885068a0ac7d81c3a64912b35a59b58a1d926b000\n\n命令git push origin <tagname>可以推送一个本地标签；\n\n命令git push origin --tags可以推送全部未推送过的本地标签；\n\n命令git tag -d <tagname>可以删除一个本地标签；\n\n命令git push origin :refs/tags/<tagname>可以删除一个远程标签。\n\n同步remote branch to local \n```\ngit push -p\n```\n\n\n## 对单次提交的每个文件都添加注释\n可以单独add/commit，然后最后一起push。\n\n如有两个文件A.md和B.md需要push， 可以如下操作：\n\n\n```\ngit add A.md\ngit commit -m \"add A\"\ngit add B.md\ngit commit -m \"add B\"\ngit push.....\n```\n\n\ngit squash\n\n`Git进阶命令讲解：squash,fixup,stash\n2014-05-21 GitHub不完全装B指南\n\n@董林 希望我讲一下这三个命令，我看了一下，这三个命令虽然平时用得较少，但是在特定的情况下还是非常有用的，所以我就详细讲解一下。\n\n\n\n注意：下面的内容可能有点难，大家要集中精力了。\n\n\n\n一、squash\n\n\n\nsquash准确来说并不是一个命令，而是rebase命令的一个功能。squash的作用很简单——合并多个commit。\n\n\n\n来看用法：\n\ngit rebase -i HEAD~5\n-i的意思是使用“交互式”的修改方法。加了这个参数之后，Git会把所有commit列出来，让你进行一些修改，修改完成之后会根据你的修改来rebase。HEAD-5的意思是只修改最近的5个commit。\n\n\n\n运行完这条命令之后，会进入一个编辑界面，大概是这样的：\n\npick awe Add sth\npick add Have a rest\npick xxc Wow\npick cxz Yeah\npick dsa Finish it\n可以看到一共有5行，这就是最近的5个commit以及它们的信息。\n\n\n\n假设我们现在想把它们合并成一个commit，要怎么做呢？直接看例子：\n\npick awe Add sth\nsquash add Have a rest\nsquash xxc Wow\nsquash cxz Yeah\nsquash dsa Finish it\n\n\n\n我们把后4个commit的pick都改成了squash，修改完成之后保存退出，Git就会继续执行rebase命令了。执行完可以看一下结果，最后的4条commit都消失了，它们都被合并到了倒数第5条中。\n\n\n\n现在大家应该理解了，squash的作用就是把当前commit向前合并，一直合并到pick为止。\n\n\n\nrebase完成之后大家可以看一下最后一个commit的信息，里面会包含rebase之前最后5条的所有commit信息，也就是诸如“Add sth Have a rest Wow Yeah Finish it”这些东西。\n\n\n\n二、fixup\n\n\n\nfixup和squash非常类似，把pick修改成fixup，同样会向前合并到pick，唯一的区别就是，fixup会忽略当前commit的信息，只会应用修改。\n\n\n\n怎么理解呢？还用上面的例子说，假设我们使用fixup代替squash：\n\npick awe Add sth\nfixup add Have a rest\nfixup xxc Wow\nfixup cxz Yeah\nfixup dsa Finish it\n\n\n\n保存退出之后，等Git执行完rebase我们查看一下最后一条commit的信息，会发现里面只有“Add sth”，另外四条commit的信息比如“Have a rest”都没有了。\n\n\n\n三、stash\n\n\n\nstash是一条Git命令，作用非常简单——保存当前状态。\n\n\n\n假设我们现在正在进行工作，修改了一些文件，添加了一些文件。这时我们突然想切换到另一个分支工作，但是又不想commit当前的修改（可能因为它们还不能运行），那该怎么办呢？答案就是stash。\n\n\n\n来看命令——git stash\n\n\n\n执行完命令之后，Git会把当前的状态保存，同时清理当前目录。我们可以运行一下 git status，会发现当前目录没有任何修改。这时我们就可以放心地切换分支工作了。\n\n\n\n等其他工作结束，想继续之前的工作时，可以运行 git stash apply，Git会把保存的状态复原。\n\n\n\nstash可以运行多次，会保存多个状态，可以运行 git stash list 来查看所有状态。运行 git stash apply 会默认复原到最近一次保存的状态，如果想指定复原状态可以使用 git stash apply stash@{2} ，这条命令会复原到 stash@{0} 状态。\n\n\n\n运行 apply 之后，被复原的状态并不会自动删除，仍然在 stash list 当中。可以运行 git stash drop stash@{0} 来删除 stash@{0} 状态，或者使用 git stash pop 命令来代替 git stash apply 命令，这样复原之后会自动删除被复原状态。\n\n\n\n如果 apply 的时候出现冲突（因为你 stash 之后对文件进行了修改），那么需要手动解决冲突。\n\n最后需要注意一点：stash 复原的时候默认不复原 staged 文件，也就是说如果你运行过 add 命令，使用 git status 查看的话文件应当处于 staged 状态，但是如果你 stash 并复原再看，那个文件的状态又变回 unstaged 了。解决办法就是运行 git stash apply 命令时加上 --index 参数：git stash apply --index，这样就可以完全恢复到 stash 之前的状态。``\n\n```\n\n\n\n修改branch 的名字\n```\ngit branch -M oldbranch newbranch\n```\n\n\ngit stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug,  先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。\n基础命令：\n$git stash\n$do some work\n$git stash pop\n\n\n进阶：\n\ngit stash save \"work in progress for foo feature\"\n\n当你多次使用’git stash’命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，\n\n’git stash list’ 命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，例如使用’git stash apply stash@{1}’就可以将你指定版本号为stash@{1}的工作取出来，当你将所有的栈都应用回来的时候，可以使用’git stash clear’来将栈清空。\n\n\n\ngit stash          # save uncommitted changes\n# pull, edit, etc.\ngit stash list     # list stashed changes in this git\ngit show stash@{0} # see the last stash \ngit stash pop      # apply last stash and remove it from the list\n\ngit stash --help   # for more info\n\ngit checkout bbb\ngit rebase master   //   把master的代码弄到bbb上(前提条件是文件不冲突，tree进行改变)\n\ngit checkout --theirs xxx    把xxx  分支的内容放到bbb上\n\ngit checkout --ours xxx  类似\n\n\n```\n### git删除某个commit\n```\n1.git log 获取commit信息  \n\n2.git rebase -i (commit-id)\n \ncommit-id 为要删除的commit的下一个commit号 \n\n3.编辑文件，将要删除的commit之前的单词改为drop \n\n4.保存文件退出大功告成 \n\n5.git log查看\n\ngit push origin master –force\n```i\n使用--amend 修改 author \n```\n git commit --amend --author=‘xxx <xxxx@xxx.xxx>\n```\n\n\nhttps://blog.csdn.net/mocoe/article/details/84344411\n\nhttps://www.jianshu.com/p/5b3166c855b2\n\n\n// 把另一个分支structure2的代码merge  到newbr 上，不包括commit\ngit checkout master\ngit checout -b newbr \ngit merge —squash —no-commit structure2\ngit add vendor\ngit commit -m \"add vendor\"\ngit add .\ngit commit -a -m \"commit message\"  ","source":"_posts/git.md","raw":"---\ntitle: 版本管理工具 git相关命令\ndate: 2019-02-26 22:02:36\ntags: [\"git\"]\ncategories: [\"git\"]\n---\n\nGit\n\n新建分支：v1.1.1\n\n```\ngit branch v1.1.1\n\n```\n或\n\n```\ngit branch -b v1.1.1\n```\n\n\n//新建分支并切换到新建分支\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.2)\n\n```\n$ git checkout -b v1.1.5 v1.1.2\n```\n\n\n\n切换分支：\n\n```\ngit checkout v1.1.1\n```\n\n\n//把分支push 到remote\n\n\n```\ngit push orign v1.1.1\n```\n\n\n\n//修改branch 的名字\n\n\n```\ngit branch -m v1.1.1 v1.1.2\n```\n\n\n//删除branch\n\n\n```\ngit push origin --delete v1.1.1\n```\n\n\n\n\n\n添加文件到git\n将当前目录下所有变化的文件，放入暂存区\n\n\n```\ngit add .\ngit add ./\n```\n\n\n//参数表示只添加暂存区已有的文件（包括删除操作），但不添加新增的文件。\n\n\n\n```\ngit add -u\n```\n\n\n\n\n\n//查看本地branch 分支\n\n\n```\ngit branch \n\ngit branch -v\n```\n\n\n//查看本地和远程的分支\n\n\n```\ngit branch -a\n```\n\n\n//查看 远程remote 分支\n\n```\ngit branch -r\n```\n\n\n\n//比较文件差异\n\n\n```\ngit diff\n```\n\n\n//删除分支(前提条件是该分支没有被合并)\n\n\n```\ngit branch -d v1.1.1\n```\n\n//强制删除一个分支，不管该分支有没有被合并\n\ngit branch -D v1.1.1\n\n\n//查看merge的情况\ngit branch --merged\n\n将工作区制定的文件还原到上次commit的状态\ngit checkout xxx.txt\n\n//切换到某个tag\n\ngit checkout tags/1.1.4\n或\ngit checkout 1.1.4\n\n\n//命令”复制”一个提交节点并在当前分支做一次完全一样的新提交。\n\n\n\n```\ngit cherry-pick xxxxx\n```\n\n//根据一个树对象，生成新的commit对象。\n\ngit commit-tree 16e19f -m “First commit”\n\n\n查看工作区与暂存区的差异\n\n\n```\n$ git diff\n```\n\n 查看某个文件的工作区与暂存区的差异\n\n```\n$ git diff file.txt\n```\n\n查看暂存区与当前 commit 的差异\n\n```\n$ git diff --cached\n```\n\n```\n\n```\n\n查看两个commit的差异\n\n```\n$ git diff <commitBefore> <commitAfter\n```\n>\n 查看暂存区与仓库区的差异\n\n```\n$ git diff --cached\n```\n\n查看工作区与上一次commit之间的差异\n即如果执行 git commit -a，将提交的文件\n\n```\n$ git diff HEAD\n```\n\n查看工作区与某个 commit 的差异\n\n```\n$ git diff <commit>\n```\n\n显示两次提交之间的差异\n\n```\n$ git diff [first-branch]...[second-branch]\n```\n\n查看工作区与当前分支上一次提交的差异，但是局限于test文件\n\n```\n$ git diff HEAD -- ./test\n```\n\n查看当前分支上一次提交与上上一次提交之间的差异\n\n```\n$ git diff HEAD -- ./test\n```\n\n生成patch\n\n```\n$ git format-patch master --stdout > mypatch.patch\n```\n\n```\n\n```\n\n\n\n 查看topic分支与master分支最新提交之间的差异\n\n```\n$ git diff topic master\n```\n\n 与上一条命令相同\n\n```\n$ git diff topic..master\n```\n\n查看自从topic分支建立以后，master分支发生的变化\n\n```\n$ git diff topic...master\n```\n\n```\n\n```\n\n\n\n命令将当前目录转为git仓库。\n\n\n```\ngit init\n```\n\n\n\n\n命令按照提交时间从最晚到最早的顺序，列出所有 commit。\n\n```\ngit log\n```\n\ngit remote\n为远程仓库添加别名。\n\n\n```\nit remote add john git@github.com:johnsomeone/someproject.git\n```\n 显示所有的远程主机\n\n```\ngit remote -v\n```\n\n 列出某个主机的详细信息\n\n```\ngit remote show name\n```\ngit revert\ngit revert命令用于撤销commit。\n\n\n```\ngit revert <commitID>\n```\n\ngit rm\ngit rm命令用于删除文件。\n\n解除追踪某个文件，即该文件已被git add添加，然后抵消这个操作。\n\n```\n$ git rm --cached <fileName>\n\n\n\ngit show\ngit show命令用于查看commit的内容\n\n# 输出某次提交的元数据和内容变化\n$ git show [commit]\n$ git show 12a86bc38 # By revision\n$ git show v1.0.1 # By tag\n$ git show feature132 # By branch name\n$ git show 12a86bc38^ # Parent of a commit\n$ git show 12a86bc38~2 # Grandparent of a commit\n$ git show feature132@{yesterday} # Time relative\n$ git show feature132@{2.hours.ago} # Time relative\n\n```\n\n\n\n\ngit merge master\n```\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)\n$ git merge master\nAlready up-to-date.\n\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)\n$ git checkout v1.1.5\nAlready on 'v1.1.5'\n\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)\n$ git checkout master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (master)\n$ git merge v1.1.5\nUpdating 891e496..f6a3810\nFast-forward\n dome.txt | 1 +\n 1 file changed, 1 insertion(+)\n\nhome@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (master)\n$ cat dome.txt\ngjkdsjsdjfjjgjksjdjfkdsjfsjffjkdsjfsjkfjksjfjsdjjsf\n```\n\n\n查看提交日志\n\n```\ngit log --pretty=oneline\n1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master) append GPL\n```\n回退版本\n\n\n```\ngit reset --hard 1094adb7b9b3807259d8cb349e7df1d4d6477073\n```\n\n\n\n\n查看远程分支\n加上-a参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）：\n$ git branch -a\n  master\n  remote\n  tungway\n  v1.52\n* zrong\n  remotes/origin/master\n  remotes/origin/tungway\n  remotes/origin/v1.52\n  remotes/origin/zrong\n删除远程分支和tag\n在Git v1.7.0 之后，可以使用这种语法删除远程分支：\n\n1\n$ git push origin --delete <branchName>\n删除tag这么用：\n\n1\ngit push origin --delete tag <tagname>\n否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：\n\n1\ngit push origin :<branchName>\n这是删除tag的方法，推送一个空tag到远程tag：\n\n$ git remote show origin\n* remote origin\n  Fetch URL: git@github.com:xxx/xxx.git\n  Push  URL: git@github.com:xxx/xxx.git\n  HEAD branch: master\n  Remote branches:\n    master                 tracked\n    refs/remotes/origin/b1 stale (use 'git remote prune' to remove)\n  Local branch configured for 'git pull':\n    master merges with remote master\n  Local ref configured for 'git push':\n    master pushes to master (up to date)\n这时候能够看到b1是stale的，使用 git remote prune origin 可以将其从本地版本库中去除。\n\n更简单的方法是使用这个命令，它在fetch之后删除掉没有与远程分支对应的本地分支：\n\n1\ngit fetch -p\n重命名远程分支\n在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。\n\n例如下面的例子中，我需要把 devel 分支重命名为 develop 分支：\n\n$ git branch -av\n* devel                             752bb84 Merge pull request #158 from Gwill/devel\n  master                            53b27b8 Merge pull request #138 from tdlrobin/master\n  zrong                             2ae98d8 modify CCFileUtils, export getFileData\n  remotes/origin/HEAD               -> origin/master\n  remotes/origin/add_build_script   d4a8c4f Merge branch 'master' into add_build_script\n  remotes/origin/devel              752bb84 Merge pull request #158 from Gwill/devel\n  remotes/origin/devel_qt51         62208f1 update .gitignore\n  remotes/origin/master             53b27b8 Merge pull request #138 from tdlrobin/master\n  remotes/origin/zrong              2ae98d8 modify CCFileUtils, export getFileData\n删除远程分支：\n\n\n```\n$ git push --delete origin devel\n```\n\nTo git@github.com:zrong/quick-cocos2d-x.git\n - [deleted]         devel\n重命名本地分支：\n\n1\n\n```\ngit branch -m devel develop\n```\n\n推送本地分支：\n\n$ git push origin develop\nCounting objects: 92, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (48/48), done.\nWriting objects: 100% (58/58), 1.38 MiB, done.\nTotal 58 (delta 34), reused 12 (delta 5)\nTo git@github.com:zrong/quick-cocos2d-x.git\n * [new branch]      develop -> develop\n然而，在 github 上操作的时候，我在删除远程分支时碰到这个错误：\n\n\n$ git push --delete origin devel\nremote: error: refusing to delete the current branch: refs/heads/devel\nTo git@github.com:zrong/quick-cocos2d-x.git\n ! [remote rejected] devel (deletion of the current branch prohibited)\nerror: failed to push some refs to 'git@github.com:zrong/quick-cocos2d-x.git'\n这是由于在 github 中，devel 是项目的默认分支。要解决此问题，这样操作：\n\n进入 github 中该项目的 Settings 页面；\n设置 Default Branch 为其他的分支（例如 master）；\n重新执行删除远程分支命令。\n把本地tag推送到远程\n1\ngit push --tags\n获取远程tag\n1\ngit fetch origin tag <tagname>\n\n\n保存当前修改在缓存中，不可见\n\n```\ngit stash save \"worker\"\n```\n把当前保存在缓存的显示出来，可见\n\n```\n git stash pop\n\n```\n\n## Git-命令行-使用 Tag 标记你的代码 ## \n参考\nhttps://blog.csdn.net/qq_32452623/article/details/73949509\n\nhttps://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001376951885068a0ac7d81c3a64912b35a59b58a1d926b000\n\n命令git push origin <tagname>可以推送一个本地标签；\n\n命令git push origin --tags可以推送全部未推送过的本地标签；\n\n命令git tag -d <tagname>可以删除一个本地标签；\n\n命令git push origin :refs/tags/<tagname>可以删除一个远程标签。\n\n同步remote branch to local \n```\ngit push -p\n```\n\n\n## 对单次提交的每个文件都添加注释\n可以单独add/commit，然后最后一起push。\n\n如有两个文件A.md和B.md需要push， 可以如下操作：\n\n\n```\ngit add A.md\ngit commit -m \"add A\"\ngit add B.md\ngit commit -m \"add B\"\ngit push.....\n```\n\n\ngit squash\n\n`Git进阶命令讲解：squash,fixup,stash\n2014-05-21 GitHub不完全装B指南\n\n@董林 希望我讲一下这三个命令，我看了一下，这三个命令虽然平时用得较少，但是在特定的情况下还是非常有用的，所以我就详细讲解一下。\n\n\n\n注意：下面的内容可能有点难，大家要集中精力了。\n\n\n\n一、squash\n\n\n\nsquash准确来说并不是一个命令，而是rebase命令的一个功能。squash的作用很简单——合并多个commit。\n\n\n\n来看用法：\n\ngit rebase -i HEAD~5\n-i的意思是使用“交互式”的修改方法。加了这个参数之后，Git会把所有commit列出来，让你进行一些修改，修改完成之后会根据你的修改来rebase。HEAD-5的意思是只修改最近的5个commit。\n\n\n\n运行完这条命令之后，会进入一个编辑界面，大概是这样的：\n\npick awe Add sth\npick add Have a rest\npick xxc Wow\npick cxz Yeah\npick dsa Finish it\n可以看到一共有5行，这就是最近的5个commit以及它们的信息。\n\n\n\n假设我们现在想把它们合并成一个commit，要怎么做呢？直接看例子：\n\npick awe Add sth\nsquash add Have a rest\nsquash xxc Wow\nsquash cxz Yeah\nsquash dsa Finish it\n\n\n\n我们把后4个commit的pick都改成了squash，修改完成之后保存退出，Git就会继续执行rebase命令了。执行完可以看一下结果，最后的4条commit都消失了，它们都被合并到了倒数第5条中。\n\n\n\n现在大家应该理解了，squash的作用就是把当前commit向前合并，一直合并到pick为止。\n\n\n\nrebase完成之后大家可以看一下最后一个commit的信息，里面会包含rebase之前最后5条的所有commit信息，也就是诸如“Add sth Have a rest Wow Yeah Finish it”这些东西。\n\n\n\n二、fixup\n\n\n\nfixup和squash非常类似，把pick修改成fixup，同样会向前合并到pick，唯一的区别就是，fixup会忽略当前commit的信息，只会应用修改。\n\n\n\n怎么理解呢？还用上面的例子说，假设我们使用fixup代替squash：\n\npick awe Add sth\nfixup add Have a rest\nfixup xxc Wow\nfixup cxz Yeah\nfixup dsa Finish it\n\n\n\n保存退出之后，等Git执行完rebase我们查看一下最后一条commit的信息，会发现里面只有“Add sth”，另外四条commit的信息比如“Have a rest”都没有了。\n\n\n\n三、stash\n\n\n\nstash是一条Git命令，作用非常简单——保存当前状态。\n\n\n\n假设我们现在正在进行工作，修改了一些文件，添加了一些文件。这时我们突然想切换到另一个分支工作，但是又不想commit当前的修改（可能因为它们还不能运行），那该怎么办呢？答案就是stash。\n\n\n\n来看命令——git stash\n\n\n\n执行完命令之后，Git会把当前的状态保存，同时清理当前目录。我们可以运行一下 git status，会发现当前目录没有任何修改。这时我们就可以放心地切换分支工作了。\n\n\n\n等其他工作结束，想继续之前的工作时，可以运行 git stash apply，Git会把保存的状态复原。\n\n\n\nstash可以运行多次，会保存多个状态，可以运行 git stash list 来查看所有状态。运行 git stash apply 会默认复原到最近一次保存的状态，如果想指定复原状态可以使用 git stash apply stash@{2} ，这条命令会复原到 stash@{0} 状态。\n\n\n\n运行 apply 之后，被复原的状态并不会自动删除，仍然在 stash list 当中。可以运行 git stash drop stash@{0} 来删除 stash@{0} 状态，或者使用 git stash pop 命令来代替 git stash apply 命令，这样复原之后会自动删除被复原状态。\n\n\n\n如果 apply 的时候出现冲突（因为你 stash 之后对文件进行了修改），那么需要手动解决冲突。\n\n最后需要注意一点：stash 复原的时候默认不复原 staged 文件，也就是说如果你运行过 add 命令，使用 git status 查看的话文件应当处于 staged 状态，但是如果你 stash 并复原再看，那个文件的状态又变回 unstaged 了。解决办法就是运行 git stash apply 命令时加上 --index 参数：git stash apply --index，这样就可以完全恢复到 stash 之前的状态。``\n\n```\n\n\n\n修改branch 的名字\n```\ngit branch -M oldbranch newbranch\n```\n\n\ngit stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug,  先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。\n基础命令：\n$git stash\n$do some work\n$git stash pop\n\n\n进阶：\n\ngit stash save \"work in progress for foo feature\"\n\n当你多次使用’git stash’命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，\n\n’git stash list’ 命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，例如使用’git stash apply stash@{1}’就可以将你指定版本号为stash@{1}的工作取出来，当你将所有的栈都应用回来的时候，可以使用’git stash clear’来将栈清空。\n\n\n\ngit stash          # save uncommitted changes\n# pull, edit, etc.\ngit stash list     # list stashed changes in this git\ngit show stash@{0} # see the last stash \ngit stash pop      # apply last stash and remove it from the list\n\ngit stash --help   # for more info\n\ngit checkout bbb\ngit rebase master   //   把master的代码弄到bbb上(前提条件是文件不冲突，tree进行改变)\n\ngit checkout --theirs xxx    把xxx  分支的内容放到bbb上\n\ngit checkout --ours xxx  类似\n\n\n```\n### git删除某个commit\n```\n1.git log 获取commit信息  \n\n2.git rebase -i (commit-id)\n \ncommit-id 为要删除的commit的下一个commit号 \n\n3.编辑文件，将要删除的commit之前的单词改为drop \n\n4.保存文件退出大功告成 \n\n5.git log查看\n\ngit push origin master –force\n```i\n使用--amend 修改 author \n```\n git commit --amend --author=‘xxx <xxxx@xxx.xxx>\n```\n\n\nhttps://blog.csdn.net/mocoe/article/details/84344411\n\nhttps://www.jianshu.com/p/5b3166c855b2\n\n\n// 把另一个分支structure2的代码merge  到newbr 上，不包括commit\ngit checkout master\ngit checout -b newbr \ngit merge —squash —no-commit structure2\ngit add vendor\ngit commit -m \"add vendor\"\ngit add .\ngit commit -a -m \"commit message\"  ","slug":"git","published":1,"updated":"2019-07-02T12:49:42.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kh1001tgkxrt5m0sexx","content":"<p>Git</p>\n<p>新建分支：v1.1.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch v1.1.1</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -b v1.1.1</span><br></pre></td></tr></table></figure>\n<p>//新建分支并切换到新建分支<br>home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.2)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b v1.1.5 v1.1.2</span><br></pre></td></tr></table></figure>\n<p>切换分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout v1.1.1</span><br></pre></td></tr></table></figure>\n<p>//把分支push 到remote</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push orign v1.1.1</span><br></pre></td></tr></table></figure>\n<p>//修改branch 的名字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m v1.1.1 v1.1.2</span><br></pre></td></tr></table></figure>\n<p>//删除branch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete v1.1.1</span><br></pre></td></tr></table></figure>\n<p>添加文件到git<br>将当前目录下所有变化的文件，放入暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git add ./</span><br></pre></td></tr></table></figure>\n<p>//参数表示只添加暂存区已有的文件（包括删除操作），但不添加新增的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -u</span><br></pre></td></tr></table></figure>\n<p>//查看本地branch 分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch </span><br><span class=\"line\"></span><br><span class=\"line\">git branch -v</span><br></pre></td></tr></table></figure>\n<p>//查看本地和远程的分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p>//查看 远程remote 分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure>\n<p>//比较文件差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n<p>//删除分支(前提条件是该分支没有被合并)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d v1.1.1</span><br></pre></td></tr></table></figure>\n<p>//强制删除一个分支，不管该分支有没有被合并</p>\n<p>git branch -D v1.1.1</p>\n<p>//查看merge的情况<br>git branch –merged</p>\n<p>将工作区制定的文件还原到上次commit的状态<br>git checkout xxx.txt</p>\n<p>//切换到某个tag</p>\n<p>git checkout tags/1.1.4<br>或<br>git checkout 1.1.4</p>\n<p>//命令”复制”一个提交节点并在当前分支做一次完全一样的新提交。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick xxxxx</span><br></pre></td></tr></table></figure>\n<p>//根据一个树对象，生成新的commit对象。</p>\n<p>git commit-tree 16e19f -m “First commit”</p>\n<p>查看工作区与暂存区的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff</span><br></pre></td></tr></table></figure>\n<p> 查看某个文件的工作区与暂存区的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff file.txt</span><br></pre></td></tr></table></figure>\n<p>查看暂存区与当前 commit 的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff --cached</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>查看两个commit的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff &lt;commitBefore&gt; &lt;commitAfter</span><br></pre></td></tr></table></figure>\n<blockquote>\n</blockquote>\n<p> 查看暂存区与仓库区的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff --cached</span><br></pre></td></tr></table></figure>\n<p>查看工作区与上一次commit之间的差异<br>即如果执行 git commit -a，将提交的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff HEAD</span><br></pre></td></tr></table></figure>\n<p>查看工作区与某个 commit 的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n<p>显示两次提交之间的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>\n<p>查看工作区与当前分支上一次提交的差异，但是局限于test文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff HEAD -- ./test</span><br></pre></td></tr></table></figure>\n<p>查看当前分支上一次提交与上上一次提交之间的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff HEAD -- ./test</span><br></pre></td></tr></table></figure>\n<p>生成patch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git format-patch master --stdout &gt; mypatch.patch</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> 查看topic分支与master分支最新提交之间的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff topic master</span><br></pre></td></tr></table></figure>\n<p> 与上一条命令相同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff topic..master</span><br></pre></td></tr></table></figure>\n<p>查看自从topic分支建立以后，master分支发生的变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff topic...master</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>命令将当前目录转为git仓库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>命令按照提交时间从最晚到最早的顺序，列出所有 commit。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n<p>git remote<br>为远程仓库添加别名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it remote add john git@github.com:johnsomeone/someproject.git</span><br></pre></td></tr></table></figure>\n<p> 显示所有的远程主机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<p> 列出某个主机的详细信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show name</span><br></pre></td></tr></table></figure>\n<p>git revert<br>git revert命令用于撤销commit。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commitID&gt;</span><br></pre></td></tr></table></figure>\n<p>git rm<br>git rm命令用于删除文件。</p>\n<p>解除追踪某个文件，即该文件已被git add添加，然后抵消这个操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm --cached &lt;fileName&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git show</span><br><span class=\"line\">git show命令用于查看commit的内容</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出某次提交的元数据和内容变化</span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\">$ git show 12a86bc38 # By revision</span><br><span class=\"line\">$ git show v1.0.1 # By tag</span><br><span class=\"line\">$ git show feature132 # By branch name</span><br><span class=\"line\">$ git show 12a86bc38^ # Parent of a commit</span><br><span class=\"line\">$ git show 12a86bc38~2 # Grandparent of a commit</span><br><span class=\"line\">$ git show feature132@&#123;yesterday&#125; # Time relative</span><br><span class=\"line\">$ git show feature132@&#123;2.hours.ago&#125; # Time relative</span><br></pre></td></tr></table></figure>\n<p>git merge master<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)</span><br><span class=\"line\">$ git merge master</span><br><span class=\"line\">Already up-to-date.</span><br><span class=\"line\"></span><br><span class=\"line\">home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)</span><br><span class=\"line\">$ git checkout v1.1.5</span><br><span class=\"line\">Already on &apos;v1.1.5&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">Your branch is up-to-date with &apos;origin/master&apos;.</span><br><span class=\"line\"></span><br><span class=\"line\">home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (master)</span><br><span class=\"line\">$ git merge v1.1.5</span><br><span class=\"line\">Updating 891e496..f6a3810</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> dome.txt | 1 +</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (master)</span><br><span class=\"line\">$ cat dome.txt</span><br><span class=\"line\">gjkdsjsdjfjjgjksjdjfkdsjfsjffjkdsjfsjkfjksjfjsdjjsf</span><br></pre></td></tr></table></figure></p>\n<p>查看提交日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty=oneline</span><br><span class=\"line\">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br></pre></td></tr></table></figure>\n<p>回退版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 1094adb7b9b3807259d8cb349e7df1d4d6477073</span><br></pre></td></tr></table></figure>\n<p>查看远程分支<br>加上-a参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）：<br>$ git branch -a<br>  master<br>  remote<br>  tungway<br>  v1.52</p>\n<ul>\n<li>zrong<br>remotes/origin/master<br>remotes/origin/tungway<br>remotes/origin/v1.52<br>remotes/origin/zrong<br>删除远程分支和tag<br>在Git v1.7.0 之后，可以使用这种语法删除远程分支：</li>\n</ul>\n<p>1<br>$ git push origin –delete <branchname><br>删除tag这么用：</branchname></p>\n<p>1<br>git push origin –delete tag <tagname><br>否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：</tagname></p>\n<p>1<br>git push origin :<branchname><br>这是删除tag的方法，推送一个空tag到远程tag：</branchname></p>\n<p>$ git remote show origin</p>\n<ul>\n<li>remote origin<br>Fetch URL: <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:xxx/xxx.git<br>Push  URL: <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:xxx/xxx.git<br>HEAD branch: master<br>Remote branches:<br>  master                 tracked<br>  refs/remotes/origin/b1 stale (use ‘git remote prune’ to remove)<br>Local branch configured for ‘git pull’:<br>  master merges with remote master<br>Local ref configured for ‘git push’:<br>  master pushes to master (up to date)<br>这时候能够看到b1是stale的，使用 git remote prune origin 可以将其从本地版本库中去除。</li>\n</ul>\n<p>更简单的方法是使用这个命令，它在fetch之后删除掉没有与远程分支对应的本地分支：</p>\n<p>1<br>git fetch -p<br>重命名远程分支<br>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。</p>\n<p>例如下面的例子中，我需要把 devel 分支重命名为 develop 分支：</p>\n<p>$ git branch -av</p>\n<ul>\n<li>devel                             752bb84 Merge pull request #158 from Gwill/devel<br>master                            53b27b8 Merge pull request #138 from tdlrobin/master<br>zrong                             2ae98d8 modify CCFileUtils, export getFileData<br>remotes/origin/HEAD               -&gt; origin/master<br>remotes/origin/add_build_script   d4a8c4f Merge branch ‘master’ into add_build_script<br>remotes/origin/devel              752bb84 Merge pull request #158 from Gwill/devel<br>remotes/origin/devel_qt51         62208f1 update .gitignore<br>remotes/origin/master             53b27b8 Merge pull request #138 from tdlrobin/master<br>remotes/origin/zrong              2ae98d8 modify CCFileUtils, export getFileData<br>删除远程分支：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push --delete origin devel</span><br></pre></td></tr></table></figure>\n<p>To <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zrong/quick-cocos2d-x.git</p>\n<ul>\n<li>[deleted]         devel<br>重命名本地分支：</li>\n</ul>\n<p>1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m devel develop</span><br></pre></td></tr></table></figure>\n<p>推送本地分支：</p>\n<p>$ git push origin develop<br>Counting objects: 92, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (48/48), done.<br>Writing objects: 100% (58/58), 1.38 MiB, done.<br>Total 58 (delta 34), reused 12 (delta 5)<br>To <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zrong/quick-cocos2d-x.git</p>\n<ul>\n<li>[new branch]      develop -&gt; develop<br>然而，在 github 上操作的时候，我在删除远程分支时碰到这个错误：</li>\n</ul>\n<p>$ git push –delete origin devel<br>remote: error: refusing to delete the current branch: refs/heads/devel<br>To <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zrong/quick-cocos2d-x.git<br> ! [remote rejected] devel (deletion of the current branch prohibited)<br>error: failed to push some refs to <a href=\"mailto:&#39;git@github.com\" target=\"_blank\" rel=\"noopener\">&#39;git@github.com</a>:zrong/quick-cocos2d-x.git’<br>这是由于在 github 中，devel 是项目的默认分支。要解决此问题，这样操作：</p>\n<p>进入 github 中该项目的 Settings 页面；<br>设置 Default Branch 为其他的分支（例如 master）；<br>重新执行删除远程分支命令。<br>把本地tag推送到远程<br>1<br>git push –tags<br>获取远程tag<br>1<br>git fetch origin tag <tagname></tagname></p>\n<p>保存当前修改在缓存中，不可见</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash save &quot;worker&quot;</span><br></pre></td></tr></table></figure>\n<p>把当前保存在缓存的显示出来，可见</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git-命令行-使用-Tag-标记你的代码\"><a href=\"#Git-命令行-使用-Tag-标记你的代码\" class=\"headerlink\" title=\"Git-命令行-使用 Tag 标记你的代码\"></a>Git-命令行-使用 Tag 标记你的代码</h2><p>参考<br><a href=\"https://blog.csdn.net/qq_32452623/article/details/73949509\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_32452623/article/details/73949509</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001376951885068a0ac7d81c3a64912b35a59b58a1d926b000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001376951885068a0ac7d81c3a64912b35a59b58a1d926b000</a></p>\n<p>命令git push origin <tagname>可以推送一个本地标签；</tagname></p>\n<p>命令git push origin –tags可以推送全部未推送过的本地标签；</p>\n<p>命令git tag -d <tagname>可以删除一个本地标签；</tagname></p>\n<p>命令git push origin :refs/tags/<tagname>可以删除一个远程标签。</tagname></p>\n<p>同步remote branch to local<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -p</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对单次提交的每个文件都添加注释\"><a href=\"#对单次提交的每个文件都添加注释\" class=\"headerlink\" title=\"对单次提交的每个文件都添加注释\"></a>对单次提交的每个文件都添加注释</h2><p>可以单独add/commit，然后最后一起push。</p>\n<p>如有两个文件A.md和B.md需要push， 可以如下操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add A.md</span><br><span class=\"line\">git commit -m &quot;add A&quot;</span><br><span class=\"line\">git add B.md</span><br><span class=\"line\">git commit -m &quot;add B&quot;</span><br><span class=\"line\">git push.....</span><br></pre></td></tr></table></figure>\n<p>git squash</p>\n<p>`Git进阶命令讲解：squash,fixup,stash<br>2014-05-21 GitHub不完全装B指南</p>\n<p>@董林 希望我讲一下这三个命令，我看了一下，这三个命令虽然平时用得较少，但是在特定的情况下还是非常有用的，所以我就详细讲解一下。</p>\n<p>注意：下面的内容可能有点难，大家要集中精力了。</p>\n<p>一、squash</p>\n<p>squash准确来说并不是一个命令，而是rebase命令的一个功能。squash的作用很简单——合并多个commit。</p>\n<p>来看用法：</p>\n<p>git rebase -i HEAD~5<br>-i的意思是使用“交互式”的修改方法。加了这个参数之后，Git会把所有commit列出来，让你进行一些修改，修改完成之后会根据你的修改来rebase。HEAD-5的意思是只修改最近的5个commit。</p>\n<p>运行完这条命令之后，会进入一个编辑界面，大概是这样的：</p>\n<p>pick awe Add sth<br>pick add Have a rest<br>pick xxc Wow<br>pick cxz Yeah<br>pick dsa Finish it<br>可以看到一共有5行，这就是最近的5个commit以及它们的信息。</p>\n<p>假设我们现在想把它们合并成一个commit，要怎么做呢？直接看例子：</p>\n<p>pick awe Add sth<br>squash add Have a rest<br>squash xxc Wow<br>squash cxz Yeah<br>squash dsa Finish it</p>\n<p>我们把后4个commit的pick都改成了squash，修改完成之后保存退出，Git就会继续执行rebase命令了。执行完可以看一下结果，最后的4条commit都消失了，它们都被合并到了倒数第5条中。</p>\n<p>现在大家应该理解了，squash的作用就是把当前commit向前合并，一直合并到pick为止。</p>\n<p>rebase完成之后大家可以看一下最后一个commit的信息，里面会包含rebase之前最后5条的所有commit信息，也就是诸如“Add sth Have a rest Wow Yeah Finish it”这些东西。</p>\n<p>二、fixup</p>\n<p>fixup和squash非常类似，把pick修改成fixup，同样会向前合并到pick，唯一的区别就是，fixup会忽略当前commit的信息，只会应用修改。</p>\n<p>怎么理解呢？还用上面的例子说，假设我们使用fixup代替squash：</p>\n<p>pick awe Add sth<br>fixup add Have a rest<br>fixup xxc Wow<br>fixup cxz Yeah<br>fixup dsa Finish it</p>\n<p>保存退出之后，等Git执行完rebase我们查看一下最后一条commit的信息，会发现里面只有“Add sth”，另外四条commit的信息比如“Have a rest”都没有了。</p>\n<p>三、stash</p>\n<p>stash是一条Git命令，作用非常简单——保存当前状态。</p>\n<p>假设我们现在正在进行工作，修改了一些文件，添加了一些文件。这时我们突然想切换到另一个分支工作，但是又不想commit当前的修改（可能因为它们还不能运行），那该怎么办呢？答案就是stash。</p>\n<p>来看命令——git stash</p>\n<p>执行完命令之后，Git会把当前的状态保存，同时清理当前目录。我们可以运行一下 git status，会发现当前目录没有任何修改。这时我们就可以放心地切换分支工作了。</p>\n<p>等其他工作结束，想继续之前的工作时，可以运行 git stash apply，Git会把保存的状态复原。</p>\n<p>stash可以运行多次，会保存多个状态，可以运行 git stash list 来查看所有状态。运行 git stash apply 会默认复原到最近一次保存的状态，如果想指定复原状态可以使用 git stash apply stash@{2} ，这条命令会复原到 stash@{0} 状态。</p>\n<p>运行 apply 之后，被复原的状态并不会自动删除，仍然在 stash list 当中。可以运行 git stash drop stash@{0} 来删除 stash@{0} 状态，或者使用 git stash pop 命令来代替 git stash apply 命令，这样复原之后会自动删除被复原状态。</p>\n<p>如果 apply 的时候出现冲突（因为你 stash 之后对文件进行了修改），那么需要手动解决冲突。</p>\n<p>最后需要注意一点：stash 复原的时候默认不复原 staged 文件，也就是说如果你运行过 add 命令，使用 git status 查看的话文件应当处于 staged 状态，但是如果你 stash 并复原再看，那个文件的状态又变回 unstaged 了。解决办法就是运行 git stash apply 命令时加上 –index 参数：git stash apply –index，这样就可以完全恢复到 stash 之前的状态。<code></code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">修改branch 的名字</span><br></pre></td></tr></table></figure>\n<p>git branch -M oldbranch newbranch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug,  先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。</span><br><span class=\"line\">基础命令：</span><br><span class=\"line\">$git stash</span><br><span class=\"line\">$do some work</span><br><span class=\"line\">$git stash pop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">进阶：</span><br><span class=\"line\"></span><br><span class=\"line\">git stash save &quot;work in progress for foo feature&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">当你多次使用’git stash’命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，</span><br><span class=\"line\"></span><br><span class=\"line\">’git stash list’ 命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，例如使用’git stash apply stash@&#123;1&#125;’就可以将你指定版本号为stash@&#123;1&#125;的工作取出来，当你将所有的栈都应用回来的时候，可以使用’git stash clear’来将栈清空。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git stash          # save uncommitted changes</span><br><span class=\"line\"># pull, edit, etc.</span><br><span class=\"line\">git stash list     # list stashed changes in this git</span><br><span class=\"line\">git show stash@&#123;0&#125; # see the last stash </span><br><span class=\"line\">git stash pop      # apply last stash and remove it from the list</span><br><span class=\"line\"></span><br><span class=\"line\">git stash --help   # for more info</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout bbb</span><br><span class=\"line\">git rebase master   //   把master的代码弄到bbb上(前提条件是文件不冲突，tree进行改变)</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout --theirs xxx    把xxx  分支的内容放到bbb上</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout --ours xxx  类似</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"git删除某个commit\"><a href=\"#git删除某个commit\" class=\"headerlink\" title=\"git删除某个commit\"></a>git删除某个commit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.git log 获取commit信息  </span><br><span class=\"line\"></span><br><span class=\"line\">2.git rebase -i (commit-id)</span><br><span class=\"line\"> </span><br><span class=\"line\">commit-id 为要删除的commit的下一个commit号 </span><br><span class=\"line\"></span><br><span class=\"line\">3.编辑文件，将要删除的commit之前的单词改为drop </span><br><span class=\"line\"></span><br><span class=\"line\">4.保存文件退出大功告成 </span><br><span class=\"line\"></span><br><span class=\"line\">5.git log查看</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master –force</span><br><span class=\"line\">```i</span><br><span class=\"line\">使用--amend 修改 author</span><br></pre></td></tr></table></figure>\n<p> git commit –amend –author=‘xxx <a href=\"mailto:&#120;&#120;&#x78;&#x78;&#64;&#x78;&#120;&#120;&#46;&#x78;&#120;&#120;\" target=\"_blank\" rel=\"noopener\">&#120;&#120;&#x78;&#x78;&#64;&#x78;&#120;&#120;&#46;&#x78;&#120;&#120;</a><br><code>`</code></p>\n<p><a href=\"https://blog.csdn.net/mocoe/article/details/84344411\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mocoe/article/details/84344411</a></p>\n<p><a href=\"https://www.jianshu.com/p/5b3166c855b2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5b3166c855b2</a></p>\n<p>// 把另一个分支structure2的代码merge  到newbr 上，不包括commit<br>git checkout master<br>git checout -b newbr<br>git merge —squash —no-commit structure2<br>git add vendor<br>git commit -m “add vendor”<br>git add .<br>git commit -a -m “commit message”  </p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Git</p>\n<p>新建分支：v1.1.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch v1.1.1</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -b v1.1.1</span><br></pre></td></tr></table></figure>\n<p>//新建分支并切换到新建分支<br>home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.2)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b v1.1.5 v1.1.2</span><br></pre></td></tr></table></figure>\n<p>切换分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout v1.1.1</span><br></pre></td></tr></table></figure>\n<p>//把分支push 到remote</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push orign v1.1.1</span><br></pre></td></tr></table></figure>\n<p>//修改branch 的名字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m v1.1.1 v1.1.2</span><br></pre></td></tr></table></figure>\n<p>//删除branch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete v1.1.1</span><br></pre></td></tr></table></figure>\n<p>添加文件到git<br>将当前目录下所有变化的文件，放入暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git add ./</span><br></pre></td></tr></table></figure>\n<p>//参数表示只添加暂存区已有的文件（包括删除操作），但不添加新增的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -u</span><br></pre></td></tr></table></figure>\n<p>//查看本地branch 分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch </span><br><span class=\"line\"></span><br><span class=\"line\">git branch -v</span><br></pre></td></tr></table></figure>\n<p>//查看本地和远程的分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n<p>//查看 远程remote 分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure>\n<p>//比较文件差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n<p>//删除分支(前提条件是该分支没有被合并)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d v1.1.1</span><br></pre></td></tr></table></figure>\n<p>//强制删除一个分支，不管该分支有没有被合并</p>\n<p>git branch -D v1.1.1</p>\n<p>//查看merge的情况<br>git branch –merged</p>\n<p>将工作区制定的文件还原到上次commit的状态<br>git checkout xxx.txt</p>\n<p>//切换到某个tag</p>\n<p>git checkout tags/1.1.4<br>或<br>git checkout 1.1.4</p>\n<p>//命令”复制”一个提交节点并在当前分支做一次完全一样的新提交。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick xxxxx</span><br></pre></td></tr></table></figure>\n<p>//根据一个树对象，生成新的commit对象。</p>\n<p>git commit-tree 16e19f -m “First commit”</p>\n<p>查看工作区与暂存区的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff</span><br></pre></td></tr></table></figure>\n<p> 查看某个文件的工作区与暂存区的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff file.txt</span><br></pre></td></tr></table></figure>\n<p>查看暂存区与当前 commit 的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff --cached</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>查看两个commit的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff &lt;commitBefore&gt; &lt;commitAfter</span><br></pre></td></tr></table></figure>\n<blockquote>\n</blockquote>\n<p> 查看暂存区与仓库区的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff --cached</span><br></pre></td></tr></table></figure>\n<p>查看工作区与上一次commit之间的差异<br>即如果执行 git commit -a，将提交的文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff HEAD</span><br></pre></td></tr></table></figure>\n<p>查看工作区与某个 commit 的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff &lt;commit&gt;</span><br></pre></td></tr></table></figure>\n<p>显示两次提交之间的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>\n<p>查看工作区与当前分支上一次提交的差异，但是局限于test文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff HEAD -- ./test</span><br></pre></td></tr></table></figure>\n<p>查看当前分支上一次提交与上上一次提交之间的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff HEAD -- ./test</span><br></pre></td></tr></table></figure>\n<p>生成patch</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git format-patch master --stdout &gt; mypatch.patch</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> 查看topic分支与master分支最新提交之间的差异</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff topic master</span><br></pre></td></tr></table></figure>\n<p> 与上一条命令相同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff topic..master</span><br></pre></td></tr></table></figure>\n<p>查看自从topic分支建立以后，master分支发生的变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff topic...master</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>命令将当前目录转为git仓库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>命令按照提交时间从最晚到最早的顺序，列出所有 commit。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n<p>git remote<br>为远程仓库添加别名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it remote add john git@github.com:johnsomeone/someproject.git</span><br></pre></td></tr></table></figure>\n<p> 显示所有的远程主机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<p> 列出某个主机的详细信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show name</span><br></pre></td></tr></table></figure>\n<p>git revert<br>git revert命令用于撤销commit。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commitID&gt;</span><br></pre></td></tr></table></figure>\n<p>git rm<br>git rm命令用于删除文件。</p>\n<p>解除追踪某个文件，即该文件已被git add添加，然后抵消这个操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm --cached &lt;fileName&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git show</span><br><span class=\"line\">git show命令用于查看commit的内容</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出某次提交的元数据和内容变化</span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\">$ git show 12a86bc38 # By revision</span><br><span class=\"line\">$ git show v1.0.1 # By tag</span><br><span class=\"line\">$ git show feature132 # By branch name</span><br><span class=\"line\">$ git show 12a86bc38^ # Parent of a commit</span><br><span class=\"line\">$ git show 12a86bc38~2 # Grandparent of a commit</span><br><span class=\"line\">$ git show feature132@&#123;yesterday&#125; # Time relative</span><br><span class=\"line\">$ git show feature132@&#123;2.hours.ago&#125; # Time relative</span><br></pre></td></tr></table></figure>\n<p>git merge master<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)</span><br><span class=\"line\">$ git merge master</span><br><span class=\"line\">Already up-to-date.</span><br><span class=\"line\"></span><br><span class=\"line\">home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)</span><br><span class=\"line\">$ git checkout v1.1.5</span><br><span class=\"line\">Already on &apos;v1.1.5&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (v1.1.5)</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">Your branch is up-to-date with &apos;origin/master&apos;.</span><br><span class=\"line\"></span><br><span class=\"line\">home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (master)</span><br><span class=\"line\">$ git merge v1.1.5</span><br><span class=\"line\">Updating 891e496..f6a3810</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> dome.txt | 1 +</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">home@DESKTOP-S967PDA MINGW64 /f/gitPractise/gitDemo (master)</span><br><span class=\"line\">$ cat dome.txt</span><br><span class=\"line\">gjkdsjsdjfjjgjksjdjfkdsjfsjffjkdsjfsjkfjksjfjsdjjsf</span><br></pre></td></tr></table></figure></p>\n<p>查看提交日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty=oneline</span><br><span class=\"line\">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br></pre></td></tr></table></figure>\n<p>回退版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 1094adb7b9b3807259d8cb349e7df1d4d6477073</span><br></pre></td></tr></table></figure>\n<p>查看远程分支<br>加上-a参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）：<br>$ git branch -a<br>  master<br>  remote<br>  tungway<br>  v1.52</p>\n<ul>\n<li>zrong<br>remotes/origin/master<br>remotes/origin/tungway<br>remotes/origin/v1.52<br>remotes/origin/zrong<br>删除远程分支和tag<br>在Git v1.7.0 之后，可以使用这种语法删除远程分支：</li>\n</ul>\n<p>1<br>$ git push origin –delete <branchname><br>删除tag这么用：</branchname></p>\n<p>1<br>git push origin –delete tag <tagname><br>否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：</tagname></p>\n<p>1<br>git push origin :<branchname><br>这是删除tag的方法，推送一个空tag到远程tag：</branchname></p>\n<p>$ git remote show origin</p>\n<ul>\n<li>remote origin<br>Fetch URL: <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:xxx/xxx.git<br>Push  URL: <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:xxx/xxx.git<br>HEAD branch: master<br>Remote branches:<br>  master                 tracked<br>  refs/remotes/origin/b1 stale (use ‘git remote prune’ to remove)<br>Local branch configured for ‘git pull’:<br>  master merges with remote master<br>Local ref configured for ‘git push’:<br>  master pushes to master (up to date)<br>这时候能够看到b1是stale的，使用 git remote prune origin 可以将其从本地版本库中去除。</li>\n</ul>\n<p>更简单的方法是使用这个命令，它在fetch之后删除掉没有与远程分支对应的本地分支：</p>\n<p>1<br>git fetch -p<br>重命名远程分支<br>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。</p>\n<p>例如下面的例子中，我需要把 devel 分支重命名为 develop 分支：</p>\n<p>$ git branch -av</p>\n<ul>\n<li>devel                             752bb84 Merge pull request #158 from Gwill/devel<br>master                            53b27b8 Merge pull request #138 from tdlrobin/master<br>zrong                             2ae98d8 modify CCFileUtils, export getFileData<br>remotes/origin/HEAD               -&gt; origin/master<br>remotes/origin/add_build_script   d4a8c4f Merge branch ‘master’ into add_build_script<br>remotes/origin/devel              752bb84 Merge pull request #158 from Gwill/devel<br>remotes/origin/devel_qt51         62208f1 update .gitignore<br>remotes/origin/master             53b27b8 Merge pull request #138 from tdlrobin/master<br>remotes/origin/zrong              2ae98d8 modify CCFileUtils, export getFileData<br>删除远程分支：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push --delete origin devel</span><br></pre></td></tr></table></figure>\n<p>To <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zrong/quick-cocos2d-x.git</p>\n<ul>\n<li>[deleted]         devel<br>重命名本地分支：</li>\n</ul>\n<p>1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m devel develop</span><br></pre></td></tr></table></figure>\n<p>推送本地分支：</p>\n<p>$ git push origin develop<br>Counting objects: 92, done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (48/48), done.<br>Writing objects: 100% (58/58), 1.38 MiB, done.<br>Total 58 (delta 34), reused 12 (delta 5)<br>To <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zrong/quick-cocos2d-x.git</p>\n<ul>\n<li>[new branch]      develop -&gt; develop<br>然而，在 github 上操作的时候，我在删除远程分支时碰到这个错误：</li>\n</ul>\n<p>$ git push –delete origin devel<br>remote: error: refusing to delete the current branch: refs/heads/devel<br>To <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zrong/quick-cocos2d-x.git<br> ! [remote rejected] devel (deletion of the current branch prohibited)<br>error: failed to push some refs to <a href=\"mailto:&#39;git@github.com\" target=\"_blank\" rel=\"noopener\">&#39;git@github.com</a>:zrong/quick-cocos2d-x.git’<br>这是由于在 github 中，devel 是项目的默认分支。要解决此问题，这样操作：</p>\n<p>进入 github 中该项目的 Settings 页面；<br>设置 Default Branch 为其他的分支（例如 master）；<br>重新执行删除远程分支命令。<br>把本地tag推送到远程<br>1<br>git push –tags<br>获取远程tag<br>1<br>git fetch origin tag <tagname></tagname></p>\n<p>保存当前修改在缓存中，不可见</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash save &quot;worker&quot;</span><br></pre></td></tr></table></figure>\n<p>把当前保存在缓存的显示出来，可见</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git-命令行-使用-Tag-标记你的代码\"><a href=\"#Git-命令行-使用-Tag-标记你的代码\" class=\"headerlink\" title=\"Git-命令行-使用 Tag 标记你的代码\"></a>Git-命令行-使用 Tag 标记你的代码</h2><p>参考<br><a href=\"https://blog.csdn.net/qq_32452623/article/details/73949509\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_32452623/article/details/73949509</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001376951885068a0ac7d81c3a64912b35a59b58a1d926b000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001376951885068a0ac7d81c3a64912b35a59b58a1d926b000</a></p>\n<p>命令git push origin <tagname>可以推送一个本地标签；</tagname></p>\n<p>命令git push origin –tags可以推送全部未推送过的本地标签；</p>\n<p>命令git tag -d <tagname>可以删除一个本地标签；</tagname></p>\n<p>命令git push origin :refs/tags/<tagname>可以删除一个远程标签。</tagname></p>\n<p>同步remote branch to local<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -p</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对单次提交的每个文件都添加注释\"><a href=\"#对单次提交的每个文件都添加注释\" class=\"headerlink\" title=\"对单次提交的每个文件都添加注释\"></a>对单次提交的每个文件都添加注释</h2><p>可以单独add/commit，然后最后一起push。</p>\n<p>如有两个文件A.md和B.md需要push， 可以如下操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add A.md</span><br><span class=\"line\">git commit -m &quot;add A&quot;</span><br><span class=\"line\">git add B.md</span><br><span class=\"line\">git commit -m &quot;add B&quot;</span><br><span class=\"line\">git push.....</span><br></pre></td></tr></table></figure>\n<p>git squash</p>\n<p>`Git进阶命令讲解：squash,fixup,stash<br>2014-05-21 GitHub不完全装B指南</p>\n<p>@董林 希望我讲一下这三个命令，我看了一下，这三个命令虽然平时用得较少，但是在特定的情况下还是非常有用的，所以我就详细讲解一下。</p>\n<p>注意：下面的内容可能有点难，大家要集中精力了。</p>\n<p>一、squash</p>\n<p>squash准确来说并不是一个命令，而是rebase命令的一个功能。squash的作用很简单——合并多个commit。</p>\n<p>来看用法：</p>\n<p>git rebase -i HEAD~5<br>-i的意思是使用“交互式”的修改方法。加了这个参数之后，Git会把所有commit列出来，让你进行一些修改，修改完成之后会根据你的修改来rebase。HEAD-5的意思是只修改最近的5个commit。</p>\n<p>运行完这条命令之后，会进入一个编辑界面，大概是这样的：</p>\n<p>pick awe Add sth<br>pick add Have a rest<br>pick xxc Wow<br>pick cxz Yeah<br>pick dsa Finish it<br>可以看到一共有5行，这就是最近的5个commit以及它们的信息。</p>\n<p>假设我们现在想把它们合并成一个commit，要怎么做呢？直接看例子：</p>\n<p>pick awe Add sth<br>squash add Have a rest<br>squash xxc Wow<br>squash cxz Yeah<br>squash dsa Finish it</p>\n<p>我们把后4个commit的pick都改成了squash，修改完成之后保存退出，Git就会继续执行rebase命令了。执行完可以看一下结果，最后的4条commit都消失了，它们都被合并到了倒数第5条中。</p>\n<p>现在大家应该理解了，squash的作用就是把当前commit向前合并，一直合并到pick为止。</p>\n<p>rebase完成之后大家可以看一下最后一个commit的信息，里面会包含rebase之前最后5条的所有commit信息，也就是诸如“Add sth Have a rest Wow Yeah Finish it”这些东西。</p>\n<p>二、fixup</p>\n<p>fixup和squash非常类似，把pick修改成fixup，同样会向前合并到pick，唯一的区别就是，fixup会忽略当前commit的信息，只会应用修改。</p>\n<p>怎么理解呢？还用上面的例子说，假设我们使用fixup代替squash：</p>\n<p>pick awe Add sth<br>fixup add Have a rest<br>fixup xxc Wow<br>fixup cxz Yeah<br>fixup dsa Finish it</p>\n<p>保存退出之后，等Git执行完rebase我们查看一下最后一条commit的信息，会发现里面只有“Add sth”，另外四条commit的信息比如“Have a rest”都没有了。</p>\n<p>三、stash</p>\n<p>stash是一条Git命令，作用非常简单——保存当前状态。</p>\n<p>假设我们现在正在进行工作，修改了一些文件，添加了一些文件。这时我们突然想切换到另一个分支工作，但是又不想commit当前的修改（可能因为它们还不能运行），那该怎么办呢？答案就是stash。</p>\n<p>来看命令——git stash</p>\n<p>执行完命令之后，Git会把当前的状态保存，同时清理当前目录。我们可以运行一下 git status，会发现当前目录没有任何修改。这时我们就可以放心地切换分支工作了。</p>\n<p>等其他工作结束，想继续之前的工作时，可以运行 git stash apply，Git会把保存的状态复原。</p>\n<p>stash可以运行多次，会保存多个状态，可以运行 git stash list 来查看所有状态。运行 git stash apply 会默认复原到最近一次保存的状态，如果想指定复原状态可以使用 git stash apply stash@{2} ，这条命令会复原到 stash@{0} 状态。</p>\n<p>运行 apply 之后，被复原的状态并不会自动删除，仍然在 stash list 当中。可以运行 git stash drop stash@{0} 来删除 stash@{0} 状态，或者使用 git stash pop 命令来代替 git stash apply 命令，这样复原之后会自动删除被复原状态。</p>\n<p>如果 apply 的时候出现冲突（因为你 stash 之后对文件进行了修改），那么需要手动解决冲突。</p>\n<p>最后需要注意一点：stash 复原的时候默认不复原 staged 文件，也就是说如果你运行过 add 命令，使用 git status 查看的话文件应当处于 staged 状态，但是如果你 stash 并复原再看，那个文件的状态又变回 unstaged 了。解决办法就是运行 git stash apply 命令时加上 –index 参数：git stash apply –index，这样就可以完全恢复到 stash 之前的状态。<code></code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">修改branch 的名字</span><br></pre></td></tr></table></figure>\n<p>git branch -M oldbranch newbranch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug,  先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。</span><br><span class=\"line\">基础命令：</span><br><span class=\"line\">$git stash</span><br><span class=\"line\">$do some work</span><br><span class=\"line\">$git stash pop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">进阶：</span><br><span class=\"line\"></span><br><span class=\"line\">git stash save &quot;work in progress for foo feature&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">当你多次使用’git stash’命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，</span><br><span class=\"line\"></span><br><span class=\"line\">’git stash list’ 命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，例如使用’git stash apply stash@&#123;1&#125;’就可以将你指定版本号为stash@&#123;1&#125;的工作取出来，当你将所有的栈都应用回来的时候，可以使用’git stash clear’来将栈清空。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git stash          # save uncommitted changes</span><br><span class=\"line\"># pull, edit, etc.</span><br><span class=\"line\">git stash list     # list stashed changes in this git</span><br><span class=\"line\">git show stash@&#123;0&#125; # see the last stash </span><br><span class=\"line\">git stash pop      # apply last stash and remove it from the list</span><br><span class=\"line\"></span><br><span class=\"line\">git stash --help   # for more info</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout bbb</span><br><span class=\"line\">git rebase master   //   把master的代码弄到bbb上(前提条件是文件不冲突，tree进行改变)</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout --theirs xxx    把xxx  分支的内容放到bbb上</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout --ours xxx  类似</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"git删除某个commit\"><a href=\"#git删除某个commit\" class=\"headerlink\" title=\"git删除某个commit\"></a>git删除某个commit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.git log 获取commit信息  </span><br><span class=\"line\"></span><br><span class=\"line\">2.git rebase -i (commit-id)</span><br><span class=\"line\"> </span><br><span class=\"line\">commit-id 为要删除的commit的下一个commit号 </span><br><span class=\"line\"></span><br><span class=\"line\">3.编辑文件，将要删除的commit之前的单词改为drop </span><br><span class=\"line\"></span><br><span class=\"line\">4.保存文件退出大功告成 </span><br><span class=\"line\"></span><br><span class=\"line\">5.git log查看</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master –force</span><br><span class=\"line\">```i</span><br><span class=\"line\">使用--amend 修改 author</span><br></pre></td></tr></table></figure>\n<p> git commit –amend –author=‘xxx <a href=\"mailto:&#120;&#120;&#x78;&#x78;&#64;&#x78;&#120;&#120;&#46;&#x78;&#120;&#120;\" target=\"_blank\" rel=\"noopener\">&#120;&#120;&#x78;&#x78;&#64;&#x78;&#120;&#120;&#46;&#x78;&#120;&#120;</a><br><code>`</code></p>\n<p><a href=\"https://blog.csdn.net/mocoe/article/details/84344411\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mocoe/article/details/84344411</a></p>\n<p><a href=\"https://www.jianshu.com/p/5b3166c855b2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5b3166c855b2</a></p>\n<p>// 把另一个分支structure2的代码merge  到newbr 上，不包括commit<br>git checkout master<br>git checout -b newbr<br>git merge —squash —no-commit structure2<br>git add vendor<br>git commit -m “add vendor”<br>git add .<br>git commit -a -m “commit message”  </p>\n"},{"title":"Mac 键盘快捷键","date":"2019-04-21T01:58:27.000Z","_content":"##Mac 键盘快捷键\n您可以按下某些组合键来实现通常需要鼠标、触控板或其他输入设备才能完成的操作。\n\n要使用键盘快捷键，请按住一个或多个修饰键，然后按快捷键的最后一个键。例如，要使用 Command-C（拷贝），请按住 Command 键并按 C 键，然后同时松开这两个键。Mac 菜单和键盘通常对某些按键使用符号，其中包括以下修饰键：\n\nCommand（或 Cmd）⌘\nShift ⇧\nOption（或 Alt）⌥\nControl（或 Ctrl）⌃\nCaps Lock ⇪\nFn\n\n在 Windows PC 专用键盘上，请用 Alt 键代替 Option 键，用 Windows 标志键代替 Command 键。\n\nApple 键盘上的某些按键具有特殊符号和功能，例如显示屏亮度 、键盘亮度 、调度中心等。如果您的键盘上没有这些功能，您也许可以通过创建自己的键盘快捷键来实现其中的一些功能。要将这些键用作 F1、F2、F3 或其他标准功能键，请将它们与 Fn 键组合使用。\n\n\n\n剪切、拷贝、粘贴和其他常用快捷键\n\nCommand-X：剪切所选项并拷贝到剪贴板。\n\nCommand-C：将所选项拷贝到剪贴板。这同样适用于“访达”中的文件。\n\nCommand-V：将剪贴板的内容粘贴到当前文稿或应用中。这同样适用于“访达”中的文件。\n\nCommand-Z：撤销上一个命令。随后您可以按 Shift-Command-Z 来重做，从而反向执行撤销命令。在某些应用中，您可以撤销和重做多个命令。\n\nCommand-A：全选各项。\n\nCommand-F：查找文稿中的项目或打开“查找”窗口。\n\nCommand-G：再次查找：查找之前所找到项目出现的下一个位置。要查找出现的上一个位置，请按 Shift-Command-G。\n\nCommand-H：隐藏最前面的应用的窗口。要查看最前面的应用但隐藏所有其他应用，请按 Option-Command-H。\n\nCommand-M：将最前面的窗口最小化至“程序坞”。要最小化最前面的应用的所有窗口，请按 Option-Command-M。\n\nCommand-O：打开所选项，或打开一个对话框以选择要打开的文件。\n\nCommand-P：打印当前文稿。\n\nCommand-S：存储当前文稿。\n\nCommand-T：打开新标签页。\n\nCommand-W：关闭最前面的窗口。要关闭应用的所有窗口，请按下 Option-Command-W。\n\nOption-Command-Esc：强制退出应用。\n\nCommand–空格键：显示或隐藏“聚焦”搜索栏。要从“访达”窗口执行“聚焦”搜索，请按 Command–Option–空格键。（如果您使用多个输入源以便用不同的语言键入内容，这些快捷键会更改输入源而非显示“聚焦”。了解如何更改冲突的键盘快捷键。）\n\nControl-Command–空格键：显示字符检视器，您可以从中选择表情符号和其他符号。\n\nControl-Command-F：全屏使用应用（如果应用支持）。\n\n空格键：使用快速查看来预览所选项。\n\nCommand-Tab：在打开的应用中切换到下一个最近使用的应用。\n\nShift-Command-5：在 macOS Mojave 中，拍摄屏幕快照或录制屏幕。在更早的 macOS 版本中，请使用 Shift-Command-3 或 Shift-Command-4 来拍摄屏幕快照。进一步了解屏幕快照。\n\nShift-Command-N：在“访达”中创建一个新文件夹。\n\nCommand-逗号 (,)：打开最前面的应用的偏好设置。\n\n\n睡眠、退出登录和关机快捷键\n在这些快捷键中，您可能需要按住其中一些快捷键稍长时间。这样可以避免您无意中启用快捷键。\n\n电源按钮：按下可将 Mac 开机或将 Mac 从睡眠状态唤醒。按住这个按钮 1.5 秒可使 Mac 进入睡眠状态。*继续按住则会强制您的 Mac 关机。\n\nOption–Command–电源按钮*或 Option–Command–Media Eject（Option–Command–介质推出键）：将您的 Mac 置于睡眠状态。\n\nControl–Shift–电源按钮*或 Control–Shift–Media Eject（Control–Shift–介质推出键）：将显示器置于睡眠状态。\n\nControl–电源按钮*或 Control–Media Eject（Control–介质推出键）：显示一个对话框，询问您是要重新启动、睡眠还是关机。\n\nControl–Command–Power 电源按钮：*强制 Mac 重新启动，系统不会提示是否要存储任何打开且未存储的文稿。\n\nControl–Command–Media Eject（Control–Command–介质推出键）：退出所有应用，然后重新启动您的 Mac。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。\n\nControl–Option-Command–电源按钮*或 Control–Option–Command–Media Eject（Control–Option–Command–介质推出键）：退出所有应用，然后将您的 Mac 关机。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。\n\nShift–Command–Q：退出登录您的 macOS 用户帐户。系统将提示您确认。要在不确认的情况下立即退出登录，请按下 Option-Shift-Command-Q。\n* 不适用于触控 ID 传感器。\n\n\n\n访达和系统快捷键\n\nCommand-D：复制所选文件。\n\nCommand-E：推出所选磁盘或宗卷。\n\nCommand-F：在“访达”窗口中开始“聚焦”搜索。\n\nCommand-I：显示所选文件的“显示简介”窗口。\n\nCommand-R：(1) 如果在“访达”中选择了某个别名：显示所选别名对应的原始文件。(2) 在某些应用（如“日历”或 Safari 浏览器）中，刷新或重新载入页面。(3) 在“软件更新”偏好设置中，再次检查有没有软件更新。\n\nShift-Command-C：打开“电脑”窗口。\n\nShift-Command-D：打开“桌面”文件夹。\n\nShift-Command-F：打开“最近使用”窗口，其中显示了您最近查看或更改过的所有文件。\n\nShift-Command-G：打开“前往文件夹”窗口。\n\nShift-Command-H：打开当前 macOS 用户帐户的个人文件夹。\n\nShift-Command-I：打开 iCloud 云盘。\n\nShift-Command-K：打开“网络”窗口。\n\nOption-Command-L：打开“下载”文件夹。\n\nShift-Command-N：新建文件夹。\n\nShift-Command-O：打开“文稿”文件夹。\n\nShift-Command-P：在“访达”窗口中显示或隐藏预览面板。\n\nShift-Command-R：打开“隔空投送”窗口。\n\nShift-Command-T：显示或隐藏“访达”窗口中的标签页栏。\n\nCtrl-Shift-Command-T：将所选的“访达”项目添加到“程序坞”（OS X Mavericks 或更高版本）\n\nShift-Command-U：打开“实用工具”文件夹。\n\nOption-Command-D：显示或隐藏“程序坞”。\n\nControl-Command-T：将所选项添加到边栏（OS X Mavericks 或更高版本）。\n\nOption-Command-P：隐藏或显示“访达”窗口中的路径栏。\n\nOption-Command-S：隐藏或显示“访达”窗口中的边栏。\n\nCommand–斜线 (/)：隐藏或显示“访达”窗口中的状态栏。\n\nCommand-J：显示“显示”选项。\n\nCommand-K：打开“连接服务器”窗口。\n\nCommand-L：为所选项制作替身。\n\nCommand-N：打开一个新的“访达”窗口。\n\nOption-Command-N：新建智能文件夹。\n\nCommand-T：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏标签页栏。\n\nOption-Command-T：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏工具栏。\n\nOption-Command-V：移动：将剪贴板中的文件从原始位置移动到当前位置。\n\nCommand-Y：使用“快速查看”预览所选文件。\n\nOption-Command-Y：显示所选文件的快速查看幻灯片显示。\n\nCommand-1：以图标方式显示“访达”窗口中的项目。\n\nCommand-2：以列表方式显示“访达”窗口中的项目。\n\nCommand-3：以分栏方式显示“访达”窗口中的项目。\n\nCommand-4：以封面流方式显示“访达”窗口中的项目。\n\nCommand–左中括号 ([)：前往上一文件夹。\n\nCommand–右中括号 (])：前往下一个文件夹。\n\nCommand–上箭头：打开包含当前文件夹的文件夹。\n\nCommand–Control–上箭头：在新窗口中打开包含当前文件夹的文件夹。\n\nCommand–下箭头：打开所选项。\n\n右箭头：打开所选文件夹。这个快捷键仅在列表视图中有效。\n左箭头：关闭所选文件夹。这个快捷键仅在列表视图中有效。\nCommand-Delete：将所选项移到废纸篓。\n\nShift-Command-Delete：清倒废纸篓。\n\nOption-Shift-Command-Delete：清倒废纸篓而不显示确认对话框。\n\nCommand–调高亮度：打开或关闭目标显示器模式。\n\nCommand–调低亮度：当您的 Mac 连接到多台显示器时，打开或关闭视频镜像。\n\nOption–调高亮度：打开“显示器”偏好设置。这个快捷键可与任一亮度键搭配使用。\n\nControl–调高亮度或 Control–调低亮度：更改外部显示器的亮度（如果显示器支持）。\n\nOption-Shift–调高亮度或 Option-Shift–调低亮度：以较小的步幅调节显示器亮度。如果您的显示器支持，可以将 Control 键添加到此快捷键，以便在外置显示器上进行调节。\n\nOption–“调度中心”：打开“调度中心”偏好设置。\n\nCommand–“调度中心”：显示桌面。\n\nControl–下箭头：显示最前面的应用的所有窗口。\n\nOption–调高音量：打开“声音”偏好设置。这个快捷键可与任一音量键搭配使用。\n\nOption-Shift–调高音量或 Option-Shift–调低音量：以较小的步幅调节音量。\n\nOption–键盘调高亮度：打开“键盘”偏好设置。这个快捷键可与任一键盘亮度键搭配使用。\n\nOption-Shift–键盘调高亮度或 Option-Shift–键盘调低亮度：以较小的步幅调节键盘亮度。\n\n连按 Option 键：在单独的窗口中打开项目，然后关闭原始窗口。\n\n连按 Command 键：在单独的标签页或窗口中打开文件夹。\n\n按住 Command 键拖移到另一个宗卷：将拖移的项目移到另一个宗卷，而不是拷贝它。\n\n按住 Option 键拖移：拷贝托移的项目。拖移项目时指针会随之变化。\n\n按住 Option-Command 键拖移：为拖移的项目制作替身。拖移项目时指针会随之变化。\n\n按住 Option 键点按开合三角：打开所选文件夹内的所有文件夹。此快捷键仅在列表视图中有效。\n\n按住 Command 键点按窗口标题：查看包含当前文件夹的文件夹。\n\n了解如何使用 Command 或 Shift 在“访达”中选择多个项目。\n\n点按“访达”菜单栏中的“前往”菜单查看用于打开许多常用文件夹（如“应用程序”、“文稿”、“下载”、“实用工具”和“iCloud 云盘”）的快捷键。\n\n\n文稿快捷键\n这些快捷键的行为可能因您使用的应用而异。\n\nCommand-B：以粗体显示所选文本，或者打开或关闭粗体显示功能。\n\nCommand-I：以斜体显示所选文本，或者打开或关闭斜体显示功能。\n\nCommand-K：添加网页链接。\n\nCommand-U：对所选文本加下划线，或者打开或关闭加下划线功能。\n\nCommand-T：显示或隐藏“字体”窗口。\n\nCommand-D：从“打开”对话框或“存储”对话框内选择“桌面”文件夹。\n\nControl-Command-D：显示或隐藏所选字词的定义。\n\nShift-Command–冒号 (:)：显示“拼写和语法”窗口。\n\nCommand–分号 (;)：查找文稿中拼写错误的字词。\n\nOption-Delete：删除插入点左边的字词。\n\nControl-H：删除插入点左边的字符。也可以使用 Delete 键。\n\nControl-D：删除插入点右边的字符。也可以使用 Fn-Delete。\n\nFn-Delete：在没有向前删除   键的键盘上向前删除。也可以使用 Control-D。\n\nControl-K：删除插入点与行或段落末尾处之间的文本。\n\nFn–上箭头：Page Up：向上滚动一页。\n\nFn–下箭头：Page Down：向下滚动一页。\n\nFn–左箭头：Home：滚动到文稿开头。\n\nFn–右箭头：End：滚动到文稿末尾。\n\nCommand–上箭头：将插入点移至文稿开头。\n\nCommand–下箭头：将插入点移至文稿末尾。\n\nCommand–左箭头：将插入点移至当前行的行首。\n\nCommand–右箭头：将插入点移至当前行的行尾。\n\nOption–左箭头：将插入点移至上一字词的词首。\n\nOption–右箭头：将插入点移至下一字词的词尾。\n\nShift-Command–上箭头：选中插入点与文稿开头之间的文本。\n\nShift-Command–下箭头：选中插入点与文稿末尾之间的文本。\n\nShift-Command–左箭头：选中插入点与当前行行首之间的文本。\n\nShift-Command–右箭头：选中插入点与当前行行尾之间的文本。\n\nShift–上箭头：将文本选择范围扩展到上一行相同水平位置的最近字符处。\n\nShift–下箭头：将文本选择范围扩展到下一行相同水平位置的最近字符处。\n\nShift–左箭头：将文本选择范围向左扩展一个字符。\n\nShift–右箭头：将文本选择范围向右扩展一个字符。\n\nOption–Shift–上箭头：将文本选择范围扩展到当前段落的段首，再按一次则扩展到下一段落的段首。\n\nOption–Shift–下箭头：将文本选择范围扩展到当前段落的段尾，再按一次则扩展到下一段落的段尾。\n\nOption–Shift–左箭头：将文本选择范围扩展到当前字词的词首，再按一次则扩展到后一字词的词首。\n\nOption–Shift–左箭头：将文本选择范围扩展到当前字词的词尾，再按一次则扩展到后一字词的词尾。\n\nControl–A：移至行或段落的开头。\n\nControl–E：移至行或段落的末尾。\n\nControl–F：向前移动一个字符。\n\nControl–B：向后移动一个字符。\n\nControl–L：将光标或所选内容置于可见区域中央。\n\nControl–P：上移一行。\n\nControl–N：下移一行。\n\nControl–O：在插入点后新插入一行。\n\nControl–T：将插入点后面的字符与插入点前面的字符交换。\n\nCommand–左花括号 ({)：左对齐。\n\nCommand–右花括号 (})：右对齐。\n\nShift-Command–竖线 (|)：居中对齐。\n\nOption-Command-F：前往搜索栏。\n\nOption-Command-T：显示或隐藏应用中的工具栏。\n\nOption-Command-C：拷贝样式：将所选项的格式设置拷贝到剪贴板。\n\nOption-Command-V：粘贴样式：将拷贝的样式应用到所选项。\n\nOption-Shift-Command-V：粘贴并匹配样式：将周围内容的样式应用到粘贴在该内容中的项目。\n\nOption-Command-I：显示或隐藏检查器窗口。\n\nShift-Command-P：页面设置：显示用于选择文稿设置的窗口。\n\nShift-Command-S：显示“存储为”对话框或复制当前文稿。\n\nShift-Command-减号 (-)：缩小所选项。\n\nShift-Command-加号 (+)：放大所选项。Command–等号 (=) 可实现相同的功能。\n\nShift-Command–问号 (?)：打开“帮助”菜单。\n\n\n 参考：https://support.apple.com/zh-cn/HT201236","source":"_posts/mac-key.md","raw":"---\ntitle: Mac 键盘快捷键\ndate: 2019-04-21 09:58:27\ntags:\n---\n##Mac 键盘快捷键\n您可以按下某些组合键来实现通常需要鼠标、触控板或其他输入设备才能完成的操作。\n\n要使用键盘快捷键，请按住一个或多个修饰键，然后按快捷键的最后一个键。例如，要使用 Command-C（拷贝），请按住 Command 键并按 C 键，然后同时松开这两个键。Mac 菜单和键盘通常对某些按键使用符号，其中包括以下修饰键：\n\nCommand（或 Cmd）⌘\nShift ⇧\nOption（或 Alt）⌥\nControl（或 Ctrl）⌃\nCaps Lock ⇪\nFn\n\n在 Windows PC 专用键盘上，请用 Alt 键代替 Option 键，用 Windows 标志键代替 Command 键。\n\nApple 键盘上的某些按键具有特殊符号和功能，例如显示屏亮度 、键盘亮度 、调度中心等。如果您的键盘上没有这些功能，您也许可以通过创建自己的键盘快捷键来实现其中的一些功能。要将这些键用作 F1、F2、F3 或其他标准功能键，请将它们与 Fn 键组合使用。\n\n\n\n剪切、拷贝、粘贴和其他常用快捷键\n\nCommand-X：剪切所选项并拷贝到剪贴板。\n\nCommand-C：将所选项拷贝到剪贴板。这同样适用于“访达”中的文件。\n\nCommand-V：将剪贴板的内容粘贴到当前文稿或应用中。这同样适用于“访达”中的文件。\n\nCommand-Z：撤销上一个命令。随后您可以按 Shift-Command-Z 来重做，从而反向执行撤销命令。在某些应用中，您可以撤销和重做多个命令。\n\nCommand-A：全选各项。\n\nCommand-F：查找文稿中的项目或打开“查找”窗口。\n\nCommand-G：再次查找：查找之前所找到项目出现的下一个位置。要查找出现的上一个位置，请按 Shift-Command-G。\n\nCommand-H：隐藏最前面的应用的窗口。要查看最前面的应用但隐藏所有其他应用，请按 Option-Command-H。\n\nCommand-M：将最前面的窗口最小化至“程序坞”。要最小化最前面的应用的所有窗口，请按 Option-Command-M。\n\nCommand-O：打开所选项，或打开一个对话框以选择要打开的文件。\n\nCommand-P：打印当前文稿。\n\nCommand-S：存储当前文稿。\n\nCommand-T：打开新标签页。\n\nCommand-W：关闭最前面的窗口。要关闭应用的所有窗口，请按下 Option-Command-W。\n\nOption-Command-Esc：强制退出应用。\n\nCommand–空格键：显示或隐藏“聚焦”搜索栏。要从“访达”窗口执行“聚焦”搜索，请按 Command–Option–空格键。（如果您使用多个输入源以便用不同的语言键入内容，这些快捷键会更改输入源而非显示“聚焦”。了解如何更改冲突的键盘快捷键。）\n\nControl-Command–空格键：显示字符检视器，您可以从中选择表情符号和其他符号。\n\nControl-Command-F：全屏使用应用（如果应用支持）。\n\n空格键：使用快速查看来预览所选项。\n\nCommand-Tab：在打开的应用中切换到下一个最近使用的应用。\n\nShift-Command-5：在 macOS Mojave 中，拍摄屏幕快照或录制屏幕。在更早的 macOS 版本中，请使用 Shift-Command-3 或 Shift-Command-4 来拍摄屏幕快照。进一步了解屏幕快照。\n\nShift-Command-N：在“访达”中创建一个新文件夹。\n\nCommand-逗号 (,)：打开最前面的应用的偏好设置。\n\n\n睡眠、退出登录和关机快捷键\n在这些快捷键中，您可能需要按住其中一些快捷键稍长时间。这样可以避免您无意中启用快捷键。\n\n电源按钮：按下可将 Mac 开机或将 Mac 从睡眠状态唤醒。按住这个按钮 1.5 秒可使 Mac 进入睡眠状态。*继续按住则会强制您的 Mac 关机。\n\nOption–Command–电源按钮*或 Option–Command–Media Eject（Option–Command–介质推出键）：将您的 Mac 置于睡眠状态。\n\nControl–Shift–电源按钮*或 Control–Shift–Media Eject（Control–Shift–介质推出键）：将显示器置于睡眠状态。\n\nControl–电源按钮*或 Control–Media Eject（Control–介质推出键）：显示一个对话框，询问您是要重新启动、睡眠还是关机。\n\nControl–Command–Power 电源按钮：*强制 Mac 重新启动，系统不会提示是否要存储任何打开且未存储的文稿。\n\nControl–Command–Media Eject（Control–Command–介质推出键）：退出所有应用，然后重新启动您的 Mac。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。\n\nControl–Option-Command–电源按钮*或 Control–Option–Command–Media Eject（Control–Option–Command–介质推出键）：退出所有应用，然后将您的 Mac 关机。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。\n\nShift–Command–Q：退出登录您的 macOS 用户帐户。系统将提示您确认。要在不确认的情况下立即退出登录，请按下 Option-Shift-Command-Q。\n* 不适用于触控 ID 传感器。\n\n\n\n访达和系统快捷键\n\nCommand-D：复制所选文件。\n\nCommand-E：推出所选磁盘或宗卷。\n\nCommand-F：在“访达”窗口中开始“聚焦”搜索。\n\nCommand-I：显示所选文件的“显示简介”窗口。\n\nCommand-R：(1) 如果在“访达”中选择了某个别名：显示所选别名对应的原始文件。(2) 在某些应用（如“日历”或 Safari 浏览器）中，刷新或重新载入页面。(3) 在“软件更新”偏好设置中，再次检查有没有软件更新。\n\nShift-Command-C：打开“电脑”窗口。\n\nShift-Command-D：打开“桌面”文件夹。\n\nShift-Command-F：打开“最近使用”窗口，其中显示了您最近查看或更改过的所有文件。\n\nShift-Command-G：打开“前往文件夹”窗口。\n\nShift-Command-H：打开当前 macOS 用户帐户的个人文件夹。\n\nShift-Command-I：打开 iCloud 云盘。\n\nShift-Command-K：打开“网络”窗口。\n\nOption-Command-L：打开“下载”文件夹。\n\nShift-Command-N：新建文件夹。\n\nShift-Command-O：打开“文稿”文件夹。\n\nShift-Command-P：在“访达”窗口中显示或隐藏预览面板。\n\nShift-Command-R：打开“隔空投送”窗口。\n\nShift-Command-T：显示或隐藏“访达”窗口中的标签页栏。\n\nCtrl-Shift-Command-T：将所选的“访达”项目添加到“程序坞”（OS X Mavericks 或更高版本）\n\nShift-Command-U：打开“实用工具”文件夹。\n\nOption-Command-D：显示或隐藏“程序坞”。\n\nControl-Command-T：将所选项添加到边栏（OS X Mavericks 或更高版本）。\n\nOption-Command-P：隐藏或显示“访达”窗口中的路径栏。\n\nOption-Command-S：隐藏或显示“访达”窗口中的边栏。\n\nCommand–斜线 (/)：隐藏或显示“访达”窗口中的状态栏。\n\nCommand-J：显示“显示”选项。\n\nCommand-K：打开“连接服务器”窗口。\n\nCommand-L：为所选项制作替身。\n\nCommand-N：打开一个新的“访达”窗口。\n\nOption-Command-N：新建智能文件夹。\n\nCommand-T：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏标签页栏。\n\nOption-Command-T：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏工具栏。\n\nOption-Command-V：移动：将剪贴板中的文件从原始位置移动到当前位置。\n\nCommand-Y：使用“快速查看”预览所选文件。\n\nOption-Command-Y：显示所选文件的快速查看幻灯片显示。\n\nCommand-1：以图标方式显示“访达”窗口中的项目。\n\nCommand-2：以列表方式显示“访达”窗口中的项目。\n\nCommand-3：以分栏方式显示“访达”窗口中的项目。\n\nCommand-4：以封面流方式显示“访达”窗口中的项目。\n\nCommand–左中括号 ([)：前往上一文件夹。\n\nCommand–右中括号 (])：前往下一个文件夹。\n\nCommand–上箭头：打开包含当前文件夹的文件夹。\n\nCommand–Control–上箭头：在新窗口中打开包含当前文件夹的文件夹。\n\nCommand–下箭头：打开所选项。\n\n右箭头：打开所选文件夹。这个快捷键仅在列表视图中有效。\n左箭头：关闭所选文件夹。这个快捷键仅在列表视图中有效。\nCommand-Delete：将所选项移到废纸篓。\n\nShift-Command-Delete：清倒废纸篓。\n\nOption-Shift-Command-Delete：清倒废纸篓而不显示确认对话框。\n\nCommand–调高亮度：打开或关闭目标显示器模式。\n\nCommand–调低亮度：当您的 Mac 连接到多台显示器时，打开或关闭视频镜像。\n\nOption–调高亮度：打开“显示器”偏好设置。这个快捷键可与任一亮度键搭配使用。\n\nControl–调高亮度或 Control–调低亮度：更改外部显示器的亮度（如果显示器支持）。\n\nOption-Shift–调高亮度或 Option-Shift–调低亮度：以较小的步幅调节显示器亮度。如果您的显示器支持，可以将 Control 键添加到此快捷键，以便在外置显示器上进行调节。\n\nOption–“调度中心”：打开“调度中心”偏好设置。\n\nCommand–“调度中心”：显示桌面。\n\nControl–下箭头：显示最前面的应用的所有窗口。\n\nOption–调高音量：打开“声音”偏好设置。这个快捷键可与任一音量键搭配使用。\n\nOption-Shift–调高音量或 Option-Shift–调低音量：以较小的步幅调节音量。\n\nOption–键盘调高亮度：打开“键盘”偏好设置。这个快捷键可与任一键盘亮度键搭配使用。\n\nOption-Shift–键盘调高亮度或 Option-Shift–键盘调低亮度：以较小的步幅调节键盘亮度。\n\n连按 Option 键：在单独的窗口中打开项目，然后关闭原始窗口。\n\n连按 Command 键：在单独的标签页或窗口中打开文件夹。\n\n按住 Command 键拖移到另一个宗卷：将拖移的项目移到另一个宗卷，而不是拷贝它。\n\n按住 Option 键拖移：拷贝托移的项目。拖移项目时指针会随之变化。\n\n按住 Option-Command 键拖移：为拖移的项目制作替身。拖移项目时指针会随之变化。\n\n按住 Option 键点按开合三角：打开所选文件夹内的所有文件夹。此快捷键仅在列表视图中有效。\n\n按住 Command 键点按窗口标题：查看包含当前文件夹的文件夹。\n\n了解如何使用 Command 或 Shift 在“访达”中选择多个项目。\n\n点按“访达”菜单栏中的“前往”菜单查看用于打开许多常用文件夹（如“应用程序”、“文稿”、“下载”、“实用工具”和“iCloud 云盘”）的快捷键。\n\n\n文稿快捷键\n这些快捷键的行为可能因您使用的应用而异。\n\nCommand-B：以粗体显示所选文本，或者打开或关闭粗体显示功能。\n\nCommand-I：以斜体显示所选文本，或者打开或关闭斜体显示功能。\n\nCommand-K：添加网页链接。\n\nCommand-U：对所选文本加下划线，或者打开或关闭加下划线功能。\n\nCommand-T：显示或隐藏“字体”窗口。\n\nCommand-D：从“打开”对话框或“存储”对话框内选择“桌面”文件夹。\n\nControl-Command-D：显示或隐藏所选字词的定义。\n\nShift-Command–冒号 (:)：显示“拼写和语法”窗口。\n\nCommand–分号 (;)：查找文稿中拼写错误的字词。\n\nOption-Delete：删除插入点左边的字词。\n\nControl-H：删除插入点左边的字符。也可以使用 Delete 键。\n\nControl-D：删除插入点右边的字符。也可以使用 Fn-Delete。\n\nFn-Delete：在没有向前删除   键的键盘上向前删除。也可以使用 Control-D。\n\nControl-K：删除插入点与行或段落末尾处之间的文本。\n\nFn–上箭头：Page Up：向上滚动一页。\n\nFn–下箭头：Page Down：向下滚动一页。\n\nFn–左箭头：Home：滚动到文稿开头。\n\nFn–右箭头：End：滚动到文稿末尾。\n\nCommand–上箭头：将插入点移至文稿开头。\n\nCommand–下箭头：将插入点移至文稿末尾。\n\nCommand–左箭头：将插入点移至当前行的行首。\n\nCommand–右箭头：将插入点移至当前行的行尾。\n\nOption–左箭头：将插入点移至上一字词的词首。\n\nOption–右箭头：将插入点移至下一字词的词尾。\n\nShift-Command–上箭头：选中插入点与文稿开头之间的文本。\n\nShift-Command–下箭头：选中插入点与文稿末尾之间的文本。\n\nShift-Command–左箭头：选中插入点与当前行行首之间的文本。\n\nShift-Command–右箭头：选中插入点与当前行行尾之间的文本。\n\nShift–上箭头：将文本选择范围扩展到上一行相同水平位置的最近字符处。\n\nShift–下箭头：将文本选择范围扩展到下一行相同水平位置的最近字符处。\n\nShift–左箭头：将文本选择范围向左扩展一个字符。\n\nShift–右箭头：将文本选择范围向右扩展一个字符。\n\nOption–Shift–上箭头：将文本选择范围扩展到当前段落的段首，再按一次则扩展到下一段落的段首。\n\nOption–Shift–下箭头：将文本选择范围扩展到当前段落的段尾，再按一次则扩展到下一段落的段尾。\n\nOption–Shift–左箭头：将文本选择范围扩展到当前字词的词首，再按一次则扩展到后一字词的词首。\n\nOption–Shift–左箭头：将文本选择范围扩展到当前字词的词尾，再按一次则扩展到后一字词的词尾。\n\nControl–A：移至行或段落的开头。\n\nControl–E：移至行或段落的末尾。\n\nControl–F：向前移动一个字符。\n\nControl–B：向后移动一个字符。\n\nControl–L：将光标或所选内容置于可见区域中央。\n\nControl–P：上移一行。\n\nControl–N：下移一行。\n\nControl–O：在插入点后新插入一行。\n\nControl–T：将插入点后面的字符与插入点前面的字符交换。\n\nCommand–左花括号 ({)：左对齐。\n\nCommand–右花括号 (})：右对齐。\n\nShift-Command–竖线 (|)：居中对齐。\n\nOption-Command-F：前往搜索栏。\n\nOption-Command-T：显示或隐藏应用中的工具栏。\n\nOption-Command-C：拷贝样式：将所选项的格式设置拷贝到剪贴板。\n\nOption-Command-V：粘贴样式：将拷贝的样式应用到所选项。\n\nOption-Shift-Command-V：粘贴并匹配样式：将周围内容的样式应用到粘贴在该内容中的项目。\n\nOption-Command-I：显示或隐藏检查器窗口。\n\nShift-Command-P：页面设置：显示用于选择文稿设置的窗口。\n\nShift-Command-S：显示“存储为”对话框或复制当前文稿。\n\nShift-Command-减号 (-)：缩小所选项。\n\nShift-Command-加号 (+)：放大所选项。Command–等号 (=) 可实现相同的功能。\n\nShift-Command–问号 (?)：打开“帮助”菜单。\n\n\n 参考：https://support.apple.com/zh-cn/HT201236","slug":"mac-key","published":1,"updated":"2019-04-21T02:13:29.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxlu2kh2001ugkxrsitkmh7h","content":"<p>##Mac 键盘快捷键<br>您可以按下某些组合键来实现通常需要鼠标、触控板或其他输入设备才能完成的操作。</p>\n<p>要使用键盘快捷键，请按住一个或多个修饰键，然后按快捷键的最后一个键。例如，要使用 Command-C（拷贝），请按住 Command 键并按 C 键，然后同时松开这两个键。Mac 菜单和键盘通常对某些按键使用符号，其中包括以下修饰键：</p>\n<p>Command（或 Cmd）⌘<br>Shift ⇧<br>Option（或 Alt）⌥<br>Control（或 Ctrl）⌃<br>Caps Lock ⇪<br>Fn</p>\n<p>在 Windows PC 专用键盘上，请用 Alt 键代替 Option 键，用 Windows 标志键代替 Command 键。</p>\n<p>Apple 键盘上的某些按键具有特殊符号和功能，例如显示屏亮度 、键盘亮度 、调度中心等。如果您的键盘上没有这些功能，您也许可以通过创建自己的键盘快捷键来实现其中的一些功能。要将这些键用作 F1、F2、F3 或其他标准功能键，请将它们与 Fn 键组合使用。</p>\n<p>剪切、拷贝、粘贴和其他常用快捷键</p>\n<p>Command-X：剪切所选项并拷贝到剪贴板。</p>\n<p>Command-C：将所选项拷贝到剪贴板。这同样适用于“访达”中的文件。</p>\n<p>Command-V：将剪贴板的内容粘贴到当前文稿或应用中。这同样适用于“访达”中的文件。</p>\n<p>Command-Z：撤销上一个命令。随后您可以按 Shift-Command-Z 来重做，从而反向执行撤销命令。在某些应用中，您可以撤销和重做多个命令。</p>\n<p>Command-A：全选各项。</p>\n<p>Command-F：查找文稿中的项目或打开“查找”窗口。</p>\n<p>Command-G：再次查找：查找之前所找到项目出现的下一个位置。要查找出现的上一个位置，请按 Shift-Command-G。</p>\n<p>Command-H：隐藏最前面的应用的窗口。要查看最前面的应用但隐藏所有其他应用，请按 Option-Command-H。</p>\n<p>Command-M：将最前面的窗口最小化至“程序坞”。要最小化最前面的应用的所有窗口，请按 Option-Command-M。</p>\n<p>Command-O：打开所选项，或打开一个对话框以选择要打开的文件。</p>\n<p>Command-P：打印当前文稿。</p>\n<p>Command-S：存储当前文稿。</p>\n<p>Command-T：打开新标签页。</p>\n<p>Command-W：关闭最前面的窗口。要关闭应用的所有窗口，请按下 Option-Command-W。</p>\n<p>Option-Command-Esc：强制退出应用。</p>\n<p>Command–空格键：显示或隐藏“聚焦”搜索栏。要从“访达”窗口执行“聚焦”搜索，请按 Command–Option–空格键。（如果您使用多个输入源以便用不同的语言键入内容，这些快捷键会更改输入源而非显示“聚焦”。了解如何更改冲突的键盘快捷键。）</p>\n<p>Control-Command–空格键：显示字符检视器，您可以从中选择表情符号和其他符号。</p>\n<p>Control-Command-F：全屏使用应用（如果应用支持）。</p>\n<p>空格键：使用快速查看来预览所选项。</p>\n<p>Command-Tab：在打开的应用中切换到下一个最近使用的应用。</p>\n<p>Shift-Command-5：在 macOS Mojave 中，拍摄屏幕快照或录制屏幕。在更早的 macOS 版本中，请使用 Shift-Command-3 或 Shift-Command-4 来拍摄屏幕快照。进一步了解屏幕快照。</p>\n<p>Shift-Command-N：在“访达”中创建一个新文件夹。</p>\n<p>Command-逗号 (,)：打开最前面的应用的偏好设置。</p>\n<p>睡眠、退出登录和关机快捷键<br>在这些快捷键中，您可能需要按住其中一些快捷键稍长时间。这样可以避免您无意中启用快捷键。</p>\n<p>电源按钮：按下可将 Mac 开机或将 Mac 从睡眠状态唤醒。按住这个按钮 1.5 秒可使 Mac 进入睡眠状态。*继续按住则会强制您的 Mac 关机。</p>\n<p>Option–Command–电源按钮*或 Option–Command–Media Eject（Option–Command–介质推出键）：将您的 Mac 置于睡眠状态。</p>\n<p>Control–Shift–电源按钮*或 Control–Shift–Media Eject（Control–Shift–介质推出键）：将显示器置于睡眠状态。</p>\n<p>Control–电源按钮*或 Control–Media Eject（Control–介质推出键）：显示一个对话框，询问您是要重新启动、睡眠还是关机。</p>\n<p>Control–Command–Power 电源按钮：*强制 Mac 重新启动，系统不会提示是否要存储任何打开且未存储的文稿。</p>\n<p>Control–Command–Media Eject（Control–Command–介质推出键）：退出所有应用，然后重新启动您的 Mac。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。</p>\n<p>Control–Option-Command–电源按钮*或 Control–Option–Command–Media Eject（Control–Option–Command–介质推出键）：退出所有应用，然后将您的 Mac 关机。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。</p>\n<p>Shift–Command–Q：退出登录您的 macOS 用户帐户。系统将提示您确认。要在不确认的情况下立即退出登录，请按下 Option-Shift-Command-Q。</p>\n<ul>\n<li>不适用于触控 ID 传感器。</li>\n</ul>\n<p>访达和系统快捷键</p>\n<p>Command-D：复制所选文件。</p>\n<p>Command-E：推出所选磁盘或宗卷。</p>\n<p>Command-F：在“访达”窗口中开始“聚焦”搜索。</p>\n<p>Command-I：显示所选文件的“显示简介”窗口。</p>\n<p>Command-R：(1) 如果在“访达”中选择了某个别名：显示所选别名对应的原始文件。(2) 在某些应用（如“日历”或 Safari 浏览器）中，刷新或重新载入页面。(3) 在“软件更新”偏好设置中，再次检查有没有软件更新。</p>\n<p>Shift-Command-C：打开“电脑”窗口。</p>\n<p>Shift-Command-D：打开“桌面”文件夹。</p>\n<p>Shift-Command-F：打开“最近使用”窗口，其中显示了您最近查看或更改过的所有文件。</p>\n<p>Shift-Command-G：打开“前往文件夹”窗口。</p>\n<p>Shift-Command-H：打开当前 macOS 用户帐户的个人文件夹。</p>\n<p>Shift-Command-I：打开 iCloud 云盘。</p>\n<p>Shift-Command-K：打开“网络”窗口。</p>\n<p>Option-Command-L：打开“下载”文件夹。</p>\n<p>Shift-Command-N：新建文件夹。</p>\n<p>Shift-Command-O：打开“文稿”文件夹。</p>\n<p>Shift-Command-P：在“访达”窗口中显示或隐藏预览面板。</p>\n<p>Shift-Command-R：打开“隔空投送”窗口。</p>\n<p>Shift-Command-T：显示或隐藏“访达”窗口中的标签页栏。</p>\n<p>Ctrl-Shift-Command-T：将所选的“访达”项目添加到“程序坞”（OS X Mavericks 或更高版本）</p>\n<p>Shift-Command-U：打开“实用工具”文件夹。</p>\n<p>Option-Command-D：显示或隐藏“程序坞”。</p>\n<p>Control-Command-T：将所选项添加到边栏（OS X Mavericks 或更高版本）。</p>\n<p>Option-Command-P：隐藏或显示“访达”窗口中的路径栏。</p>\n<p>Option-Command-S：隐藏或显示“访达”窗口中的边栏。</p>\n<p>Command–斜线 (/)：隐藏或显示“访达”窗口中的状态栏。</p>\n<p>Command-J：显示“显示”选项。</p>\n<p>Command-K：打开“连接服务器”窗口。</p>\n<p>Command-L：为所选项制作替身。</p>\n<p>Command-N：打开一个新的“访达”窗口。</p>\n<p>Option-Command-N：新建智能文件夹。</p>\n<p>Command-T：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏标签页栏。</p>\n<p>Option-Command-T：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏工具栏。</p>\n<p>Option-Command-V：移动：将剪贴板中的文件从原始位置移动到当前位置。</p>\n<p>Command-Y：使用“快速查看”预览所选文件。</p>\n<p>Option-Command-Y：显示所选文件的快速查看幻灯片显示。</p>\n<p>Command-1：以图标方式显示“访达”窗口中的项目。</p>\n<p>Command-2：以列表方式显示“访达”窗口中的项目。</p>\n<p>Command-3：以分栏方式显示“访达”窗口中的项目。</p>\n<p>Command-4：以封面流方式显示“访达”窗口中的项目。</p>\n<p>Command–左中括号 ([)：前往上一文件夹。</p>\n<p>Command–右中括号 (])：前往下一个文件夹。</p>\n<p>Command–上箭头：打开包含当前文件夹的文件夹。</p>\n<p>Command–Control–上箭头：在新窗口中打开包含当前文件夹的文件夹。</p>\n<p>Command–下箭头：打开所选项。</p>\n<p>右箭头：打开所选文件夹。这个快捷键仅在列表视图中有效。<br>左箭头：关闭所选文件夹。这个快捷键仅在列表视图中有效。<br>Command-Delete：将所选项移到废纸篓。</p>\n<p>Shift-Command-Delete：清倒废纸篓。</p>\n<p>Option-Shift-Command-Delete：清倒废纸篓而不显示确认对话框。</p>\n<p>Command–调高亮度：打开或关闭目标显示器模式。</p>\n<p>Command–调低亮度：当您的 Mac 连接到多台显示器时，打开或关闭视频镜像。</p>\n<p>Option–调高亮度：打开“显示器”偏好设置。这个快捷键可与任一亮度键搭配使用。</p>\n<p>Control–调高亮度或 Control–调低亮度：更改外部显示器的亮度（如果显示器支持）。</p>\n<p>Option-Shift–调高亮度或 Option-Shift–调低亮度：以较小的步幅调节显示器亮度。如果您的显示器支持，可以将 Control 键添加到此快捷键，以便在外置显示器上进行调节。</p>\n<p>Option–“调度中心”：打开“调度中心”偏好设置。</p>\n<p>Command–“调度中心”：显示桌面。</p>\n<p>Control–下箭头：显示最前面的应用的所有窗口。</p>\n<p>Option–调高音量：打开“声音”偏好设置。这个快捷键可与任一音量键搭配使用。</p>\n<p>Option-Shift–调高音量或 Option-Shift–调低音量：以较小的步幅调节音量。</p>\n<p>Option–键盘调高亮度：打开“键盘”偏好设置。这个快捷键可与任一键盘亮度键搭配使用。</p>\n<p>Option-Shift–键盘调高亮度或 Option-Shift–键盘调低亮度：以较小的步幅调节键盘亮度。</p>\n<p>连按 Option 键：在单独的窗口中打开项目，然后关闭原始窗口。</p>\n<p>连按 Command 键：在单独的标签页或窗口中打开文件夹。</p>\n<p>按住 Command 键拖移到另一个宗卷：将拖移的项目移到另一个宗卷，而不是拷贝它。</p>\n<p>按住 Option 键拖移：拷贝托移的项目。拖移项目时指针会随之变化。</p>\n<p>按住 Option-Command 键拖移：为拖移的项目制作替身。拖移项目时指针会随之变化。</p>\n<p>按住 Option 键点按开合三角：打开所选文件夹内的所有文件夹。此快捷键仅在列表视图中有效。</p>\n<p>按住 Command 键点按窗口标题：查看包含当前文件夹的文件夹。</p>\n<p>了解如何使用 Command 或 Shift 在“访达”中选择多个项目。</p>\n<p>点按“访达”菜单栏中的“前往”菜单查看用于打开许多常用文件夹（如“应用程序”、“文稿”、“下载”、“实用工具”和“iCloud 云盘”）的快捷键。</p>\n<p>文稿快捷键<br>这些快捷键的行为可能因您使用的应用而异。</p>\n<p>Command-B：以粗体显示所选文本，或者打开或关闭粗体显示功能。</p>\n<p>Command-I：以斜体显示所选文本，或者打开或关闭斜体显示功能。</p>\n<p>Command-K：添加网页链接。</p>\n<p>Command-U：对所选文本加下划线，或者打开或关闭加下划线功能。</p>\n<p>Command-T：显示或隐藏“字体”窗口。</p>\n<p>Command-D：从“打开”对话框或“存储”对话框内选择“桌面”文件夹。</p>\n<p>Control-Command-D：显示或隐藏所选字词的定义。</p>\n<p>Shift-Command–冒号 (:)：显示“拼写和语法”窗口。</p>\n<p>Command–分号 (;)：查找文稿中拼写错误的字词。</p>\n<p>Option-Delete：删除插入点左边的字词。</p>\n<p>Control-H：删除插入点左边的字符。也可以使用 Delete 键。</p>\n<p>Control-D：删除插入点右边的字符。也可以使用 Fn-Delete。</p>\n<p>Fn-Delete：在没有向前删除   键的键盘上向前删除。也可以使用 Control-D。</p>\n<p>Control-K：删除插入点与行或段落末尾处之间的文本。</p>\n<p>Fn–上箭头：Page Up：向上滚动一页。</p>\n<p>Fn–下箭头：Page Down：向下滚动一页。</p>\n<p>Fn–左箭头：Home：滚动到文稿开头。</p>\n<p>Fn–右箭头：End：滚动到文稿末尾。</p>\n<p>Command–上箭头：将插入点移至文稿开头。</p>\n<p>Command–下箭头：将插入点移至文稿末尾。</p>\n<p>Command–左箭头：将插入点移至当前行的行首。</p>\n<p>Command–右箭头：将插入点移至当前行的行尾。</p>\n<p>Option–左箭头：将插入点移至上一字词的词首。</p>\n<p>Option–右箭头：将插入点移至下一字词的词尾。</p>\n<p>Shift-Command–上箭头：选中插入点与文稿开头之间的文本。</p>\n<p>Shift-Command–下箭头：选中插入点与文稿末尾之间的文本。</p>\n<p>Shift-Command–左箭头：选中插入点与当前行行首之间的文本。</p>\n<p>Shift-Command–右箭头：选中插入点与当前行行尾之间的文本。</p>\n<p>Shift–上箭头：将文本选择范围扩展到上一行相同水平位置的最近字符处。</p>\n<p>Shift–下箭头：将文本选择范围扩展到下一行相同水平位置的最近字符处。</p>\n<p>Shift–左箭头：将文本选择范围向左扩展一个字符。</p>\n<p>Shift–右箭头：将文本选择范围向右扩展一个字符。</p>\n<p>Option–Shift–上箭头：将文本选择范围扩展到当前段落的段首，再按一次则扩展到下一段落的段首。</p>\n<p>Option–Shift–下箭头：将文本选择范围扩展到当前段落的段尾，再按一次则扩展到下一段落的段尾。</p>\n<p>Option–Shift–左箭头：将文本选择范围扩展到当前字词的词首，再按一次则扩展到后一字词的词首。</p>\n<p>Option–Shift–左箭头：将文本选择范围扩展到当前字词的词尾，再按一次则扩展到后一字词的词尾。</p>\n<p>Control–A：移至行或段落的开头。</p>\n<p>Control–E：移至行或段落的末尾。</p>\n<p>Control–F：向前移动一个字符。</p>\n<p>Control–B：向后移动一个字符。</p>\n<p>Control–L：将光标或所选内容置于可见区域中央。</p>\n<p>Control–P：上移一行。</p>\n<p>Control–N：下移一行。</p>\n<p>Control–O：在插入点后新插入一行。</p>\n<p>Control–T：将插入点后面的字符与插入点前面的字符交换。</p>\n<p>Command–左花括号 ({)：左对齐。</p>\n<p>Command–右花括号 (})：右对齐。</p>\n<p>Shift-Command–竖线 (|)：居中对齐。</p>\n<p>Option-Command-F：前往搜索栏。</p>\n<p>Option-Command-T：显示或隐藏应用中的工具栏。</p>\n<p>Option-Command-C：拷贝样式：将所选项的格式设置拷贝到剪贴板。</p>\n<p>Option-Command-V：粘贴样式：将拷贝的样式应用到所选项。</p>\n<p>Option-Shift-Command-V：粘贴并匹配样式：将周围内容的样式应用到粘贴在该内容中的项目。</p>\n<p>Option-Command-I：显示或隐藏检查器窗口。</p>\n<p>Shift-Command-P：页面设置：显示用于选择文稿设置的窗口。</p>\n<p>Shift-Command-S：显示“存储为”对话框或复制当前文稿。</p>\n<p>Shift-Command-减号 (-)：缩小所选项。</p>\n<p>Shift-Command-加号 (+)：放大所选项。Command–等号 (=) 可实现相同的功能。</p>\n<p>Shift-Command–问号 (?)：打开“帮助”菜单。</p>\n<p> 参考：<a href=\"https://support.apple.com/zh-cn/HT201236\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201236</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>##Mac 键盘快捷键<br>您可以按下某些组合键来实现通常需要鼠标、触控板或其他输入设备才能完成的操作。</p>\n<p>要使用键盘快捷键，请按住一个或多个修饰键，然后按快捷键的最后一个键。例如，要使用 Command-C（拷贝），请按住 Command 键并按 C 键，然后同时松开这两个键。Mac 菜单和键盘通常对某些按键使用符号，其中包括以下修饰键：</p>\n<p>Command（或 Cmd）⌘<br>Shift ⇧<br>Option（或 Alt）⌥<br>Control（或 Ctrl）⌃<br>Caps Lock ⇪<br>Fn</p>\n<p>在 Windows PC 专用键盘上，请用 Alt 键代替 Option 键，用 Windows 标志键代替 Command 键。</p>\n<p>Apple 键盘上的某些按键具有特殊符号和功能，例如显示屏亮度 、键盘亮度 、调度中心等。如果您的键盘上没有这些功能，您也许可以通过创建自己的键盘快捷键来实现其中的一些功能。要将这些键用作 F1、F2、F3 或其他标准功能键，请将它们与 Fn 键组合使用。</p>\n<p>剪切、拷贝、粘贴和其他常用快捷键</p>\n<p>Command-X：剪切所选项并拷贝到剪贴板。</p>\n<p>Command-C：将所选项拷贝到剪贴板。这同样适用于“访达”中的文件。</p>\n<p>Command-V：将剪贴板的内容粘贴到当前文稿或应用中。这同样适用于“访达”中的文件。</p>\n<p>Command-Z：撤销上一个命令。随后您可以按 Shift-Command-Z 来重做，从而反向执行撤销命令。在某些应用中，您可以撤销和重做多个命令。</p>\n<p>Command-A：全选各项。</p>\n<p>Command-F：查找文稿中的项目或打开“查找”窗口。</p>\n<p>Command-G：再次查找：查找之前所找到项目出现的下一个位置。要查找出现的上一个位置，请按 Shift-Command-G。</p>\n<p>Command-H：隐藏最前面的应用的窗口。要查看最前面的应用但隐藏所有其他应用，请按 Option-Command-H。</p>\n<p>Command-M：将最前面的窗口最小化至“程序坞”。要最小化最前面的应用的所有窗口，请按 Option-Command-M。</p>\n<p>Command-O：打开所选项，或打开一个对话框以选择要打开的文件。</p>\n<p>Command-P：打印当前文稿。</p>\n<p>Command-S：存储当前文稿。</p>\n<p>Command-T：打开新标签页。</p>\n<p>Command-W：关闭最前面的窗口。要关闭应用的所有窗口，请按下 Option-Command-W。</p>\n<p>Option-Command-Esc：强制退出应用。</p>\n<p>Command–空格键：显示或隐藏“聚焦”搜索栏。要从“访达”窗口执行“聚焦”搜索，请按 Command–Option–空格键。（如果您使用多个输入源以便用不同的语言键入内容，这些快捷键会更改输入源而非显示“聚焦”。了解如何更改冲突的键盘快捷键。）</p>\n<p>Control-Command–空格键：显示字符检视器，您可以从中选择表情符号和其他符号。</p>\n<p>Control-Command-F：全屏使用应用（如果应用支持）。</p>\n<p>空格键：使用快速查看来预览所选项。</p>\n<p>Command-Tab：在打开的应用中切换到下一个最近使用的应用。</p>\n<p>Shift-Command-5：在 macOS Mojave 中，拍摄屏幕快照或录制屏幕。在更早的 macOS 版本中，请使用 Shift-Command-3 或 Shift-Command-4 来拍摄屏幕快照。进一步了解屏幕快照。</p>\n<p>Shift-Command-N：在“访达”中创建一个新文件夹。</p>\n<p>Command-逗号 (,)：打开最前面的应用的偏好设置。</p>\n<p>睡眠、退出登录和关机快捷键<br>在这些快捷键中，您可能需要按住其中一些快捷键稍长时间。这样可以避免您无意中启用快捷键。</p>\n<p>电源按钮：按下可将 Mac 开机或将 Mac 从睡眠状态唤醒。按住这个按钮 1.5 秒可使 Mac 进入睡眠状态。*继续按住则会强制您的 Mac 关机。</p>\n<p>Option–Command–电源按钮*或 Option–Command–Media Eject（Option–Command–介质推出键）：将您的 Mac 置于睡眠状态。</p>\n<p>Control–Shift–电源按钮*或 Control–Shift–Media Eject（Control–Shift–介质推出键）：将显示器置于睡眠状态。</p>\n<p>Control–电源按钮*或 Control–Media Eject（Control–介质推出键）：显示一个对话框，询问您是要重新启动、睡眠还是关机。</p>\n<p>Control–Command–Power 电源按钮：*强制 Mac 重新启动，系统不会提示是否要存储任何打开且未存储的文稿。</p>\n<p>Control–Command–Media Eject（Control–Command–介质推出键）：退出所有应用，然后重新启动您的 Mac。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。</p>\n<p>Control–Option-Command–电源按钮*或 Control–Option–Command–Media Eject（Control–Option–Command–介质推出键）：退出所有应用，然后将您的 Mac 关机。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。</p>\n<p>Shift–Command–Q：退出登录您的 macOS 用户帐户。系统将提示您确认。要在不确认的情况下立即退出登录，请按下 Option-Shift-Command-Q。</p>\n<ul>\n<li>不适用于触控 ID 传感器。</li>\n</ul>\n<p>访达和系统快捷键</p>\n<p>Command-D：复制所选文件。</p>\n<p>Command-E：推出所选磁盘或宗卷。</p>\n<p>Command-F：在“访达”窗口中开始“聚焦”搜索。</p>\n<p>Command-I：显示所选文件的“显示简介”窗口。</p>\n<p>Command-R：(1) 如果在“访达”中选择了某个别名：显示所选别名对应的原始文件。(2) 在某些应用（如“日历”或 Safari 浏览器）中，刷新或重新载入页面。(3) 在“软件更新”偏好设置中，再次检查有没有软件更新。</p>\n<p>Shift-Command-C：打开“电脑”窗口。</p>\n<p>Shift-Command-D：打开“桌面”文件夹。</p>\n<p>Shift-Command-F：打开“最近使用”窗口，其中显示了您最近查看或更改过的所有文件。</p>\n<p>Shift-Command-G：打开“前往文件夹”窗口。</p>\n<p>Shift-Command-H：打开当前 macOS 用户帐户的个人文件夹。</p>\n<p>Shift-Command-I：打开 iCloud 云盘。</p>\n<p>Shift-Command-K：打开“网络”窗口。</p>\n<p>Option-Command-L：打开“下载”文件夹。</p>\n<p>Shift-Command-N：新建文件夹。</p>\n<p>Shift-Command-O：打开“文稿”文件夹。</p>\n<p>Shift-Command-P：在“访达”窗口中显示或隐藏预览面板。</p>\n<p>Shift-Command-R：打开“隔空投送”窗口。</p>\n<p>Shift-Command-T：显示或隐藏“访达”窗口中的标签页栏。</p>\n<p>Ctrl-Shift-Command-T：将所选的“访达”项目添加到“程序坞”（OS X Mavericks 或更高版本）</p>\n<p>Shift-Command-U：打开“实用工具”文件夹。</p>\n<p>Option-Command-D：显示或隐藏“程序坞”。</p>\n<p>Control-Command-T：将所选项添加到边栏（OS X Mavericks 或更高版本）。</p>\n<p>Option-Command-P：隐藏或显示“访达”窗口中的路径栏。</p>\n<p>Option-Command-S：隐藏或显示“访达”窗口中的边栏。</p>\n<p>Command–斜线 (/)：隐藏或显示“访达”窗口中的状态栏。</p>\n<p>Command-J：显示“显示”选项。</p>\n<p>Command-K：打开“连接服务器”窗口。</p>\n<p>Command-L：为所选项制作替身。</p>\n<p>Command-N：打开一个新的“访达”窗口。</p>\n<p>Option-Command-N：新建智能文件夹。</p>\n<p>Command-T：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏标签页栏。</p>\n<p>Option-Command-T：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏工具栏。</p>\n<p>Option-Command-V：移动：将剪贴板中的文件从原始位置移动到当前位置。</p>\n<p>Command-Y：使用“快速查看”预览所选文件。</p>\n<p>Option-Command-Y：显示所选文件的快速查看幻灯片显示。</p>\n<p>Command-1：以图标方式显示“访达”窗口中的项目。</p>\n<p>Command-2：以列表方式显示“访达”窗口中的项目。</p>\n<p>Command-3：以分栏方式显示“访达”窗口中的项目。</p>\n<p>Command-4：以封面流方式显示“访达”窗口中的项目。</p>\n<p>Command–左中括号 ([)：前往上一文件夹。</p>\n<p>Command–右中括号 (])：前往下一个文件夹。</p>\n<p>Command–上箭头：打开包含当前文件夹的文件夹。</p>\n<p>Command–Control–上箭头：在新窗口中打开包含当前文件夹的文件夹。</p>\n<p>Command–下箭头：打开所选项。</p>\n<p>右箭头：打开所选文件夹。这个快捷键仅在列表视图中有效。<br>左箭头：关闭所选文件夹。这个快捷键仅在列表视图中有效。<br>Command-Delete：将所选项移到废纸篓。</p>\n<p>Shift-Command-Delete：清倒废纸篓。</p>\n<p>Option-Shift-Command-Delete：清倒废纸篓而不显示确认对话框。</p>\n<p>Command–调高亮度：打开或关闭目标显示器模式。</p>\n<p>Command–调低亮度：当您的 Mac 连接到多台显示器时，打开或关闭视频镜像。</p>\n<p>Option–调高亮度：打开“显示器”偏好设置。这个快捷键可与任一亮度键搭配使用。</p>\n<p>Control–调高亮度或 Control–调低亮度：更改外部显示器的亮度（如果显示器支持）。</p>\n<p>Option-Shift–调高亮度或 Option-Shift–调低亮度：以较小的步幅调节显示器亮度。如果您的显示器支持，可以将 Control 键添加到此快捷键，以便在外置显示器上进行调节。</p>\n<p>Option–“调度中心”：打开“调度中心”偏好设置。</p>\n<p>Command–“调度中心”：显示桌面。</p>\n<p>Control–下箭头：显示最前面的应用的所有窗口。</p>\n<p>Option–调高音量：打开“声音”偏好设置。这个快捷键可与任一音量键搭配使用。</p>\n<p>Option-Shift–调高音量或 Option-Shift–调低音量：以较小的步幅调节音量。</p>\n<p>Option–键盘调高亮度：打开“键盘”偏好设置。这个快捷键可与任一键盘亮度键搭配使用。</p>\n<p>Option-Shift–键盘调高亮度或 Option-Shift–键盘调低亮度：以较小的步幅调节键盘亮度。</p>\n<p>连按 Option 键：在单独的窗口中打开项目，然后关闭原始窗口。</p>\n<p>连按 Command 键：在单独的标签页或窗口中打开文件夹。</p>\n<p>按住 Command 键拖移到另一个宗卷：将拖移的项目移到另一个宗卷，而不是拷贝它。</p>\n<p>按住 Option 键拖移：拷贝托移的项目。拖移项目时指针会随之变化。</p>\n<p>按住 Option-Command 键拖移：为拖移的项目制作替身。拖移项目时指针会随之变化。</p>\n<p>按住 Option 键点按开合三角：打开所选文件夹内的所有文件夹。此快捷键仅在列表视图中有效。</p>\n<p>按住 Command 键点按窗口标题：查看包含当前文件夹的文件夹。</p>\n<p>了解如何使用 Command 或 Shift 在“访达”中选择多个项目。</p>\n<p>点按“访达”菜单栏中的“前往”菜单查看用于打开许多常用文件夹（如“应用程序”、“文稿”、“下载”、“实用工具”和“iCloud 云盘”）的快捷键。</p>\n<p>文稿快捷键<br>这些快捷键的行为可能因您使用的应用而异。</p>\n<p>Command-B：以粗体显示所选文本，或者打开或关闭粗体显示功能。</p>\n<p>Command-I：以斜体显示所选文本，或者打开或关闭斜体显示功能。</p>\n<p>Command-K：添加网页链接。</p>\n<p>Command-U：对所选文本加下划线，或者打开或关闭加下划线功能。</p>\n<p>Command-T：显示或隐藏“字体”窗口。</p>\n<p>Command-D：从“打开”对话框或“存储”对话框内选择“桌面”文件夹。</p>\n<p>Control-Command-D：显示或隐藏所选字词的定义。</p>\n<p>Shift-Command–冒号 (:)：显示“拼写和语法”窗口。</p>\n<p>Command–分号 (;)：查找文稿中拼写错误的字词。</p>\n<p>Option-Delete：删除插入点左边的字词。</p>\n<p>Control-H：删除插入点左边的字符。也可以使用 Delete 键。</p>\n<p>Control-D：删除插入点右边的字符。也可以使用 Fn-Delete。</p>\n<p>Fn-Delete：在没有向前删除   键的键盘上向前删除。也可以使用 Control-D。</p>\n<p>Control-K：删除插入点与行或段落末尾处之间的文本。</p>\n<p>Fn–上箭头：Page Up：向上滚动一页。</p>\n<p>Fn–下箭头：Page Down：向下滚动一页。</p>\n<p>Fn–左箭头：Home：滚动到文稿开头。</p>\n<p>Fn–右箭头：End：滚动到文稿末尾。</p>\n<p>Command–上箭头：将插入点移至文稿开头。</p>\n<p>Command–下箭头：将插入点移至文稿末尾。</p>\n<p>Command–左箭头：将插入点移至当前行的行首。</p>\n<p>Command–右箭头：将插入点移至当前行的行尾。</p>\n<p>Option–左箭头：将插入点移至上一字词的词首。</p>\n<p>Option–右箭头：将插入点移至下一字词的词尾。</p>\n<p>Shift-Command–上箭头：选中插入点与文稿开头之间的文本。</p>\n<p>Shift-Command–下箭头：选中插入点与文稿末尾之间的文本。</p>\n<p>Shift-Command–左箭头：选中插入点与当前行行首之间的文本。</p>\n<p>Shift-Command–右箭头：选中插入点与当前行行尾之间的文本。</p>\n<p>Shift–上箭头：将文本选择范围扩展到上一行相同水平位置的最近字符处。</p>\n<p>Shift–下箭头：将文本选择范围扩展到下一行相同水平位置的最近字符处。</p>\n<p>Shift–左箭头：将文本选择范围向左扩展一个字符。</p>\n<p>Shift–右箭头：将文本选择范围向右扩展一个字符。</p>\n<p>Option–Shift–上箭头：将文本选择范围扩展到当前段落的段首，再按一次则扩展到下一段落的段首。</p>\n<p>Option–Shift–下箭头：将文本选择范围扩展到当前段落的段尾，再按一次则扩展到下一段落的段尾。</p>\n<p>Option–Shift–左箭头：将文本选择范围扩展到当前字词的词首，再按一次则扩展到后一字词的词首。</p>\n<p>Option–Shift–左箭头：将文本选择范围扩展到当前字词的词尾，再按一次则扩展到后一字词的词尾。</p>\n<p>Control–A：移至行或段落的开头。</p>\n<p>Control–E：移至行或段落的末尾。</p>\n<p>Control–F：向前移动一个字符。</p>\n<p>Control–B：向后移动一个字符。</p>\n<p>Control–L：将光标或所选内容置于可见区域中央。</p>\n<p>Control–P：上移一行。</p>\n<p>Control–N：下移一行。</p>\n<p>Control–O：在插入点后新插入一行。</p>\n<p>Control–T：将插入点后面的字符与插入点前面的字符交换。</p>\n<p>Command–左花括号 ({)：左对齐。</p>\n<p>Command–右花括号 (})：右对齐。</p>\n<p>Shift-Command–竖线 (|)：居中对齐。</p>\n<p>Option-Command-F：前往搜索栏。</p>\n<p>Option-Command-T：显示或隐藏应用中的工具栏。</p>\n<p>Option-Command-C：拷贝样式：将所选项的格式设置拷贝到剪贴板。</p>\n<p>Option-Command-V：粘贴样式：将拷贝的样式应用到所选项。</p>\n<p>Option-Shift-Command-V：粘贴并匹配样式：将周围内容的样式应用到粘贴在该内容中的项目。</p>\n<p>Option-Command-I：显示或隐藏检查器窗口。</p>\n<p>Shift-Command-P：页面设置：显示用于选择文稿设置的窗口。</p>\n<p>Shift-Command-S：显示“存储为”对话框或复制当前文稿。</p>\n<p>Shift-Command-减号 (-)：缩小所选项。</p>\n<p>Shift-Command-加号 (+)：放大所选项。Command–等号 (=) 可实现相同的功能。</p>\n<p>Shift-Command–问号 (?)：打开“帮助”菜单。</p>\n<p> 参考：<a href=\"https://support.apple.com/zh-cn/HT201236\" target=\"_blank\" rel=\"noopener\">https://support.apple.com/zh-cn/HT201236</a></p>\n"},{"title":"linux基本命令","date":"2019-02-26T14:02:28.000Z","_content":"\nps -ef |grep {fillter}\nkill -9 {pid}\nmkdir -p roles/{common,install}/{handlers,files,meta,tasks,templates,vars\nss -tunlp|grep  7777\nss -alnp |grep 7777\nnetstat -tunlp|grep 777\nnetstat -alnp|grep 7777\nlsof -i tcp:777\n---------------------\nchmod\nu 代表用户. \ng 代表用户组. \no 代表其他. \na 代表所有.\n\n这意味着chmod u+x somefile 只授予这个文件的所属者执行的权限 \n而 chmod +x somefile 和 chmod a+x somefile 是一样的 \n\n// 实现免密登陆\nssh-copy-id root@hostip\n\n\n### 压缩文件\ntar -czvf wisecloud-ingress-controller.gz ./wisecloud-ingress-controller\n### 解压文件\ntar -zxvf wisecloud-ingress-controller.gz -o ./\n\n\ndocker run --rm -it golang:1.10 sh\n```\ngrep -A 50\n\ngrep -B 50\n``\n\nkcc get pod |grep orchestration | awk '{print $1}'\n\n\nscreen 使用\nscreen \n执行逻辑\n\nscreen -list \n\nscreen -r \n\n\n\nscreen -r 30719.pts-4.dev-10\nThere is a screen on:\n\t30719.pts-4.dev-10\t(Attached)\nThere is no screen to be resumed matching 30719.pts-4.dev-10.\n[root@dev-10 ~]# screen -r 30719.pts-4.dev-\n\n\nnetstat -an|wc -l   wc 统计行号\n\n\nkubectl get -o template node/dev-9 --template={{.spec}}\n\nlinux 部分快捷键\n1. Tab\n这是你不能没有的 Linux 快捷键。它将节省你 Linux 命令行中的大量时间。\n\n只需要输入一个命令，文件名，目录名甚至是命令选项的开头，并敲击 tab 键。 它将自动完成你输入的内容，或为你显示全部可能的结果。\n\n如果你只记一个快捷键，这将是必选的一个。\n\n2. Ctrl + C\n这些是为了在终端上中断命令或进程该按的键。它将立刻终止运行的程序。\n\n如果你想要停止使用一个正在后台运行的程序，只需按下这对组合键。\n\n3. Ctrl + Z\n该快捷键将正在运行的程序送到后台。 通常，你可以在使用 & 选项运行程序前之完成该操作， 但是如果你忘记使用选项运行程序，就使用这对组合键。\n\n4. Ctrl + D\n这对键盘快捷键将使你退出当前终端。如果你使用 SSH 连接，它将会关闭。 如果你直接使用一个终端，该应用将会立刻关闭。\n\n把它当成“退出”命令。\n\n5. Ctrl + L\n你怎么清空你的终端屏幕？我猜是用 clear 命令。\n\n你可以使用 Ctrl+L 清空终端，代替输入 C-L-E-A-R。得心应手，不是吗？\n\n6. Ctrl + A\n该快捷键将移动光标到所在行首。\n\n假设你在终端输入了一个很长的命令或路径，并且你想要回到它的开头， 使用方向键移动光标将花费大量时间。注意你无法使用鼠标移动光标到行首。\n\n这是 Ctrl+A 节省时间的地方。\n\n7. Ctrl + E\n这对快捷键与 Ctrl+A 相反。 Ctrl+A 送光标到行首，反之 Ctrl+E 移动光标到行尾。\n\n8. Ctrl + U\n输入了错误的命令？ 代替用退格键来丢弃当前命令，使用 Linux 终端中的 Ctrl+U 快捷键。 该快捷键会擦除从当前光标位置到行首的全部内容。\n\n9. Ctrl + K\n这对和 Ctrl+U 快捷键有点像。 唯一的不同在于不是行首，它擦除的是从当前光标位置到行尾的全部内容。\n\n10. Ctrl + W\n你刚才了解了擦除到行首和行尾的文本。 但如果你只需要删除一个单词呢？使用 Ctrl+W 快捷键。\n\n使用 Ctrl+W 快捷键，你可以擦除光标位置前的单词。 如果光标在一个单词本身上，它将擦除从光标位置到词首的全部字母。\n\n最好的方法是用它移动光标到要删除单词后的一个空格上， 然后使用 Ctrl+W 键盘快捷键。\n\n11. Ctrl + Y\n这将粘贴使用 Ctrl+W，Ctrl+U 和 Ctrl+K 快捷键擦除的文本。 如果你删除了错误的文本或需要在某处使用已擦除的文本，这将派上用场。\n\n12. Ctrl + P\n你可以使用该快捷键来查看上一个命令。 你可以反复按该键来返回到历史命令。 在很多终端里，使用 PgUp 键来实现相同的功能。\n\n13. Ctrl + N\n你可以结合 Ctrl+P 使用该快捷键。Ctrl+N 显示下一个命令。 如果使用 Ctrl+P 查看上一条命令，你可以使用 Ctrl+N 来回导航。 许多终端都把此快捷键映射到 PgDn 键。\n\n14. Ctrl + R\n你可以使用该快捷键来搜索历史命令。\n\n```\n\n\n通过m命令。讲光标放在你要移动的行，输入:m +1向下移动一行，输入:m -2向上移动一行。\n\n\n面的命令设置最低空闲内存，立即生效，但系统重启会失效。永久生效则要写到配置文件\n\n```\n/etc/sysctl.conf\n```\n\n```\nsysctl set vm.min_free_kbytes=1024000\n```\n\nESC + f-- 向右移动一个单词，MAC下建议用ALT + →\nESC + b-- 向左移动一个单词，MAC下建议用ALT + ←","source":"_posts/linux-cmd.md","raw":"---\ntitle: linux基本命令\ndate: 2019-02-26 22:02:28\ntags: [linux]\n---\n\nps -ef |grep {fillter}\nkill -9 {pid}\nmkdir -p roles/{common,install}/{handlers,files,meta,tasks,templates,vars\nss -tunlp|grep  7777\nss -alnp |grep 7777\nnetstat -tunlp|grep 777\nnetstat -alnp|grep 7777\nlsof -i tcp:777\n---------------------\nchmod\nu 代表用户. \ng 代表用户组. \no 代表其他. \na 代表所有.\n\n这意味着chmod u+x somefile 只授予这个文件的所属者执行的权限 \n而 chmod +x somefile 和 chmod a+x somefile 是一样的 \n\n// 实现免密登陆\nssh-copy-id root@hostip\n\n\n### 压缩文件\ntar -czvf wisecloud-ingress-controller.gz ./wisecloud-ingress-controller\n### 解压文件\ntar -zxvf wisecloud-ingress-controller.gz -o ./\n\n\ndocker run --rm -it golang:1.10 sh\n```\ngrep -A 50\n\ngrep -B 50\n``\n\nkcc get pod |grep orchestration | awk '{print $1}'\n\n\nscreen 使用\nscreen \n执行逻辑\n\nscreen -list \n\nscreen -r \n\n\n\nscreen -r 30719.pts-4.dev-10\nThere is a screen on:\n\t30719.pts-4.dev-10\t(Attached)\nThere is no screen to be resumed matching 30719.pts-4.dev-10.\n[root@dev-10 ~]# screen -r 30719.pts-4.dev-\n\n\nnetstat -an|wc -l   wc 统计行号\n\n\nkubectl get -o template node/dev-9 --template={{.spec}}\n\nlinux 部分快捷键\n1. Tab\n这是你不能没有的 Linux 快捷键。它将节省你 Linux 命令行中的大量时间。\n\n只需要输入一个命令，文件名，目录名甚至是命令选项的开头，并敲击 tab 键。 它将自动完成你输入的内容，或为你显示全部可能的结果。\n\n如果你只记一个快捷键，这将是必选的一个。\n\n2. Ctrl + C\n这些是为了在终端上中断命令或进程该按的键。它将立刻终止运行的程序。\n\n如果你想要停止使用一个正在后台运行的程序，只需按下这对组合键。\n\n3. Ctrl + Z\n该快捷键将正在运行的程序送到后台。 通常，你可以在使用 & 选项运行程序前之完成该操作， 但是如果你忘记使用选项运行程序，就使用这对组合键。\n\n4. Ctrl + D\n这对键盘快捷键将使你退出当前终端。如果你使用 SSH 连接，它将会关闭。 如果你直接使用一个终端，该应用将会立刻关闭。\n\n把它当成“退出”命令。\n\n5. Ctrl + L\n你怎么清空你的终端屏幕？我猜是用 clear 命令。\n\n你可以使用 Ctrl+L 清空终端，代替输入 C-L-E-A-R。得心应手，不是吗？\n\n6. Ctrl + A\n该快捷键将移动光标到所在行首。\n\n假设你在终端输入了一个很长的命令或路径，并且你想要回到它的开头， 使用方向键移动光标将花费大量时间。注意你无法使用鼠标移动光标到行首。\n\n这是 Ctrl+A 节省时间的地方。\n\n7. Ctrl + E\n这对快捷键与 Ctrl+A 相反。 Ctrl+A 送光标到行首，反之 Ctrl+E 移动光标到行尾。\n\n8. Ctrl + U\n输入了错误的命令？ 代替用退格键来丢弃当前命令，使用 Linux 终端中的 Ctrl+U 快捷键。 该快捷键会擦除从当前光标位置到行首的全部内容。\n\n9. Ctrl + K\n这对和 Ctrl+U 快捷键有点像。 唯一的不同在于不是行首，它擦除的是从当前光标位置到行尾的全部内容。\n\n10. Ctrl + W\n你刚才了解了擦除到行首和行尾的文本。 但如果你只需要删除一个单词呢？使用 Ctrl+W 快捷键。\n\n使用 Ctrl+W 快捷键，你可以擦除光标位置前的单词。 如果光标在一个单词本身上，它将擦除从光标位置到词首的全部字母。\n\n最好的方法是用它移动光标到要删除单词后的一个空格上， 然后使用 Ctrl+W 键盘快捷键。\n\n11. Ctrl + Y\n这将粘贴使用 Ctrl+W，Ctrl+U 和 Ctrl+K 快捷键擦除的文本。 如果你删除了错误的文本或需要在某处使用已擦除的文本，这将派上用场。\n\n12. Ctrl + P\n你可以使用该快捷键来查看上一个命令。 你可以反复按该键来返回到历史命令。 在很多终端里，使用 PgUp 键来实现相同的功能。\n\n13. Ctrl + N\n你可以结合 Ctrl+P 使用该快捷键。Ctrl+N 显示下一个命令。 如果使用 Ctrl+P 查看上一条命令，你可以使用 Ctrl+N 来回导航。 许多终端都把此快捷键映射到 PgDn 键。\n\n14. Ctrl + R\n你可以使用该快捷键来搜索历史命令。\n\n```\n\n\n通过m命令。讲光标放在你要移动的行，输入:m +1向下移动一行，输入:m -2向上移动一行。\n\n\n面的命令设置最低空闲内存，立即生效，但系统重启会失效。永久生效则要写到配置文件\n\n```\n/etc/sysctl.conf\n```\n\n```\nsysctl set vm.min_free_kbytes=1024000\n```\n\nESC + f-- 向右移动一个单词，MAC下建议用ALT + →\nESC + b-- 向左移动一个单词，MAC下建议用ALT + ←","slug":"linux-cmd","published":1,"updated":"2019-07-02T13:22:45.274Z","_id":"cjxludw8j0000v2xranvc8kri","comments":1,"layout":"post","photos":[],"link":"","content":"<p>ps -ef |grep {fillter}<br>kill -9 {pid}<br>mkdir -p roles/{common,install}/{handlers,files,meta,tasks,templates,vars<br>ss -tunlp|grep  7777<br>ss -alnp |grep 7777<br>netstat -tunlp|grep 777<br>netstat -alnp|grep 7777</p>\n<h2 id=\"lsof-i-tcp-777\"><a href=\"#lsof-i-tcp-777\" class=\"headerlink\" title=\"lsof -i tcp:777\"></a>lsof -i tcp:777</h2><p>chmod<br>u 代表用户.<br>g 代表用户组.<br>o 代表其他.<br>a 代表所有.</p>\n<p>这意味着chmod u+x somefile 只授予这个文件的所属者执行的权限<br>而 chmod +x somefile 和 chmod a+x somefile 是一样的 </p>\n<p>// 实现免密登陆<br>ssh-copy-id root@hostip</p>\n<h3 id=\"压缩文件\"><a href=\"#压缩文件\" class=\"headerlink\" title=\"压缩文件\"></a>压缩文件</h3><p>tar -czvf wisecloud-ingress-controller.gz ./wisecloud-ingress-controller</p>\n<h3 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a>解压文件</h3><p>tar -zxvf wisecloud-ingress-controller.gz -o ./</p>\n<p>docker run –rm -it golang:1.10 sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -A 50</span><br><span class=\"line\"></span><br><span class=\"line\">grep -B 50</span><br><span class=\"line\">``</span><br><span class=\"line\"></span><br><span class=\"line\">kcc get pod |grep orchestration | awk &apos;&#123;print $1&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">screen 使用</span><br><span class=\"line\">screen </span><br><span class=\"line\">执行逻辑</span><br><span class=\"line\"></span><br><span class=\"line\">screen -list </span><br><span class=\"line\"></span><br><span class=\"line\">screen -r </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">screen -r 30719.pts-4.dev-10</span><br><span class=\"line\">There is a screen on:</span><br><span class=\"line\">\t30719.pts-4.dev-10\t(Attached)</span><br><span class=\"line\">There is no screen to be resumed matching 30719.pts-4.dev-10.</span><br><span class=\"line\">[root@dev-10 ~]# screen -r 30719.pts-4.dev-</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">netstat -an|wc -l   wc 统计行号</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get -o template node/dev-9 --template=&#123;&#123;.spec&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">linux 部分快捷键</span><br><span class=\"line\">1. Tab</span><br><span class=\"line\">这是你不能没有的 Linux 快捷键。它将节省你 Linux 命令行中的大量时间。</span><br><span class=\"line\"></span><br><span class=\"line\">只需要输入一个命令，文件名，目录名甚至是命令选项的开头，并敲击 tab 键。 它将自动完成你输入的内容，或为你显示全部可能的结果。</span><br><span class=\"line\"></span><br><span class=\"line\">如果你只记一个快捷键，这将是必选的一个。</span><br><span class=\"line\"></span><br><span class=\"line\">2. Ctrl + C</span><br><span class=\"line\">这些是为了在终端上中断命令或进程该按的键。它将立刻终止运行的程序。</span><br><span class=\"line\"></span><br><span class=\"line\">如果你想要停止使用一个正在后台运行的程序，只需按下这对组合键。</span><br><span class=\"line\"></span><br><span class=\"line\">3. Ctrl + Z</span><br><span class=\"line\">该快捷键将正在运行的程序送到后台。 通常，你可以在使用 &amp; 选项运行程序前之完成该操作， 但是如果你忘记使用选项运行程序，就使用这对组合键。</span><br><span class=\"line\"></span><br><span class=\"line\">4. Ctrl + D</span><br><span class=\"line\">这对键盘快捷键将使你退出当前终端。如果你使用 SSH 连接，它将会关闭。 如果你直接使用一个终端，该应用将会立刻关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">把它当成“退出”命令。</span><br><span class=\"line\"></span><br><span class=\"line\">5. Ctrl + L</span><br><span class=\"line\">你怎么清空你的终端屏幕？我猜是用 clear 命令。</span><br><span class=\"line\"></span><br><span class=\"line\">你可以使用 Ctrl+L 清空终端，代替输入 C-L-E-A-R。得心应手，不是吗？</span><br><span class=\"line\"></span><br><span class=\"line\">6. Ctrl + A</span><br><span class=\"line\">该快捷键将移动光标到所在行首。</span><br><span class=\"line\"></span><br><span class=\"line\">假设你在终端输入了一个很长的命令或路径，并且你想要回到它的开头， 使用方向键移动光标将花费大量时间。注意你无法使用鼠标移动光标到行首。</span><br><span class=\"line\"></span><br><span class=\"line\">这是 Ctrl+A 节省时间的地方。</span><br><span class=\"line\"></span><br><span class=\"line\">7. Ctrl + E</span><br><span class=\"line\">这对快捷键与 Ctrl+A 相反。 Ctrl+A 送光标到行首，反之 Ctrl+E 移动光标到行尾。</span><br><span class=\"line\"></span><br><span class=\"line\">8. Ctrl + U</span><br><span class=\"line\">输入了错误的命令？ 代替用退格键来丢弃当前命令，使用 Linux 终端中的 Ctrl+U 快捷键。 该快捷键会擦除从当前光标位置到行首的全部内容。</span><br><span class=\"line\"></span><br><span class=\"line\">9. Ctrl + K</span><br><span class=\"line\">这对和 Ctrl+U 快捷键有点像。 唯一的不同在于不是行首，它擦除的是从当前光标位置到行尾的全部内容。</span><br><span class=\"line\"></span><br><span class=\"line\">10. Ctrl + W</span><br><span class=\"line\">你刚才了解了擦除到行首和行尾的文本。 但如果你只需要删除一个单词呢？使用 Ctrl+W 快捷键。</span><br><span class=\"line\"></span><br><span class=\"line\">使用 Ctrl+W 快捷键，你可以擦除光标位置前的单词。 如果光标在一个单词本身上，它将擦除从光标位置到词首的全部字母。</span><br><span class=\"line\"></span><br><span class=\"line\">最好的方法是用它移动光标到要删除单词后的一个空格上， 然后使用 Ctrl+W 键盘快捷键。</span><br><span class=\"line\"></span><br><span class=\"line\">11. Ctrl + Y</span><br><span class=\"line\">这将粘贴使用 Ctrl+W，Ctrl+U 和 Ctrl+K 快捷键擦除的文本。 如果你删除了错误的文本或需要在某处使用已擦除的文本，这将派上用场。</span><br><span class=\"line\"></span><br><span class=\"line\">12. Ctrl + P</span><br><span class=\"line\">你可以使用该快捷键来查看上一个命令。 你可以反复按该键来返回到历史命令。 在很多终端里，使用 PgUp 键来实现相同的功能。</span><br><span class=\"line\"></span><br><span class=\"line\">13. Ctrl + N</span><br><span class=\"line\">你可以结合 Ctrl+P 使用该快捷键。Ctrl+N 显示下一个命令。 如果使用 Ctrl+P 查看上一条命令，你可以使用 Ctrl+N 来回导航。 许多终端都把此快捷键映射到 PgDn 键。</span><br><span class=\"line\"></span><br><span class=\"line\">14. Ctrl + R</span><br><span class=\"line\">你可以使用该快捷键来搜索历史命令。</span><br></pre></td></tr></table></figure></p>\n<p>通过m命令。讲光标放在你要移动的行，输入:m +1向下移动一行，输入:m -2向上移动一行。</p>\n<p>面的命令设置最低空闲内存，立即生效，但系统重启会失效。永久生效则要写到配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl set vm.min_free_kbytes=1024000</span><br></pre></td></tr></table></figure>\n<p>ESC + f– 向右移动一个单词，MAC下建议用ALT + →<br>ESC + b– 向左移动一个单词，MAC下建议用ALT + ←</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>ps -ef |grep {fillter}<br>kill -9 {pid}<br>mkdir -p roles/{common,install}/{handlers,files,meta,tasks,templates,vars<br>ss -tunlp|grep  7777<br>ss -alnp |grep 7777<br>netstat -tunlp|grep 777<br>netstat -alnp|grep 7777</p>\n<h2 id=\"lsof-i-tcp-777\"><a href=\"#lsof-i-tcp-777\" class=\"headerlink\" title=\"lsof -i tcp:777\"></a>lsof -i tcp:777</h2><p>chmod<br>u 代表用户.<br>g 代表用户组.<br>o 代表其他.<br>a 代表所有.</p>\n<p>这意味着chmod u+x somefile 只授予这个文件的所属者执行的权限<br>而 chmod +x somefile 和 chmod a+x somefile 是一样的 </p>\n<p>// 实现免密登陆<br>ssh-copy-id root@hostip</p>\n<h3 id=\"压缩文件\"><a href=\"#压缩文件\" class=\"headerlink\" title=\"压缩文件\"></a>压缩文件</h3><p>tar -czvf wisecloud-ingress-controller.gz ./wisecloud-ingress-controller</p>\n<h3 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a>解压文件</h3><p>tar -zxvf wisecloud-ingress-controller.gz -o ./</p>\n<p>docker run –rm -it golang:1.10 sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -A 50</span><br><span class=\"line\"></span><br><span class=\"line\">grep -B 50</span><br><span class=\"line\">``</span><br><span class=\"line\"></span><br><span class=\"line\">kcc get pod |grep orchestration | awk &apos;&#123;print $1&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">screen 使用</span><br><span class=\"line\">screen </span><br><span class=\"line\">执行逻辑</span><br><span class=\"line\"></span><br><span class=\"line\">screen -list </span><br><span class=\"line\"></span><br><span class=\"line\">screen -r </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">screen -r 30719.pts-4.dev-10</span><br><span class=\"line\">There is a screen on:</span><br><span class=\"line\">\t30719.pts-4.dev-10\t(Attached)</span><br><span class=\"line\">There is no screen to be resumed matching 30719.pts-4.dev-10.</span><br><span class=\"line\">[root@dev-10 ~]# screen -r 30719.pts-4.dev-</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">netstat -an|wc -l   wc 统计行号</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get -o template node/dev-9 --template=&#123;&#123;.spec&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">linux 部分快捷键</span><br><span class=\"line\">1. Tab</span><br><span class=\"line\">这是你不能没有的 Linux 快捷键。它将节省你 Linux 命令行中的大量时间。</span><br><span class=\"line\"></span><br><span class=\"line\">只需要输入一个命令，文件名，目录名甚至是命令选项的开头，并敲击 tab 键。 它将自动完成你输入的内容，或为你显示全部可能的结果。</span><br><span class=\"line\"></span><br><span class=\"line\">如果你只记一个快捷键，这将是必选的一个。</span><br><span class=\"line\"></span><br><span class=\"line\">2. Ctrl + C</span><br><span class=\"line\">这些是为了在终端上中断命令或进程该按的键。它将立刻终止运行的程序。</span><br><span class=\"line\"></span><br><span class=\"line\">如果你想要停止使用一个正在后台运行的程序，只需按下这对组合键。</span><br><span class=\"line\"></span><br><span class=\"line\">3. Ctrl + Z</span><br><span class=\"line\">该快捷键将正在运行的程序送到后台。 通常，你可以在使用 &amp; 选项运行程序前之完成该操作， 但是如果你忘记使用选项运行程序，就使用这对组合键。</span><br><span class=\"line\"></span><br><span class=\"line\">4. Ctrl + D</span><br><span class=\"line\">这对键盘快捷键将使你退出当前终端。如果你使用 SSH 连接，它将会关闭。 如果你直接使用一个终端，该应用将会立刻关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">把它当成“退出”命令。</span><br><span class=\"line\"></span><br><span class=\"line\">5. Ctrl + L</span><br><span class=\"line\">你怎么清空你的终端屏幕？我猜是用 clear 命令。</span><br><span class=\"line\"></span><br><span class=\"line\">你可以使用 Ctrl+L 清空终端，代替输入 C-L-E-A-R。得心应手，不是吗？</span><br><span class=\"line\"></span><br><span class=\"line\">6. Ctrl + A</span><br><span class=\"line\">该快捷键将移动光标到所在行首。</span><br><span class=\"line\"></span><br><span class=\"line\">假设你在终端输入了一个很长的命令或路径，并且你想要回到它的开头， 使用方向键移动光标将花费大量时间。注意你无法使用鼠标移动光标到行首。</span><br><span class=\"line\"></span><br><span class=\"line\">这是 Ctrl+A 节省时间的地方。</span><br><span class=\"line\"></span><br><span class=\"line\">7. Ctrl + E</span><br><span class=\"line\">这对快捷键与 Ctrl+A 相反。 Ctrl+A 送光标到行首，反之 Ctrl+E 移动光标到行尾。</span><br><span class=\"line\"></span><br><span class=\"line\">8. Ctrl + U</span><br><span class=\"line\">输入了错误的命令？ 代替用退格键来丢弃当前命令，使用 Linux 终端中的 Ctrl+U 快捷键。 该快捷键会擦除从当前光标位置到行首的全部内容。</span><br><span class=\"line\"></span><br><span class=\"line\">9. Ctrl + K</span><br><span class=\"line\">这对和 Ctrl+U 快捷键有点像。 唯一的不同在于不是行首，它擦除的是从当前光标位置到行尾的全部内容。</span><br><span class=\"line\"></span><br><span class=\"line\">10. Ctrl + W</span><br><span class=\"line\">你刚才了解了擦除到行首和行尾的文本。 但如果你只需要删除一个单词呢？使用 Ctrl+W 快捷键。</span><br><span class=\"line\"></span><br><span class=\"line\">使用 Ctrl+W 快捷键，你可以擦除光标位置前的单词。 如果光标在一个单词本身上，它将擦除从光标位置到词首的全部字母。</span><br><span class=\"line\"></span><br><span class=\"line\">最好的方法是用它移动光标到要删除单词后的一个空格上， 然后使用 Ctrl+W 键盘快捷键。</span><br><span class=\"line\"></span><br><span class=\"line\">11. Ctrl + Y</span><br><span class=\"line\">这将粘贴使用 Ctrl+W，Ctrl+U 和 Ctrl+K 快捷键擦除的文本。 如果你删除了错误的文本或需要在某处使用已擦除的文本，这将派上用场。</span><br><span class=\"line\"></span><br><span class=\"line\">12. Ctrl + P</span><br><span class=\"line\">你可以使用该快捷键来查看上一个命令。 你可以反复按该键来返回到历史命令。 在很多终端里，使用 PgUp 键来实现相同的功能。</span><br><span class=\"line\"></span><br><span class=\"line\">13. Ctrl + N</span><br><span class=\"line\">你可以结合 Ctrl+P 使用该快捷键。Ctrl+N 显示下一个命令。 如果使用 Ctrl+P 查看上一条命令，你可以使用 Ctrl+N 来回导航。 许多终端都把此快捷键映射到 PgDn 键。</span><br><span class=\"line\"></span><br><span class=\"line\">14. Ctrl + R</span><br><span class=\"line\">你可以使用该快捷键来搜索历史命令。</span><br></pre></td></tr></table></figure></p>\n<p>通过m命令。讲光标放在你要移动的行，输入:m +1向下移动一行，输入:m -2向上移动一行。</p>\n<p>面的命令设置最低空闲内存，立即生效，但系统重启会失效。永久生效则要写到配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl set vm.min_free_kbytes=1024000</span><br></pre></td></tr></table></figure>\n<p>ESC + f– 向右移动一个单词，MAC下建议用ALT + →<br>ESC + b– 向左移动一个单词，MAC下建议用ALT + ←</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxlu2kgc000jgkxrnjb7y5xd","category_id":"cjxlu2kge000ngkxr9alk86wb","_id":"cjxlu2kgm0013gkxrgxtodq91"},{"post_id":"cjxlu2kgc000jgkxrnjb7y5xd","category_id":"cjxlu2kgh000vgkxrpnb8jzf2","_id":"cjxlu2kgn0016gkxri6shtbh3"},{"post_id":"cjxlu2kh1001tgkxrt5m0sexx","category_id":"cjxlu2kh2001vgkxr14tb1513","_id":"cjxlu2kh3001ygkxrgmvnb1nq"}],"PostTag":[{"post_id":"cjxlu2kfz0003gkxr5syjpqi5","tag_id":"cjxlu2kg30007gkxr42pjifmy","_id":"cjxlu2kga000fgkxrbl18b89h"},{"post_id":"cjxlu2kg7000agkxr6mvhlplp","tag_id":"cjxlu2kg9000egkxrrjpre6j1","_id":"cjxlu2kgd000lgkxrfwk004n7"},{"post_id":"cjxlu2kg8000cgkxrk9mglzdw","tag_id":"cjxlu2kgd000kgkxrbd7rtfsh","_id":"cjxlu2kgg000rgkxrbb3nt5zc"},{"post_id":"cjxlu2kga000ggkxr5hg84yzl","tag_id":"cjxlu2kgf000pgkxrtqfqrlpa","_id":"cjxlu2kgi000wgkxrvputnz4q"},{"post_id":"cjxlu2kgc000jgkxrnjb7y5xd","tag_id":"cjxlu2kgh000tgkxrapiwhm2e","_id":"cjxlu2kgm0014gkxrleak7nrl"},{"post_id":"cjxlu2kgc000jgkxrnjb7y5xd","tag_id":"cjxlu2kgj000ygkxrtj6t1fdb","_id":"cjxlu2kgn0017gkxrcpciz6zb"},{"post_id":"cjxlu2kgl0011gkxrlx664w8h","tag_id":"cjxlu2kgj000ygkxrtj6t1fdb","_id":"cjxlu2kgp001agkxrxe51ph2q"},{"post_id":"cjxlu2kge000ogkxrwdznae55","tag_id":"cjxlu2kgm0012gkxrfsvk63yu","_id":"cjxlu2kgs001fgkxrnft1j8vq"},{"post_id":"cjxlu2kge000ogkxrwdznae55","tag_id":"cjxlu2kgp0019gkxrfonj2mk2","_id":"cjxlu2kgt001hgkxrmp7ven5f"},{"post_id":"cjxlu2kgh000ugkxr99vbsb1d","tag_id":"cjxlu2kgp0019gkxrfonj2mk2","_id":"cjxlu2kgv001mgkxrv6o1o19o"},{"post_id":"cjxlu2kgh000ugkxr99vbsb1d","tag_id":"cjxlu2kgt001igkxrghzcgktp","_id":"cjxlu2kgw001ngkxro3cldcls"},{"post_id":"cjxlu2kgj000zgkxr4q6zjm9z","tag_id":"cjxlu2kgv001lgkxrikxat2kw","_id":"cjxlu2kgw001pgkxr3axfli85"},{"post_id":"cjxlu2kgo0018gkxr8mvqjcnq","tag_id":"cjxlu2kgw001ogkxr6gdsb9nv","_id":"cjxlu2kgy001rgkxrv452f1ur"},{"post_id":"cjxlu2kgs001egkxrayv5yu8h","tag_id":"cjxlu2kgw001ogkxr6gdsb9nv","_id":"cjxlu2kgy001sgkxrrwjjtcow"},{"post_id":"cjxlu2kh1001tgkxrt5m0sexx","tag_id":"cjxlu2kh2001wgkxrpf69rsry","_id":"cjxlu2kh3001xgkxra2xtye98"},{"post_id":"cjxlu2kgu001jgkxr97x16qn8","tag_id":"cjxlu2kgj000ygkxrtj6t1fdb","_id":"cjxlu9edo001zgkxrkuaa2dan"},{"post_id":"cjxlu2kg50008gkxr9mipx8t7","tag_id":"cjxlu2kgf000pgkxrtqfqrlpa","_id":"cjxlu9edr0020gkxrb85tyv4d"},{"post_id":"cjxlu2kgt001ggkxry7aulut7","tag_id":"cjxlu9edr0021gkxrzwvc7djy","_id":"cjxlu9eds0022gkxrjokixw26"},{"post_id":"cjxlu2kgq001cgkxreown214s","tag_id":"cjxlu2kgw001ogkxr6gdsb9nv","_id":"cjxlu9edy0023gkxri7gv6wpl"},{"post_id":"cjxludw8j0000v2xranvc8kri","tag_id":"cjxlu2kgw001ogkxr6gdsb9nv","_id":"cjxludw8n0001v2xrwqhznzsk"}],"Tag":[{"name":"python","_id":"cjxlu2kg30007gkxr42pjifmy"},{"name":"log","_id":"cjxlu2kg9000egkxrrjpre6j1"},{"name":"hexo","_id":"cjxlu2kgd000kgkxrbd7rtfsh"},{"name":"golang","_id":"cjxlu2kgf000pgkxrtqfqrlpa"},{"name":"helm","_id":"cjxlu2kgh000tgkxrapiwhm2e"},{"name":"kubernetes","_id":"cjxlu2kgj000ygkxrtj6t1fdb"},{"name":"harbor","_id":"cjxlu2kgm0012gkxrfsvk63yu"},{"name":"docker","_id":"cjxlu2kgp0019gkxrfonj2mk2"},{"name":"kafka","_id":"cjxlu2kgt001igkxrghzcgktp"},{"name":"nginx","_id":"cjxlu2kgv001lgkxrikxat2kw"},{"name":"linux","_id":"cjxlu2kgw001ogkxr6gdsb9nv"},{"name":"git","_id":"cjxlu2kh2001wgkxrpf69rsry"},{"name":"redis","_id":"cjxlu9edr0021gkxrzwvc7djy"}]}}